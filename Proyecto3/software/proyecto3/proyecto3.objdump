
proyecto3.elf:     file format elf32-littlenios2
proyecto3.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000230

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x000027bc memsz 0x000027bc flags r-x
    LOAD off    0x000037dc vaddr 0x000027dc paddr 0x00002b48 align 2**12
         filesz 0x0000036c memsz 0x0000036c flags rw-
    LOAD off    0x00003eb4 vaddr 0x00002eb4 paddr 0x00002eb4 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002518  00000230  00000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000094  00002748  00002748  00003748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000036c  000027dc  00002b48  000037dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00002eb4  00002eb4  00003eb4  2**2
                  ALLOC, SMALL_DATA
  6 .on_chip_memory 00000000  00002fd4  00002fd4  00003b48  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003b48  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000005d0  00000000  00000000  00003b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007629  00000000  00000000  00004140  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000290f  00000000  00000000  0000b769  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002c64  00000000  00000000  0000e078  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b18  00000000  00000000  00010cdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d9a  00000000  00000000  000117f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001337  00000000  00000000  0001358e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000148c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000288  00000000  00000000  000148d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000164ad  2**0
                  CONTENTS, READONLY
 18 .cpu          00000011  00000000  00000000  000164b0  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000164c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000164c2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000164c3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000164cc  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000164d5  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000010  00000000  00000000  000164de  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000003d  00000000  00000000  000164ee  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00039232  00000000  00000000  0001652b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000230 l    d  .text	00000000 .text
00002748 l    d  .rodata	00000000 .rodata
000027dc l    d  .rwdata	00000000 .rwdata
00002eb4 l    d  .bss	00000000 .bss
00002fd4 l    d  .on_chip_memory	00000000 .on_chip_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../proyecto3_bsp//obj/HAL/src/crt0.o
00000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000053c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00002868 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000dd0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000f28 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00001078 l     F .text	00000038 alt_dev_reg
00002948 l     O .rwdata	0000002c jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00001574 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00001678 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000017c0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000017ec l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00001bd0 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00001d30 l     F .text	00000050 alt_get_errno
00001d80 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002ed0 g     O .bss	00000004 alt_instruction_exception_handler
00000ebc g     F .text	0000006c alt_main
00002ed4 g     O .bss	00000100 alt_irq
00002b48 g       *ABS*	00000000 __flash_rwdata_start
000004f0 g     F .text	0000004c printf
000027dc g     O .rwdata	0000008c list
000021fc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00002eb4 g     O .bss	00000004 errno
00002ebc g     O .bss	00000004 alt_argv
0000ab1c g       *ABS*	00000000 _gp
0000299c g     O .rwdata	00000180 alt_fd_list
0000026c g     F .text	00000098 test_program
00002220 g     F .text	00000090 alt_find_dev
00001cb4 g     F .text	0000007c alt_io_redirect
00002498 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000011f8 g     F .text	000000ec altera_avalon_jtag_uart_read
000004b4 g     F .text	0000003c _printf_r
00000d14 g     F .text	00000064 .hidden __udivsi3
00002b34 g     O .rwdata	00000004 alt_max_fd
00002b1c g     O .rwdata	00000004 _global_impure_ptr
00002fd4 g       *ABS*	00000000 __bss_end
00001ae0 g     F .text	000000f0 alt_iic_isr_register
000020f4 g     F .text	00000108 alt_tick
00001a94 g     F .text	0000004c alt_ic_irq_enabled
00002058 g     F .text	0000009c alt_alarm_stop
00002ec4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00002974 g     O .rwdata	00000028 alt_dev_null
000017a0 g     F .text	00000020 alt_dcache_flush_all
00002b48 g       *ABS*	00000000 __ram_rwdata_end
00002b2c g     O .rwdata	00000008 alt_dev_list
00000f78 g     F .text	00000100 write
000027dc g       *ABS*	00000000 __ram_rodata_end
00000d78 g     F .text	00000058 .hidden __umodsi3
00002fd4 g       *ABS*	00000000 end
000001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
000015ec g     F .text	0000008c alt_avalon_timer_sc_init
000012e4 g     F .text	00000094 altera_avalon_jtag_uart_write
000005a8 g     F .text	0000052c ___vfprintf_internal_r
00002584 g     F .text	00000190 __call_exitprocs
00000230 g     F .text	0000003c _start
00002ec8 g     O .bss	00000004 _alt_tick_rate
00001378 g     F .text	000001fc alt_avalon_spi_command
00002ecc g     O .bss	00000004 _alt_nticks
000010e8 g     F .text	00000050 alt_sys_init
0000048c g     F .text	00000028 .hidden __mulsi3
000027dc g       *ABS*	00000000 __ram_rwdata_start
00002748 g       *ABS*	00000000 __ram_rodata_start
00001138 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000023c4 g     F .text	000000d4 alt_get_fd
00002554 g     F .text	00000030 memcmp
00002fd4 g       *ABS*	00000000 __alt_stack_base
000022b0 g     F .text	00000114 alt_find_file
0000183c g     F .text	000000a4 alt_dev_llist_insert
00000af0 g     F .text	000000b8 __sfvwrite_small_dev
00002eb4 g       *ABS*	00000000 __bss_start
00000304 g     F .text	00000188 main
00002ec0 g     O .bss	00000004 alt_envp
00001198 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00002b38 g     O .rwdata	00000004 alt_errno
00000c1c g     F .text	00000084 .hidden __divsi3
00002748 g       *ABS*	00000000 __flash_rodata_start
000010b0 g     F .text	00000038 alt_irq_init
00001fd4 g     F .text	00000084 alt_release_fd
00000bc4 g     F .text	00000058 _write_r
00002b20 g     O .rwdata	00000004 _impure_ptr
00002eb8 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00002b24 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00001900 g     F .text	00000050 alt_ic_isr_register
00002b48 g       *ABS*	00000000 _edata
00002fd4 g       *ABS*	00000000 _end
00000230 g       *ABS*	00000000 __ram_exceptions_end
000019f0 g     F .text	000000a4 alt_ic_irq_disable
00002534 g     F .text	00000020 exit
00000ca0 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00002714 g     F .text	00000034 _exit
00000000 g       *ABS*	00000000 __alt_mem_on_chip_memory
00000ba8 g     F .text	0000001c strlen
00001e74 g     F .text	00000160 open
000018e0 g     F .text	00000020 alt_icache_flush_all
00002b3c g     O .rwdata	00000004 alt_priority_mask
00001950 g     F .text	000000a0 alt_ic_irq_enable
00000ad4 g     F .text	0000001c __vfprintf_internal
00002b40 g     O .rwdata	00000008 alt_alarm_list
000016c8 g     F .text	000000d8 close
00000e38 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08408c14 	ori	at,at,560
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800034 	movhi	r2,0
 140:	108bb504 	addi	r2,r2,11988
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800034 	movhi	r2,0
 158:	108bb504 	addi	r2,r2,11988
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xffff012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xffff0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 1e4:	00bfffc4 	movi	r2,-1
 1e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 1ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 1f0:	d0a0ed17 	ldw	r2,-31820(gp)
 1f4:	10000726 	beq	r2,zero,214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 1f8:	d0a0ed17 	ldw	r2,-31820(gp)
 1fc:	e0fffd17 	ldw	r3,-12(fp)
 200:	e1bffe17 	ldw	r6,-8(fp)
 204:	e17fff17 	ldw	r5,-4(fp)
 208:	1809883a 	mov	r4,r3
 20c:	103ee83a 	callr	r2
 210:	00000206 	br	21c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 218:	0005883a 	mov	r2,zero
}
 21c:	e037883a 	mov	sp,fp
 220:	dfc00117 	ldw	ra,4(sp)
 224:	df000017 	ldw	fp,0(sp)
 228:	dec00204 	addi	sp,sp,8
 22c:	f800283a 	ret

Disassembly of section .text:

00000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     230:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     238:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     23c:	d6aac714 	ori	gp,gp,43804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     240:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     244:	108bad14 	ori	r2,r2,11956

    movhi r3, %hi(__bss_end)
     248:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     24c:	18cbf514 	ori	r3,r3,12244

    beq r2, r3, 1f
     250:	10c00326 	beq	r2,r3,260 <_start+0x30>

0:
    stw zero, (r2)
     254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     25c:	10fffd36 	bltu	r2,r3,254 <__alt_data_end+0xffff0254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     260:	0000e380 	call	e38 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     264:	0000ebc0 	call	ebc <alt_main>

00000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     268:	003fff06 	br	268 <__alt_data_end+0xffff0268>

0000026c <test_program>:
#define CLK_PERIOD 20 //in nanoseconds - 50 MHz

int list[LIST_SIZE] = {4, 5, 3, 6, 1, 8, 2, 12, 34, 7, 11, 81, 43, 15, 76, 35, 21, 29, 47, 32, 10, 77, 65, 62, 19, 95, 48, 55, 33, 13, 89, 92, 83, 42, 0};
//--- Return the largest number in an array
int test_program()
{
     26c:	defffd04 	addi	sp,sp,-12
     270:	df000215 	stw	fp,8(sp)
     274:	df000204 	addi	fp,sp,8
	int big, i;
	big = list[0];
     278:	00800034 	movhi	r2,0
     27c:	1089f704 	addi	r2,r2,10204
     280:	10800017 	ldw	r2,0(r2)
     284:	e0bffe15 	stw	r2,-8(fp)
	for (i = 1; i < LIST_SIZE; i++)
     288:	00800044 	movi	r2,1
     28c:	e0bfff15 	stw	r2,-4(fp)
     290:	00001406 	br	2e4 <test_program+0x78>
	{
		if (list[i] > big)
     294:	00800034 	movhi	r2,0
     298:	1089f704 	addi	r2,r2,10204
     29c:	e0ffff17 	ldw	r3,-4(fp)
     2a0:	18c7883a 	add	r3,r3,r3
     2a4:	18c7883a 	add	r3,r3,r3
     2a8:	10c5883a 	add	r2,r2,r3
     2ac:	10800017 	ldw	r2,0(r2)
     2b0:	e0fffe17 	ldw	r3,-8(fp)
     2b4:	1880080e 	bge	r3,r2,2d8 <test_program+0x6c>
			big = list[i];
     2b8:	00800034 	movhi	r2,0
     2bc:	1089f704 	addi	r2,r2,10204
     2c0:	e0ffff17 	ldw	r3,-4(fp)
     2c4:	18c7883a 	add	r3,r3,r3
     2c8:	18c7883a 	add	r3,r3,r3
     2cc:	10c5883a 	add	r2,r2,r3
     2d0:	10800017 	ldw	r2,0(r2)
     2d4:	e0bffe15 	stw	r2,-8(fp)
//--- Return the largest number in an array
int test_program()
{
	int big, i;
	big = list[0];
	for (i = 1; i < LIST_SIZE; i++)
     2d8:	e0bfff17 	ldw	r2,-4(fp)
     2dc:	10800044 	addi	r2,r2,1
     2e0:	e0bfff15 	stw	r2,-4(fp)
     2e4:	e0bfff17 	ldw	r2,-4(fp)
     2e8:	108008d0 	cmplti	r2,r2,35
     2ec:	103fe91e 	bne	r2,zero,294 <__alt_data_end+0xffff0294>
	{
		if (list[i] > big)
			big = list[i];
	}
	return big;
     2f0:	e0bffe17 	ldw	r2,-8(fp)
}
     2f4:	e037883a 	mov	sp,fp
     2f8:	df000017 	ldw	fp,0(sp)
     2fc:	dec00104 	addi	sp,sp,4
     300:	f800283a 	ret

00000304 <main>:

//--- Main
int main()
{
     304:	defff404 	addi	sp,sp,-48
     308:	dfc00b15 	stw	ra,44(sp)
     30c:	df000a15 	stw	fp,40(sp)
     310:	df000a04 	addi	fp,sp,40
	// Parte 2 - Determinar tiempo de ejecucion de una aplicacion
	unsigned int* timer = TIMER_BASE;
     314:	00800074 	movhi	r2,1
     318:	10840804 	addi	r2,r2,4128
     31c:	e0bff915 	stw	r2,-28(fp)
	unsigned int timer_data[2];
	*(timer + 1) = 0x0008; //Stop timer
     320:	e0bff917 	ldw	r2,-28(fp)
     324:	10800104 	addi	r2,r2,4
     328:	00c00204 	movi	r3,8
     32c:	10c00015 	stw	r3,0(r2)
	*(timer + 2) = 0xffff; //Set periodl register to max value
     330:	e0bff917 	ldw	r2,-28(fp)
     334:	10800204 	addi	r2,r2,8
     338:	00ffffd4 	movui	r3,65535
     33c:	10c00015 	stw	r3,0(r2)
	*(timer + 3) = 0xffff; //Set periodh register to max value
     340:	e0bff917 	ldw	r2,-28(fp)
     344:	10800304 	addi	r2,r2,12
     348:	00ffffd4 	movui	r3,65535
     34c:	10c00015 	stw	r3,0(r2)
	*(timer + 1) = 0x0004; //Start timer
     350:	e0bff917 	ldw	r2,-28(fp)
     354:	10800104 	addi	r2,r2,4
     358:	00c00104 	movi	r3,4
     35c:	10c00015 	stw	r3,0(r2)
	test_program(); //Run test program
     360:	000026c0 	call	26c <test_program>
	*(timer + 4) = 0x0000; //Indicate timer to take a snapshot
     364:	e0bff917 	ldw	r2,-28(fp)
     368:	10800404 	addi	r2,r2,16
     36c:	10000015 	stw	zero,0(r2)
	timer_data[0] = *(timer + 4); //Get snapl register value
     370:	e0bff917 	ldw	r2,-28(fp)
     374:	10800417 	ldw	r2,16(r2)
     378:	e0bffd15 	stw	r2,-12(fp)
	timer_data[1] = *(timer + 5); //Get snaph register value
     37c:	e0bff917 	ldw	r2,-28(fp)
     380:	10800517 	ldw	r2,20(r2)
     384:	e0bffe15 	stw	r2,-8(fp)
	timer_data[1] = timer_data[1] << 16;
     388:	e0bffe17 	ldw	r2,-8(fp)
     38c:	1004943a 	slli	r2,r2,16
     390:	e0bffe15 	stw	r2,-8(fp)
	unsigned int timer_data_joined = timer_data[1] | timer_data[0];
     394:	e0fffe17 	ldw	r3,-8(fp)
     398:	e0bffd17 	ldw	r2,-12(fp)
     39c:	1884b03a 	or	r2,r3,r2
     3a0:	e0bffa15 	stw	r2,-24(fp)
	int cycles_elapsed = 0xffffffff - timer_data_joined; //Cycles elapsed during the test program
     3a4:	e0bffa17 	ldw	r2,-24(fp)
     3a8:	0084303a 	nor	r2,zero,r2
     3ac:	e0bffb15 	stw	r2,-20(fp)
	int time_elapsed = cycles_elapsed * CLK_PERIOD; //Time elapsed during the test program
     3b0:	01400504 	movi	r5,20
     3b4:	e13ffb17 	ldw	r4,-20(fp)
     3b8:	000048c0 	call	48c <__mulsi3>
     3bc:	e0bffc15 	stw	r2,-16(fp)
	printf("Time elapsed = %d ns\n", time_elapsed);
     3c0:	e17ffc17 	ldw	r5,-16(fp)
     3c4:	01000034 	movhi	r4,0
     3c8:	2109d204 	addi	r4,r4,10056
     3cc:	00004f00 	call	4f0 <printf>

	// Parte 5 - Utilizar el SPI para escribir y leer datos
	unsigned char write_data[2] = {0xaa, 0x81};
     3d0:	00bfea84 	movi	r2,-86
     3d4:	e0bfff05 	stb	r2,-4(fp)
     3d8:	00bfe044 	movi	r2,-127
     3dc:	e0bfff45 	stb	r2,-3(fp)
	unsigned char read_data[2];
	printf("write_data[0] = %x\n", write_data[0]);
     3e0:	e0bfff03 	ldbu	r2,-4(fp)
     3e4:	10803fcc 	andi	r2,r2,255
     3e8:	100b883a 	mov	r5,r2
     3ec:	01000034 	movhi	r4,0
     3f0:	2109d804 	addi	r4,r4,10080
     3f4:	00004f00 	call	4f0 <printf>
	printf("write_data[1] = %x\n", write_data[1]);
     3f8:	e0bfff43 	ldbu	r2,-3(fp)
     3fc:	10803fcc 	andi	r2,r2,255
     400:	100b883a 	mov	r5,r2
     404:	01000034 	movhi	r4,0
     408:	2109dd04 	addi	r4,r4,10100
     40c:	00004f00 	call	4f0 <printf>
	alt_avalon_spi_command(SPI_BASE, 0, 2, write_data, 2, read_data, ALT_AVALON_SPI_COMMAND_MERGE);
     410:	e0ffff04 	addi	r3,fp,-4
     414:	00800044 	movi	r2,1
     418:	d8800215 	stw	r2,8(sp)
     41c:	e0bfff84 	addi	r2,fp,-2
     420:	d8800115 	stw	r2,4(sp)
     424:	00800084 	movi	r2,2
     428:	d8800015 	stw	r2,0(sp)
     42c:	180f883a 	mov	r7,r3
     430:	01800084 	movi	r6,2
     434:	000b883a 	mov	r5,zero
     438:	01000074 	movhi	r4,1
     43c:	21040004 	addi	r4,r4,4096
     440:	00013780 	call	1378 <alt_avalon_spi_command>
	printf("read_data[0] = %x\n", read_data[0]);
     444:	e0bfff83 	ldbu	r2,-2(fp)
     448:	10803fcc 	andi	r2,r2,255
     44c:	100b883a 	mov	r5,r2
     450:	01000034 	movhi	r4,0
     454:	2109e204 	addi	r4,r4,10120
     458:	00004f00 	call	4f0 <printf>
	printf("read_data[1] = %x\n", read_data[1]);
     45c:	e0bfffc3 	ldbu	r2,-1(fp)
     460:	10803fcc 	andi	r2,r2,255
     464:	100b883a 	mov	r5,r2
     468:	01000034 	movhi	r4,0
     46c:	2109e704 	addi	r4,r4,10140
     470:	00004f00 	call	4f0 <printf>

	return 0;
     474:	0005883a 	mov	r2,zero
}
     478:	e037883a 	mov	sp,fp
     47c:	dfc00117 	ldw	ra,4(sp)
     480:	df000017 	ldw	fp,0(sp)
     484:	dec00204 	addi	sp,sp,8
     488:	f800283a 	ret

0000048c <__mulsi3>:
     48c:	0005883a 	mov	r2,zero
     490:	20000726 	beq	r4,zero,4b0 <__mulsi3+0x24>
     494:	20c0004c 	andi	r3,r4,1
     498:	2008d07a 	srli	r4,r4,1
     49c:	18000126 	beq	r3,zero,4a4 <__mulsi3+0x18>
     4a0:	1145883a 	add	r2,r2,r5
     4a4:	294b883a 	add	r5,r5,r5
     4a8:	203ffa1e 	bne	r4,zero,494 <__alt_data_end+0xffff0494>
     4ac:	f800283a 	ret
     4b0:	f800283a 	ret

000004b4 <_printf_r>:
     4b4:	defffd04 	addi	sp,sp,-12
     4b8:	dfc00015 	stw	ra,0(sp)
     4bc:	d9800115 	stw	r6,4(sp)
     4c0:	d9c00215 	stw	r7,8(sp)
     4c4:	20c00217 	ldw	r3,8(r4)
     4c8:	01800034 	movhi	r6,0
     4cc:	3182bc04 	addi	r6,r6,2800
     4d0:	19800115 	stw	r6,4(r3)
     4d4:	280d883a 	mov	r6,r5
     4d8:	21400217 	ldw	r5,8(r4)
     4dc:	d9c00104 	addi	r7,sp,4
     4e0:	00005a80 	call	5a8 <___vfprintf_internal_r>
     4e4:	dfc00017 	ldw	ra,0(sp)
     4e8:	dec00304 	addi	sp,sp,12
     4ec:	f800283a 	ret

000004f0 <printf>:
     4f0:	defffc04 	addi	sp,sp,-16
     4f4:	dfc00015 	stw	ra,0(sp)
     4f8:	d9400115 	stw	r5,4(sp)
     4fc:	d9800215 	stw	r6,8(sp)
     500:	d9c00315 	stw	r7,12(sp)
     504:	00800034 	movhi	r2,0
     508:	108ac804 	addi	r2,r2,11040
     50c:	10800017 	ldw	r2,0(r2)
     510:	01400034 	movhi	r5,0
     514:	2942bc04 	addi	r5,r5,2800
     518:	10c00217 	ldw	r3,8(r2)
     51c:	d9800104 	addi	r6,sp,4
     520:	19400115 	stw	r5,4(r3)
     524:	200b883a 	mov	r5,r4
     528:	11000217 	ldw	r4,8(r2)
     52c:	0000ad40 	call	ad4 <__vfprintf_internal>
     530:	dfc00017 	ldw	ra,0(sp)
     534:	dec00404 	addi	sp,sp,16
     538:	f800283a 	ret

0000053c <print_repeat>:
     53c:	defffb04 	addi	sp,sp,-20
     540:	dc800315 	stw	r18,12(sp)
     544:	dc400215 	stw	r17,8(sp)
     548:	dc000115 	stw	r16,4(sp)
     54c:	dfc00415 	stw	ra,16(sp)
     550:	2025883a 	mov	r18,r4
     554:	2823883a 	mov	r17,r5
     558:	d9800005 	stb	r6,0(sp)
     55c:	3821883a 	mov	r16,r7
     560:	04000a0e 	bge	zero,r16,58c <print_repeat+0x50>
     564:	88800117 	ldw	r2,4(r17)
     568:	01c00044 	movi	r7,1
     56c:	d80d883a 	mov	r6,sp
     570:	880b883a 	mov	r5,r17
     574:	9009883a 	mov	r4,r18
     578:	103ee83a 	callr	r2
     57c:	843fffc4 	addi	r16,r16,-1
     580:	103ff726 	beq	r2,zero,560 <__alt_data_end+0xffff0560>
     584:	00bfffc4 	movi	r2,-1
     588:	00000106 	br	590 <print_repeat+0x54>
     58c:	0005883a 	mov	r2,zero
     590:	dfc00417 	ldw	ra,16(sp)
     594:	dc800317 	ldw	r18,12(sp)
     598:	dc400217 	ldw	r17,8(sp)
     59c:	dc000117 	ldw	r16,4(sp)
     5a0:	dec00504 	addi	sp,sp,20
     5a4:	f800283a 	ret

000005a8 <___vfprintf_internal_r>:
     5a8:	deffe504 	addi	sp,sp,-108
     5ac:	d8c00804 	addi	r3,sp,32
     5b0:	ddc01815 	stw	r23,96(sp)
     5b4:	dd801715 	stw	r22,92(sp)
     5b8:	dd401615 	stw	r21,88(sp)
     5bc:	dd001515 	stw	r20,84(sp)
     5c0:	dcc01415 	stw	r19,80(sp)
     5c4:	dc801315 	stw	r18,76(sp)
     5c8:	dc401215 	stw	r17,72(sp)
     5cc:	dc001115 	stw	r16,68(sp)
     5d0:	dfc01a15 	stw	ra,104(sp)
     5d4:	df001915 	stw	fp,100(sp)
     5d8:	2029883a 	mov	r20,r4
     5dc:	2823883a 	mov	r17,r5
     5e0:	382d883a 	mov	r22,r7
     5e4:	d9800f15 	stw	r6,60(sp)
     5e8:	0021883a 	mov	r16,zero
     5ec:	d8000e15 	stw	zero,56(sp)
     5f0:	d8000a15 	stw	zero,40(sp)
     5f4:	002b883a 	mov	r21,zero
     5f8:	0027883a 	mov	r19,zero
     5fc:	0025883a 	mov	r18,zero
     600:	d8000c15 	stw	zero,48(sp)
     604:	d8000b15 	stw	zero,44(sp)
     608:	002f883a 	mov	r23,zero
     60c:	d8c00915 	stw	r3,36(sp)
     610:	d8c00f17 	ldw	r3,60(sp)
     614:	19000003 	ldbu	r4,0(r3)
     618:	20803fcc 	andi	r2,r4,255
     61c:	1080201c 	xori	r2,r2,128
     620:	10bfe004 	addi	r2,r2,-128
     624:	10011e26 	beq	r2,zero,aa0 <___vfprintf_internal_r+0x4f8>
     628:	00c00044 	movi	r3,1
     62c:	b8c01426 	beq	r23,r3,680 <___vfprintf_internal_r+0xd8>
     630:	1dc00216 	blt	r3,r23,63c <___vfprintf_internal_r+0x94>
     634:	b8000626 	beq	r23,zero,650 <___vfprintf_internal_r+0xa8>
     638:	00011506 	br	a90 <___vfprintf_internal_r+0x4e8>
     63c:	01400084 	movi	r5,2
     640:	b9401d26 	beq	r23,r5,6b8 <___vfprintf_internal_r+0x110>
     644:	014000c4 	movi	r5,3
     648:	b9402b26 	beq	r23,r5,6f8 <___vfprintf_internal_r+0x150>
     64c:	00011006 	br	a90 <___vfprintf_internal_r+0x4e8>
     650:	01400944 	movi	r5,37
     654:	1140fc26 	beq	r2,r5,a48 <___vfprintf_internal_r+0x4a0>
     658:	88800117 	ldw	r2,4(r17)
     65c:	d9000005 	stb	r4,0(sp)
     660:	01c00044 	movi	r7,1
     664:	d80d883a 	mov	r6,sp
     668:	880b883a 	mov	r5,r17
     66c:	a009883a 	mov	r4,r20
     670:	103ee83a 	callr	r2
     674:	1000d81e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     678:	84000044 	addi	r16,r16,1
     67c:	00010406 	br	a90 <___vfprintf_internal_r+0x4e8>
     680:	01400c04 	movi	r5,48
     684:	1140fa26 	beq	r2,r5,a70 <___vfprintf_internal_r+0x4c8>
     688:	01400944 	movi	r5,37
     68c:	11400a1e 	bne	r2,r5,6b8 <___vfprintf_internal_r+0x110>
     690:	d8800005 	stb	r2,0(sp)
     694:	88800117 	ldw	r2,4(r17)
     698:	b80f883a 	mov	r7,r23
     69c:	d80d883a 	mov	r6,sp
     6a0:	880b883a 	mov	r5,r17
     6a4:	a009883a 	mov	r4,r20
     6a8:	103ee83a 	callr	r2
     6ac:	1000ca1e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     6b0:	84000044 	addi	r16,r16,1
     6b4:	0000f506 	br	a8c <___vfprintf_internal_r+0x4e4>
     6b8:	25fff404 	addi	r23,r4,-48
     6bc:	bdc03fcc 	andi	r23,r23,255
     6c0:	00c00244 	movi	r3,9
     6c4:	1dc00936 	bltu	r3,r23,6ec <___vfprintf_internal_r+0x144>
     6c8:	00bfffc4 	movi	r2,-1
     6cc:	90800426 	beq	r18,r2,6e0 <___vfprintf_internal_r+0x138>
     6d0:	01400284 	movi	r5,10
     6d4:	9009883a 	mov	r4,r18
     6d8:	000048c0 	call	48c <__mulsi3>
     6dc:	00000106 	br	6e4 <___vfprintf_internal_r+0x13c>
     6e0:	0005883a 	mov	r2,zero
     6e4:	b8a5883a 	add	r18,r23,r2
     6e8:	0000e206 	br	a74 <___vfprintf_internal_r+0x4cc>
     6ec:	01400b84 	movi	r5,46
     6f0:	1140e426 	beq	r2,r5,a84 <___vfprintf_internal_r+0x4dc>
     6f4:	05c00084 	movi	r23,2
     6f8:	213ff404 	addi	r4,r4,-48
     6fc:	27003fcc 	andi	fp,r4,255
     700:	00c00244 	movi	r3,9
     704:	1f000936 	bltu	r3,fp,72c <___vfprintf_internal_r+0x184>
     708:	00bfffc4 	movi	r2,-1
     70c:	98800426 	beq	r19,r2,720 <___vfprintf_internal_r+0x178>
     710:	01400284 	movi	r5,10
     714:	9809883a 	mov	r4,r19
     718:	000048c0 	call	48c <__mulsi3>
     71c:	00000106 	br	724 <___vfprintf_internal_r+0x17c>
     720:	0005883a 	mov	r2,zero
     724:	e0a7883a 	add	r19,fp,r2
     728:	0000d906 	br	a90 <___vfprintf_internal_r+0x4e8>
     72c:	00c01b04 	movi	r3,108
     730:	10c0d226 	beq	r2,r3,a7c <___vfprintf_internal_r+0x4d4>
     734:	013fffc4 	movi	r4,-1
     738:	99000226 	beq	r19,r4,744 <___vfprintf_internal_r+0x19c>
     73c:	d8000b15 	stw	zero,44(sp)
     740:	00000106 	br	748 <___vfprintf_internal_r+0x1a0>
     744:	04c00044 	movi	r19,1
     748:	01001a44 	movi	r4,105
     74c:	11001626 	beq	r2,r4,7a8 <___vfprintf_internal_r+0x200>
     750:	20800916 	blt	r4,r2,778 <___vfprintf_internal_r+0x1d0>
     754:	010018c4 	movi	r4,99
     758:	11008826 	beq	r2,r4,97c <___vfprintf_internal_r+0x3d4>
     75c:	01001904 	movi	r4,100
     760:	11001126 	beq	r2,r4,7a8 <___vfprintf_internal_r+0x200>
     764:	01001604 	movi	r4,88
     768:	1100c81e 	bne	r2,r4,a8c <___vfprintf_internal_r+0x4e4>
     76c:	00c00044 	movi	r3,1
     770:	d8c00e15 	stw	r3,56(sp)
     774:	00001506 	br	7cc <___vfprintf_internal_r+0x224>
     778:	01001cc4 	movi	r4,115
     77c:	11009826 	beq	r2,r4,9e0 <___vfprintf_internal_r+0x438>
     780:	20800416 	blt	r4,r2,794 <___vfprintf_internal_r+0x1ec>
     784:	01001bc4 	movi	r4,111
     788:	1100c01e 	bne	r2,r4,a8c <___vfprintf_internal_r+0x4e4>
     78c:	05400204 	movi	r21,8
     790:	00000f06 	br	7d0 <___vfprintf_internal_r+0x228>
     794:	01001d44 	movi	r4,117
     798:	11000d26 	beq	r2,r4,7d0 <___vfprintf_internal_r+0x228>
     79c:	01001e04 	movi	r4,120
     7a0:	11000a26 	beq	r2,r4,7cc <___vfprintf_internal_r+0x224>
     7a4:	0000b906 	br	a8c <___vfprintf_internal_r+0x4e4>
     7a8:	d8c00a17 	ldw	r3,40(sp)
     7ac:	b7000104 	addi	fp,r22,4
     7b0:	18000726 	beq	r3,zero,7d0 <___vfprintf_internal_r+0x228>
     7b4:	df000d15 	stw	fp,52(sp)
     7b8:	b5c00017 	ldw	r23,0(r22)
     7bc:	b800080e 	bge	r23,zero,7e0 <___vfprintf_internal_r+0x238>
     7c0:	05efc83a 	sub	r23,zero,r23
     7c4:	02400044 	movi	r9,1
     7c8:	00000606 	br	7e4 <___vfprintf_internal_r+0x23c>
     7cc:	05400404 	movi	r21,16
     7d0:	b0c00104 	addi	r3,r22,4
     7d4:	d8c00d15 	stw	r3,52(sp)
     7d8:	b5c00017 	ldw	r23,0(r22)
     7dc:	d8000a15 	stw	zero,40(sp)
     7e0:	0013883a 	mov	r9,zero
     7e4:	d839883a 	mov	fp,sp
     7e8:	b8001726 	beq	r23,zero,848 <___vfprintf_internal_r+0x2a0>
     7ec:	a80b883a 	mov	r5,r21
     7f0:	b809883a 	mov	r4,r23
     7f4:	da401015 	stw	r9,64(sp)
     7f8:	0000d140 	call	d14 <__udivsi3>
     7fc:	a80b883a 	mov	r5,r21
     800:	1009883a 	mov	r4,r2
     804:	102d883a 	mov	r22,r2
     808:	000048c0 	call	48c <__mulsi3>
     80c:	b885c83a 	sub	r2,r23,r2
     810:	00c00244 	movi	r3,9
     814:	da401017 	ldw	r9,64(sp)
     818:	18800216 	blt	r3,r2,824 <___vfprintf_internal_r+0x27c>
     81c:	10800c04 	addi	r2,r2,48
     820:	00000506 	br	838 <___vfprintf_internal_r+0x290>
     824:	d8c00e17 	ldw	r3,56(sp)
     828:	18000226 	beq	r3,zero,834 <___vfprintf_internal_r+0x28c>
     82c:	10800dc4 	addi	r2,r2,55
     830:	00000106 	br	838 <___vfprintf_internal_r+0x290>
     834:	108015c4 	addi	r2,r2,87
     838:	e0800005 	stb	r2,0(fp)
     83c:	b02f883a 	mov	r23,r22
     840:	e7000044 	addi	fp,fp,1
     844:	003fe806 	br	7e8 <__alt_data_end+0xffff07e8>
     848:	e6efc83a 	sub	r23,fp,sp
     84c:	9dc5c83a 	sub	r2,r19,r23
     850:	0080090e 	bge	zero,r2,878 <___vfprintf_internal_r+0x2d0>
     854:	e085883a 	add	r2,fp,r2
     858:	01400c04 	movi	r5,48
     85c:	d8c00917 	ldw	r3,36(sp)
     860:	e009883a 	mov	r4,fp
     864:	e0c0032e 	bgeu	fp,r3,874 <___vfprintf_internal_r+0x2cc>
     868:	e7000044 	addi	fp,fp,1
     86c:	21400005 	stb	r5,0(r4)
     870:	e0bffa1e 	bne	fp,r2,85c <__alt_data_end+0xffff085c>
     874:	e6efc83a 	sub	r23,fp,sp
     878:	d8c00b17 	ldw	r3,44(sp)
     87c:	4dd1883a 	add	r8,r9,r23
     880:	922dc83a 	sub	r22,r18,r8
     884:	18001626 	beq	r3,zero,8e0 <___vfprintf_internal_r+0x338>
     888:	48000a26 	beq	r9,zero,8b4 <___vfprintf_internal_r+0x30c>
     88c:	00800b44 	movi	r2,45
     890:	d8800805 	stb	r2,32(sp)
     894:	88800117 	ldw	r2,4(r17)
     898:	01c00044 	movi	r7,1
     89c:	d9800804 	addi	r6,sp,32
     8a0:	880b883a 	mov	r5,r17
     8a4:	a009883a 	mov	r4,r20
     8a8:	103ee83a 	callr	r2
     8ac:	10004a1e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     8b0:	84000044 	addi	r16,r16,1
     8b4:	0580070e 	bge	zero,r22,8d4 <___vfprintf_internal_r+0x32c>
     8b8:	b00f883a 	mov	r7,r22
     8bc:	01800c04 	movi	r6,48
     8c0:	880b883a 	mov	r5,r17
     8c4:	a009883a 	mov	r4,r20
     8c8:	000053c0 	call	53c <print_repeat>
     8cc:	1000421e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     8d0:	85a1883a 	add	r16,r16,r22
     8d4:	e02d883a 	mov	r22,fp
     8d8:	bf2fc83a 	sub	r23,r23,fp
     8dc:	00002006 	br	960 <___vfprintf_internal_r+0x3b8>
     8e0:	0580090e 	bge	zero,r22,908 <___vfprintf_internal_r+0x360>
     8e4:	b00f883a 	mov	r7,r22
     8e8:	01800804 	movi	r6,32
     8ec:	880b883a 	mov	r5,r17
     8f0:	a009883a 	mov	r4,r20
     8f4:	da401015 	stw	r9,64(sp)
     8f8:	000053c0 	call	53c <print_repeat>
     8fc:	da401017 	ldw	r9,64(sp)
     900:	1000351e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     904:	85a1883a 	add	r16,r16,r22
     908:	483ff226 	beq	r9,zero,8d4 <__alt_data_end+0xffff08d4>
     90c:	00800b44 	movi	r2,45
     910:	d8800805 	stb	r2,32(sp)
     914:	88800117 	ldw	r2,4(r17)
     918:	01c00044 	movi	r7,1
     91c:	d9800804 	addi	r6,sp,32
     920:	880b883a 	mov	r5,r17
     924:	a009883a 	mov	r4,r20
     928:	103ee83a 	callr	r2
     92c:	10002a1e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     930:	84000044 	addi	r16,r16,1
     934:	003fe706 	br	8d4 <__alt_data_end+0xffff08d4>
     938:	b5bfffc4 	addi	r22,r22,-1
     93c:	b0800003 	ldbu	r2,0(r22)
     940:	01c00044 	movi	r7,1
     944:	d9800804 	addi	r6,sp,32
     948:	d8800805 	stb	r2,32(sp)
     94c:	88800117 	ldw	r2,4(r17)
     950:	880b883a 	mov	r5,r17
     954:	a009883a 	mov	r4,r20
     958:	103ee83a 	callr	r2
     95c:	10001e1e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     960:	8585c83a 	sub	r2,r16,r22
     964:	b5c9883a 	add	r4,r22,r23
     968:	e085883a 	add	r2,fp,r2
     96c:	013ff216 	blt	zero,r4,938 <__alt_data_end+0xffff0938>
     970:	1021883a 	mov	r16,r2
     974:	dd800d17 	ldw	r22,52(sp)
     978:	00004406 	br	a8c <___vfprintf_internal_r+0x4e4>
     97c:	00800044 	movi	r2,1
     980:	1480080e 	bge	r2,r18,9a4 <___vfprintf_internal_r+0x3fc>
     984:	95ffffc4 	addi	r23,r18,-1
     988:	b80f883a 	mov	r7,r23
     98c:	01800804 	movi	r6,32
     990:	880b883a 	mov	r5,r17
     994:	a009883a 	mov	r4,r20
     998:	000053c0 	call	53c <print_repeat>
     99c:	10000e1e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     9a0:	85e1883a 	add	r16,r16,r23
     9a4:	b0800017 	ldw	r2,0(r22)
     9a8:	01c00044 	movi	r7,1
     9ac:	d80d883a 	mov	r6,sp
     9b0:	d8800005 	stb	r2,0(sp)
     9b4:	88800117 	ldw	r2,4(r17)
     9b8:	880b883a 	mov	r5,r17
     9bc:	a009883a 	mov	r4,r20
     9c0:	b5c00104 	addi	r23,r22,4
     9c4:	103ee83a 	callr	r2
     9c8:	1000031e 	bne	r2,zero,9d8 <___vfprintf_internal_r+0x430>
     9cc:	84000044 	addi	r16,r16,1
     9d0:	b82d883a 	mov	r22,r23
     9d4:	00002d06 	br	a8c <___vfprintf_internal_r+0x4e4>
     9d8:	00bfffc4 	movi	r2,-1
     9dc:	00003106 	br	aa4 <___vfprintf_internal_r+0x4fc>
     9e0:	b5c00017 	ldw	r23,0(r22)
     9e4:	b7000104 	addi	fp,r22,4
     9e8:	b809883a 	mov	r4,r23
     9ec:	0000ba80 	call	ba8 <strlen>
     9f0:	9091c83a 	sub	r8,r18,r2
     9f4:	102d883a 	mov	r22,r2
     9f8:	0200090e 	bge	zero,r8,a20 <___vfprintf_internal_r+0x478>
     9fc:	400f883a 	mov	r7,r8
     a00:	01800804 	movi	r6,32
     a04:	880b883a 	mov	r5,r17
     a08:	a009883a 	mov	r4,r20
     a0c:	da001015 	stw	r8,64(sp)
     a10:	000053c0 	call	53c <print_repeat>
     a14:	da001017 	ldw	r8,64(sp)
     a18:	103fef1e 	bne	r2,zero,9d8 <__alt_data_end+0xffff09d8>
     a1c:	8221883a 	add	r16,r16,r8
     a20:	88800117 	ldw	r2,4(r17)
     a24:	b00f883a 	mov	r7,r22
     a28:	b80d883a 	mov	r6,r23
     a2c:	880b883a 	mov	r5,r17
     a30:	a009883a 	mov	r4,r20
     a34:	103ee83a 	callr	r2
     a38:	103fe71e 	bne	r2,zero,9d8 <__alt_data_end+0xffff09d8>
     a3c:	85a1883a 	add	r16,r16,r22
     a40:	e02d883a 	mov	r22,fp
     a44:	00001106 	br	a8c <___vfprintf_internal_r+0x4e4>
     a48:	00c00044 	movi	r3,1
     a4c:	04ffffc4 	movi	r19,-1
     a50:	d8000e15 	stw	zero,56(sp)
     a54:	d8c00a15 	stw	r3,40(sp)
     a58:	05400284 	movi	r21,10
     a5c:	9825883a 	mov	r18,r19
     a60:	d8000c15 	stw	zero,48(sp)
     a64:	d8000b15 	stw	zero,44(sp)
     a68:	182f883a 	mov	r23,r3
     a6c:	00000806 	br	a90 <___vfprintf_internal_r+0x4e8>
     a70:	ddc00b15 	stw	r23,44(sp)
     a74:	05c00084 	movi	r23,2
     a78:	00000506 	br	a90 <___vfprintf_internal_r+0x4e8>
     a7c:	00c00044 	movi	r3,1
     a80:	d8c00c15 	stw	r3,48(sp)
     a84:	05c000c4 	movi	r23,3
     a88:	00000106 	br	a90 <___vfprintf_internal_r+0x4e8>
     a8c:	002f883a 	mov	r23,zero
     a90:	d8c00f17 	ldw	r3,60(sp)
     a94:	18c00044 	addi	r3,r3,1
     a98:	d8c00f15 	stw	r3,60(sp)
     a9c:	003edc06 	br	610 <__alt_data_end+0xffff0610>
     aa0:	8005883a 	mov	r2,r16
     aa4:	dfc01a17 	ldw	ra,104(sp)
     aa8:	df001917 	ldw	fp,100(sp)
     aac:	ddc01817 	ldw	r23,96(sp)
     ab0:	dd801717 	ldw	r22,92(sp)
     ab4:	dd401617 	ldw	r21,88(sp)
     ab8:	dd001517 	ldw	r20,84(sp)
     abc:	dcc01417 	ldw	r19,80(sp)
     ac0:	dc801317 	ldw	r18,76(sp)
     ac4:	dc401217 	ldw	r17,72(sp)
     ac8:	dc001117 	ldw	r16,68(sp)
     acc:	dec01b04 	addi	sp,sp,108
     ad0:	f800283a 	ret

00000ad4 <__vfprintf_internal>:
     ad4:	00800034 	movhi	r2,0
     ad8:	108ac804 	addi	r2,r2,11040
     adc:	300f883a 	mov	r7,r6
     ae0:	280d883a 	mov	r6,r5
     ae4:	200b883a 	mov	r5,r4
     ae8:	11000017 	ldw	r4,0(r2)
     aec:	00005a81 	jmpi	5a8 <___vfprintf_internal_r>

00000af0 <__sfvwrite_small_dev>:
     af0:	2880000b 	ldhu	r2,0(r5)
     af4:	1080020c 	andi	r2,r2,8
     af8:	10002126 	beq	r2,zero,b80 <__sfvwrite_small_dev+0x90>
     afc:	2880008f 	ldh	r2,2(r5)
     b00:	defffa04 	addi	sp,sp,-24
     b04:	dc000015 	stw	r16,0(sp)
     b08:	dfc00515 	stw	ra,20(sp)
     b0c:	dd000415 	stw	r20,16(sp)
     b10:	dcc00315 	stw	r19,12(sp)
     b14:	dc800215 	stw	r18,8(sp)
     b18:	dc400115 	stw	r17,4(sp)
     b1c:	2821883a 	mov	r16,r5
     b20:	10001216 	blt	r2,zero,b6c <__sfvwrite_small_dev+0x7c>
     b24:	2027883a 	mov	r19,r4
     b28:	3025883a 	mov	r18,r6
     b2c:	3823883a 	mov	r17,r7
     b30:	05010004 	movi	r20,1024
     b34:	04400b0e 	bge	zero,r17,b64 <__sfvwrite_small_dev+0x74>
     b38:	880f883a 	mov	r7,r17
     b3c:	a440010e 	bge	r20,r17,b44 <__sfvwrite_small_dev+0x54>
     b40:	01c10004 	movi	r7,1024
     b44:	8140008f 	ldh	r5,2(r16)
     b48:	900d883a 	mov	r6,r18
     b4c:	9809883a 	mov	r4,r19
     b50:	0000bc40 	call	bc4 <_write_r>
     b54:	0080050e 	bge	zero,r2,b6c <__sfvwrite_small_dev+0x7c>
     b58:	88a3c83a 	sub	r17,r17,r2
     b5c:	90a5883a 	add	r18,r18,r2
     b60:	003ff406 	br	b34 <__alt_data_end+0xffff0b34>
     b64:	0005883a 	mov	r2,zero
     b68:	00000706 	br	b88 <__sfvwrite_small_dev+0x98>
     b6c:	8080000b 	ldhu	r2,0(r16)
     b70:	10801014 	ori	r2,r2,64
     b74:	8080000d 	sth	r2,0(r16)
     b78:	00bfffc4 	movi	r2,-1
     b7c:	00000206 	br	b88 <__sfvwrite_small_dev+0x98>
     b80:	00bfffc4 	movi	r2,-1
     b84:	f800283a 	ret
     b88:	dfc00517 	ldw	ra,20(sp)
     b8c:	dd000417 	ldw	r20,16(sp)
     b90:	dcc00317 	ldw	r19,12(sp)
     b94:	dc800217 	ldw	r18,8(sp)
     b98:	dc400117 	ldw	r17,4(sp)
     b9c:	dc000017 	ldw	r16,0(sp)
     ba0:	dec00604 	addi	sp,sp,24
     ba4:	f800283a 	ret

00000ba8 <strlen>:
     ba8:	2005883a 	mov	r2,r4
     bac:	10c00007 	ldb	r3,0(r2)
     bb0:	18000226 	beq	r3,zero,bbc <strlen+0x14>
     bb4:	10800044 	addi	r2,r2,1
     bb8:	003ffc06 	br	bac <__alt_data_end+0xffff0bac>
     bbc:	1105c83a 	sub	r2,r2,r4
     bc0:	f800283a 	ret

00000bc4 <_write_r>:
     bc4:	defffd04 	addi	sp,sp,-12
     bc8:	dc000015 	stw	r16,0(sp)
     bcc:	04000034 	movhi	r16,0
     bd0:	dc400115 	stw	r17,4(sp)
     bd4:	840bad04 	addi	r16,r16,11956
     bd8:	2023883a 	mov	r17,r4
     bdc:	2809883a 	mov	r4,r5
     be0:	300b883a 	mov	r5,r6
     be4:	380d883a 	mov	r6,r7
     be8:	dfc00215 	stw	ra,8(sp)
     bec:	80000015 	stw	zero,0(r16)
     bf0:	0000f780 	call	f78 <write>
     bf4:	00ffffc4 	movi	r3,-1
     bf8:	10c0031e 	bne	r2,r3,c08 <_write_r+0x44>
     bfc:	80c00017 	ldw	r3,0(r16)
     c00:	18000126 	beq	r3,zero,c08 <_write_r+0x44>
     c04:	88c00015 	stw	r3,0(r17)
     c08:	dfc00217 	ldw	ra,8(sp)
     c0c:	dc400117 	ldw	r17,4(sp)
     c10:	dc000017 	ldw	r16,0(sp)
     c14:	dec00304 	addi	sp,sp,12
     c18:	f800283a 	ret

00000c1c <__divsi3>:
     c1c:	20001b16 	blt	r4,zero,c8c <__divsi3+0x70>
     c20:	000f883a 	mov	r7,zero
     c24:	28001616 	blt	r5,zero,c80 <__divsi3+0x64>
     c28:	200d883a 	mov	r6,r4
     c2c:	29001a2e 	bgeu	r5,r4,c98 <__divsi3+0x7c>
     c30:	00800804 	movi	r2,32
     c34:	00c00044 	movi	r3,1
     c38:	00000106 	br	c40 <__divsi3+0x24>
     c3c:	10000d26 	beq	r2,zero,c74 <__divsi3+0x58>
     c40:	294b883a 	add	r5,r5,r5
     c44:	10bfffc4 	addi	r2,r2,-1
     c48:	18c7883a 	add	r3,r3,r3
     c4c:	293ffb36 	bltu	r5,r4,c3c <__alt_data_end+0xffff0c3c>
     c50:	0005883a 	mov	r2,zero
     c54:	18000726 	beq	r3,zero,c74 <__divsi3+0x58>
     c58:	0005883a 	mov	r2,zero
     c5c:	31400236 	bltu	r6,r5,c68 <__divsi3+0x4c>
     c60:	314dc83a 	sub	r6,r6,r5
     c64:	10c4b03a 	or	r2,r2,r3
     c68:	1806d07a 	srli	r3,r3,1
     c6c:	280ad07a 	srli	r5,r5,1
     c70:	183ffa1e 	bne	r3,zero,c5c <__alt_data_end+0xffff0c5c>
     c74:	38000126 	beq	r7,zero,c7c <__divsi3+0x60>
     c78:	0085c83a 	sub	r2,zero,r2
     c7c:	f800283a 	ret
     c80:	014bc83a 	sub	r5,zero,r5
     c84:	39c0005c 	xori	r7,r7,1
     c88:	003fe706 	br	c28 <__alt_data_end+0xffff0c28>
     c8c:	0109c83a 	sub	r4,zero,r4
     c90:	01c00044 	movi	r7,1
     c94:	003fe306 	br	c24 <__alt_data_end+0xffff0c24>
     c98:	00c00044 	movi	r3,1
     c9c:	003fee06 	br	c58 <__alt_data_end+0xffff0c58>

00000ca0 <__modsi3>:
     ca0:	20001716 	blt	r4,zero,d00 <__modsi3+0x60>
     ca4:	000f883a 	mov	r7,zero
     ca8:	2005883a 	mov	r2,r4
     cac:	28001216 	blt	r5,zero,cf8 <__modsi3+0x58>
     cb0:	2900162e 	bgeu	r5,r4,d0c <__modsi3+0x6c>
     cb4:	01800804 	movi	r6,32
     cb8:	00c00044 	movi	r3,1
     cbc:	00000106 	br	cc4 <__modsi3+0x24>
     cc0:	30000a26 	beq	r6,zero,cec <__modsi3+0x4c>
     cc4:	294b883a 	add	r5,r5,r5
     cc8:	31bfffc4 	addi	r6,r6,-1
     ccc:	18c7883a 	add	r3,r3,r3
     cd0:	293ffb36 	bltu	r5,r4,cc0 <__alt_data_end+0xffff0cc0>
     cd4:	18000526 	beq	r3,zero,cec <__modsi3+0x4c>
     cd8:	1806d07a 	srli	r3,r3,1
     cdc:	11400136 	bltu	r2,r5,ce4 <__modsi3+0x44>
     ce0:	1145c83a 	sub	r2,r2,r5
     ce4:	280ad07a 	srli	r5,r5,1
     ce8:	183ffb1e 	bne	r3,zero,cd8 <__alt_data_end+0xffff0cd8>
     cec:	38000126 	beq	r7,zero,cf4 <__modsi3+0x54>
     cf0:	0085c83a 	sub	r2,zero,r2
     cf4:	f800283a 	ret
     cf8:	014bc83a 	sub	r5,zero,r5
     cfc:	003fec06 	br	cb0 <__alt_data_end+0xffff0cb0>
     d00:	0109c83a 	sub	r4,zero,r4
     d04:	01c00044 	movi	r7,1
     d08:	003fe706 	br	ca8 <__alt_data_end+0xffff0ca8>
     d0c:	00c00044 	movi	r3,1
     d10:	003ff106 	br	cd8 <__alt_data_end+0xffff0cd8>

00000d14 <__udivsi3>:
     d14:	200d883a 	mov	r6,r4
     d18:	2900152e 	bgeu	r5,r4,d70 <__udivsi3+0x5c>
     d1c:	28001416 	blt	r5,zero,d70 <__udivsi3+0x5c>
     d20:	00800804 	movi	r2,32
     d24:	00c00044 	movi	r3,1
     d28:	00000206 	br	d34 <__udivsi3+0x20>
     d2c:	10000e26 	beq	r2,zero,d68 <__udivsi3+0x54>
     d30:	28000516 	blt	r5,zero,d48 <__udivsi3+0x34>
     d34:	294b883a 	add	r5,r5,r5
     d38:	10bfffc4 	addi	r2,r2,-1
     d3c:	18c7883a 	add	r3,r3,r3
     d40:	293ffa36 	bltu	r5,r4,d2c <__alt_data_end+0xffff0d2c>
     d44:	18000826 	beq	r3,zero,d68 <__udivsi3+0x54>
     d48:	0005883a 	mov	r2,zero
     d4c:	31400236 	bltu	r6,r5,d58 <__udivsi3+0x44>
     d50:	314dc83a 	sub	r6,r6,r5
     d54:	10c4b03a 	or	r2,r2,r3
     d58:	1806d07a 	srli	r3,r3,1
     d5c:	280ad07a 	srli	r5,r5,1
     d60:	183ffa1e 	bne	r3,zero,d4c <__alt_data_end+0xffff0d4c>
     d64:	f800283a 	ret
     d68:	0005883a 	mov	r2,zero
     d6c:	f800283a 	ret
     d70:	00c00044 	movi	r3,1
     d74:	003ff406 	br	d48 <__alt_data_end+0xffff0d48>

00000d78 <__umodsi3>:
     d78:	2005883a 	mov	r2,r4
     d7c:	2900122e 	bgeu	r5,r4,dc8 <__umodsi3+0x50>
     d80:	28001116 	blt	r5,zero,dc8 <__umodsi3+0x50>
     d84:	01800804 	movi	r6,32
     d88:	00c00044 	movi	r3,1
     d8c:	00000206 	br	d98 <__umodsi3+0x20>
     d90:	30000c26 	beq	r6,zero,dc4 <__umodsi3+0x4c>
     d94:	28000516 	blt	r5,zero,dac <__umodsi3+0x34>
     d98:	294b883a 	add	r5,r5,r5
     d9c:	31bfffc4 	addi	r6,r6,-1
     da0:	18c7883a 	add	r3,r3,r3
     da4:	293ffa36 	bltu	r5,r4,d90 <__alt_data_end+0xffff0d90>
     da8:	18000626 	beq	r3,zero,dc4 <__umodsi3+0x4c>
     dac:	1806d07a 	srli	r3,r3,1
     db0:	11400136 	bltu	r2,r5,db8 <__umodsi3+0x40>
     db4:	1145c83a 	sub	r2,r2,r5
     db8:	280ad07a 	srli	r5,r5,1
     dbc:	183ffb1e 	bne	r3,zero,dac <__alt_data_end+0xffff0dac>
     dc0:	f800283a 	ret
     dc4:	f800283a 	ret
     dc8:	00c00044 	movi	r3,1
     dcc:	003ff706 	br	dac <__alt_data_end+0xffff0dac>

00000dd0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     dd0:	defffc04 	addi	sp,sp,-16
     dd4:	df000315 	stw	fp,12(sp)
     dd8:	df000304 	addi	fp,sp,12
     ddc:	e13ffd15 	stw	r4,-12(fp)
     de0:	e17ffe15 	stw	r5,-8(fp)
     de4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     de8:	e0fffe17 	ldw	r3,-8(fp)
     dec:	e0bffd17 	ldw	r2,-12(fp)
     df0:	18800c26 	beq	r3,r2,e24 <alt_load_section+0x54>
  {
    while( to != end )
     df4:	00000806 	br	e18 <alt_load_section+0x48>
    {
      *to++ = *from++;
     df8:	e0bffe17 	ldw	r2,-8(fp)
     dfc:	10c00104 	addi	r3,r2,4
     e00:	e0fffe15 	stw	r3,-8(fp)
     e04:	e0fffd17 	ldw	r3,-12(fp)
     e08:	19000104 	addi	r4,r3,4
     e0c:	e13ffd15 	stw	r4,-12(fp)
     e10:	18c00017 	ldw	r3,0(r3)
     e14:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     e18:	e0fffe17 	ldw	r3,-8(fp)
     e1c:	e0bfff17 	ldw	r2,-4(fp)
     e20:	18bff51e 	bne	r3,r2,df8 <__alt_data_end+0xffff0df8>
    {
      *to++ = *from++;
    }
  }
}
     e24:	0001883a 	nop
     e28:	e037883a 	mov	sp,fp
     e2c:	df000017 	ldw	fp,0(sp)
     e30:	dec00104 	addi	sp,sp,4
     e34:	f800283a 	ret

00000e38 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     e38:	defffe04 	addi	sp,sp,-8
     e3c:	dfc00115 	stw	ra,4(sp)
     e40:	df000015 	stw	fp,0(sp)
     e44:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     e48:	01800034 	movhi	r6,0
     e4c:	318ad204 	addi	r6,r6,11080
     e50:	01400034 	movhi	r5,0
     e54:	2949f704 	addi	r5,r5,10204
     e58:	01000034 	movhi	r4,0
     e5c:	210ad204 	addi	r4,r4,11080
     e60:	0000dd00 	call	dd0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     e64:	01800034 	movhi	r6,0
     e68:	31808c04 	addi	r6,r6,560
     e6c:	01400034 	movhi	r5,0
     e70:	29400804 	addi	r5,r5,32
     e74:	01000034 	movhi	r4,0
     e78:	21000804 	addi	r4,r4,32
     e7c:	0000dd00 	call	dd0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     e80:	01800034 	movhi	r6,0
     e84:	3189f704 	addi	r6,r6,10204
     e88:	01400034 	movhi	r5,0
     e8c:	2949d204 	addi	r5,r5,10056
     e90:	01000034 	movhi	r4,0
     e94:	2109d204 	addi	r4,r4,10056
     e98:	0000dd00 	call	dd0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     e9c:	00017a00 	call	17a0 <alt_dcache_flush_all>
  alt_icache_flush_all();
     ea0:	00018e00 	call	18e0 <alt_icache_flush_all>
}
     ea4:	0001883a 	nop
     ea8:	e037883a 	mov	sp,fp
     eac:	dfc00117 	ldw	ra,4(sp)
     eb0:	df000017 	ldw	fp,0(sp)
     eb4:	dec00204 	addi	sp,sp,8
     eb8:	f800283a 	ret

00000ebc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     ebc:	defffd04 	addi	sp,sp,-12
     ec0:	dfc00215 	stw	ra,8(sp)
     ec4:	df000115 	stw	fp,4(sp)
     ec8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     ecc:	0009883a 	mov	r4,zero
     ed0:	00010b00 	call	10b0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     ed4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     ed8:	00010e80 	call	10e8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     edc:	01800034 	movhi	r6,0
     ee0:	3189ec04 	addi	r6,r6,10160
     ee4:	01400034 	movhi	r5,0
     ee8:	2949ec04 	addi	r5,r5,10160
     eec:	01000034 	movhi	r4,0
     ef0:	2109ec04 	addi	r4,r4,10160
     ef4:	0001cb40 	call	1cb4 <alt_io_redirect>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     ef8:	d0a0e717 	ldw	r2,-31844(gp)
     efc:	d0e0e817 	ldw	r3,-31840(gp)
     f00:	d120e917 	ldw	r4,-31836(gp)
     f04:	200d883a 	mov	r6,r4
     f08:	180b883a 	mov	r5,r3
     f0c:	1009883a 	mov	r4,r2
     f10:	00003040 	call	304 <main>
     f14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     f18:	01000044 	movi	r4,1
     f1c:	00016c80 	call	16c8 <close>
  exit (result);
     f20:	e13fff17 	ldw	r4,-4(fp)
     f24:	00025340 	call	2534 <exit>

00000f28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
     f28:	defffe04 	addi	sp,sp,-8
     f2c:	dfc00115 	stw	ra,4(sp)
     f30:	df000015 	stw	fp,0(sp)
     f34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
     f38:	00800034 	movhi	r2,0
     f3c:	108ace04 	addi	r2,r2,11064
     f40:	10800017 	ldw	r2,0(r2)
     f44:	10000526 	beq	r2,zero,f5c <alt_get_errno+0x34>
     f48:	00800034 	movhi	r2,0
     f4c:	108ace04 	addi	r2,r2,11064
     f50:	10800017 	ldw	r2,0(r2)
     f54:	103ee83a 	callr	r2
     f58:	00000206 	br	f64 <alt_get_errno+0x3c>
     f5c:	00800034 	movhi	r2,0
     f60:	108bad04 	addi	r2,r2,11956
}
     f64:	e037883a 	mov	sp,fp
     f68:	dfc00117 	ldw	ra,4(sp)
     f6c:	df000017 	ldw	fp,0(sp)
     f70:	dec00204 	addi	sp,sp,8
     f74:	f800283a 	ret

00000f78 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
     f78:	defff904 	addi	sp,sp,-28
     f7c:	dfc00615 	stw	ra,24(sp)
     f80:	df000515 	stw	fp,20(sp)
     f84:	df000504 	addi	fp,sp,20
     f88:	e13ffd15 	stw	r4,-12(fp)
     f8c:	e17ffe15 	stw	r5,-8(fp)
     f90:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
     f94:	e0bffd17 	ldw	r2,-12(fp)
     f98:	10000816 	blt	r2,zero,fbc <write+0x44>
     f9c:	01400304 	movi	r5,12
     fa0:	e13ffd17 	ldw	r4,-12(fp)
     fa4:	000048c0 	call	48c <__mulsi3>
     fa8:	1007883a 	mov	r3,r2
     fac:	00800034 	movhi	r2,0
     fb0:	108a6704 	addi	r2,r2,10652
     fb4:	1885883a 	add	r2,r3,r2
     fb8:	00000106 	br	fc0 <write+0x48>
     fbc:	0005883a 	mov	r2,zero
     fc0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
     fc4:	e0bffb17 	ldw	r2,-20(fp)
     fc8:	10002126 	beq	r2,zero,1050 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
     fcc:	e0bffb17 	ldw	r2,-20(fp)
     fd0:	10800217 	ldw	r2,8(r2)
     fd4:	108000cc 	andi	r2,r2,3
     fd8:	10001826 	beq	r2,zero,103c <write+0xc4>
     fdc:	e0bffb17 	ldw	r2,-20(fp)
     fe0:	10800017 	ldw	r2,0(r2)
     fe4:	10800617 	ldw	r2,24(r2)
     fe8:	10001426 	beq	r2,zero,103c <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
     fec:	e0bffb17 	ldw	r2,-20(fp)
     ff0:	10800017 	ldw	r2,0(r2)
     ff4:	10800617 	ldw	r2,24(r2)
     ff8:	e0ffff17 	ldw	r3,-4(fp)
     ffc:	180d883a 	mov	r6,r3
    1000:	e17ffe17 	ldw	r5,-8(fp)
    1004:	e13ffb17 	ldw	r4,-20(fp)
    1008:	103ee83a 	callr	r2
    100c:	e0bffc15 	stw	r2,-16(fp)
    1010:	e0bffc17 	ldw	r2,-16(fp)
    1014:	1000070e 	bge	r2,zero,1034 <write+0xbc>
      {
        ALT_ERRNO = -rval;
    1018:	0000f280 	call	f28 <alt_get_errno>
    101c:	1007883a 	mov	r3,r2
    1020:	e0bffc17 	ldw	r2,-16(fp)
    1024:	0085c83a 	sub	r2,zero,r2
    1028:	18800015 	stw	r2,0(r3)
        return -1;
    102c:	00bfffc4 	movi	r2,-1
    1030:	00000c06 	br	1064 <write+0xec>
      }
      return rval;
    1034:	e0bffc17 	ldw	r2,-16(fp)
    1038:	00000a06 	br	1064 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
    103c:	0000f280 	call	f28 <alt_get_errno>
    1040:	1007883a 	mov	r3,r2
    1044:	00800344 	movi	r2,13
    1048:	18800015 	stw	r2,0(r3)
    104c:	00000406 	br	1060 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    1050:	0000f280 	call	f28 <alt_get_errno>
    1054:	1007883a 	mov	r3,r2
    1058:	00801444 	movi	r2,81
    105c:	18800015 	stw	r2,0(r3)
  }
  return -1;
    1060:	00bfffc4 	movi	r2,-1
}
    1064:	e037883a 	mov	sp,fp
    1068:	dfc00117 	ldw	ra,4(sp)
    106c:	df000017 	ldw	fp,0(sp)
    1070:	dec00204 	addi	sp,sp,8
    1074:	f800283a 	ret

00001078 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    1078:	defffd04 	addi	sp,sp,-12
    107c:	dfc00215 	stw	ra,8(sp)
    1080:	df000115 	stw	fp,4(sp)
    1084:	df000104 	addi	fp,sp,4
    1088:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    108c:	01400034 	movhi	r5,0
    1090:	294acb04 	addi	r5,r5,11052
    1094:	e13fff17 	ldw	r4,-4(fp)
    1098:	000183c0 	call	183c <alt_dev_llist_insert>
}
    109c:	e037883a 	mov	sp,fp
    10a0:	dfc00117 	ldw	ra,4(sp)
    10a4:	df000017 	ldw	fp,0(sp)
    10a8:	dec00204 	addi	sp,sp,8
    10ac:	f800283a 	ret

000010b0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    10b0:	defffd04 	addi	sp,sp,-12
    10b4:	dfc00215 	stw	ra,8(sp)
    10b8:	df000115 	stw	fp,4(sp)
    10bc:	df000104 	addi	fp,sp,4
    10c0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS_II_PROCESSOR, nios_ii_processor);
    10c4:	00021fc0 	call	21fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    10c8:	00800044 	movi	r2,1
    10cc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    10d0:	0001883a 	nop
    10d4:	e037883a 	mov	sp,fp
    10d8:	dfc00117 	ldw	ra,4(sp)
    10dc:	df000017 	ldw	fp,0(sp)
    10e0:	dec00204 	addi	sp,sp,8
    10e4:	f800283a 	ret

000010e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    10e8:	defffe04 	addi	sp,sp,-8
    10ec:	dfc00115 	stw	ra,4(sp)
    10f0:	df000015 	stw	fp,0(sp)
    10f4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
    10f8:	01c0fa04 	movi	r7,1000
    10fc:	000d883a 	mov	r6,zero
    1100:	000b883a 	mov	r5,zero
    1104:	01000074 	movhi	r4,1
    1108:	21040804 	addi	r4,r4,4128
    110c:	00015ec0 	call	15ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
    1110:	01000034 	movhi	r4,0
    1114:	210a5204 	addi	r4,r4,10568
    1118:	00010780 	call	1078 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
    111c:	0001883a 	nop
}
    1120:	0001883a 	nop
    1124:	e037883a 	mov	sp,fp
    1128:	dfc00117 	ldw	ra,4(sp)
    112c:	df000017 	ldw	fp,0(sp)
    1130:	dec00204 	addi	sp,sp,8
    1134:	f800283a 	ret

00001138 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    1138:	defffa04 	addi	sp,sp,-24
    113c:	dfc00515 	stw	ra,20(sp)
    1140:	df000415 	stw	fp,16(sp)
    1144:	df000404 	addi	fp,sp,16
    1148:	e13ffd15 	stw	r4,-12(fp)
    114c:	e17ffe15 	stw	r5,-8(fp)
    1150:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    1154:	e0bffd17 	ldw	r2,-12(fp)
    1158:	10800017 	ldw	r2,0(r2)
    115c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    1160:	e0bffc17 	ldw	r2,-16(fp)
    1164:	10c00a04 	addi	r3,r2,40
    1168:	e0bffd17 	ldw	r2,-12(fp)
    116c:	10800217 	ldw	r2,8(r2)
    1170:	100f883a 	mov	r7,r2
    1174:	e1bfff17 	ldw	r6,-4(fp)
    1178:	e17ffe17 	ldw	r5,-8(fp)
    117c:	1809883a 	mov	r4,r3
    1180:	00011f80 	call	11f8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    1184:	e037883a 	mov	sp,fp
    1188:	dfc00117 	ldw	ra,4(sp)
    118c:	df000017 	ldw	fp,0(sp)
    1190:	dec00204 	addi	sp,sp,8
    1194:	f800283a 	ret

00001198 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    1198:	defffa04 	addi	sp,sp,-24
    119c:	dfc00515 	stw	ra,20(sp)
    11a0:	df000415 	stw	fp,16(sp)
    11a4:	df000404 	addi	fp,sp,16
    11a8:	e13ffd15 	stw	r4,-12(fp)
    11ac:	e17ffe15 	stw	r5,-8(fp)
    11b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    11b4:	e0bffd17 	ldw	r2,-12(fp)
    11b8:	10800017 	ldw	r2,0(r2)
    11bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    11c0:	e0bffc17 	ldw	r2,-16(fp)
    11c4:	10c00a04 	addi	r3,r2,40
    11c8:	e0bffd17 	ldw	r2,-12(fp)
    11cc:	10800217 	ldw	r2,8(r2)
    11d0:	100f883a 	mov	r7,r2
    11d4:	e1bfff17 	ldw	r6,-4(fp)
    11d8:	e17ffe17 	ldw	r5,-8(fp)
    11dc:	1809883a 	mov	r4,r3
    11e0:	00012e40 	call	12e4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    11e4:	e037883a 	mov	sp,fp
    11e8:	dfc00117 	ldw	ra,4(sp)
    11ec:	df000017 	ldw	fp,0(sp)
    11f0:	dec00204 	addi	sp,sp,8
    11f4:	f800283a 	ret

000011f8 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    11f8:	defff704 	addi	sp,sp,-36
    11fc:	df000815 	stw	fp,32(sp)
    1200:	df000804 	addi	fp,sp,32
    1204:	e13ffc15 	stw	r4,-16(fp)
    1208:	e17ffd15 	stw	r5,-12(fp)
    120c:	e1bffe15 	stw	r6,-8(fp)
    1210:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1214:	e0bffc17 	ldw	r2,-16(fp)
    1218:	10800017 	ldw	r2,0(r2)
    121c:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    1220:	e0bffd17 	ldw	r2,-12(fp)
    1224:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    1228:	e0bffe17 	ldw	r2,-8(fp)
    122c:	e0fffd17 	ldw	r3,-12(fp)
    1230:	1885883a 	add	r2,r3,r2
    1234:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    1238:	00001206 	br	1284 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    123c:	e0bff917 	ldw	r2,-28(fp)
    1240:	10800037 	ldwio	r2,0(r2)
    1244:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    1248:	e0bffb17 	ldw	r2,-20(fp)
    124c:	10a0000c 	andi	r2,r2,32768
    1250:	10000626 	beq	r2,zero,126c <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    1254:	e0bff817 	ldw	r2,-32(fp)
    1258:	10c00044 	addi	r3,r2,1
    125c:	e0fff815 	stw	r3,-32(fp)
    1260:	e0fffb17 	ldw	r3,-20(fp)
    1264:	10c00005 	stb	r3,0(r2)
    1268:	00000606 	br	1284 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    126c:	e0fff817 	ldw	r3,-32(fp)
    1270:	e0bffd17 	ldw	r2,-12(fp)
    1274:	1880071e 	bne	r3,r2,1294 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    1278:	e0bfff17 	ldw	r2,-4(fp)
    127c:	1090000c 	andi	r2,r2,16384
    1280:	1000061e 	bne	r2,zero,129c <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    1284:	e0fff817 	ldw	r3,-32(fp)
    1288:	e0bffa17 	ldw	r2,-24(fp)
    128c:	18bfeb36 	bltu	r3,r2,123c <__alt_data_end+0xffff123c>
    1290:	00000306 	br	12a0 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    1294:	0001883a 	nop
    1298:	00000106 	br	12a0 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    129c:	0001883a 	nop
    
  }

  if (ptr != buffer)
    12a0:	e0fff817 	ldw	r3,-32(fp)
    12a4:	e0bffd17 	ldw	r2,-12(fp)
    12a8:	18800426 	beq	r3,r2,12bc <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    12ac:	e0fff817 	ldw	r3,-32(fp)
    12b0:	e0bffd17 	ldw	r2,-12(fp)
    12b4:	1885c83a 	sub	r2,r3,r2
    12b8:	00000606 	br	12d4 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    12bc:	e0bfff17 	ldw	r2,-4(fp)
    12c0:	1090000c 	andi	r2,r2,16384
    12c4:	10000226 	beq	r2,zero,12d0 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    12c8:	00bffd44 	movi	r2,-11
    12cc:	00000106 	br	12d4 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    12d0:	00bffec4 	movi	r2,-5
}
    12d4:	e037883a 	mov	sp,fp
    12d8:	df000017 	ldw	fp,0(sp)
    12dc:	dec00104 	addi	sp,sp,4
    12e0:	f800283a 	ret

000012e4 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    12e4:	defff904 	addi	sp,sp,-28
    12e8:	df000615 	stw	fp,24(sp)
    12ec:	df000604 	addi	fp,sp,24
    12f0:	e13ffc15 	stw	r4,-16(fp)
    12f4:	e17ffd15 	stw	r5,-12(fp)
    12f8:	e1bffe15 	stw	r6,-8(fp)
    12fc:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    1300:	e0bffc17 	ldw	r2,-16(fp)
    1304:	10800017 	ldw	r2,0(r2)
    1308:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    130c:	e0bffe17 	ldw	r2,-8(fp)
    1310:	e0fffd17 	ldw	r3,-12(fp)
    1314:	1885883a 	add	r2,r3,r2
    1318:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    131c:	00000e06 	br	1358 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    1320:	e0bffa17 	ldw	r2,-24(fp)
    1324:	10800104 	addi	r2,r2,4
    1328:	10800037 	ldwio	r2,0(r2)
    132c:	10bfffec 	andhi	r2,r2,65535
    1330:	10000926 	beq	r2,zero,1358 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    1334:	e0fffa17 	ldw	r3,-24(fp)
    1338:	e0bffd17 	ldw	r2,-12(fp)
    133c:	11000044 	addi	r4,r2,1
    1340:	e13ffd15 	stw	r4,-12(fp)
    1344:	10800003 	ldbu	r2,0(r2)
    1348:	10803fcc 	andi	r2,r2,255
    134c:	1080201c 	xori	r2,r2,128
    1350:	10bfe004 	addi	r2,r2,-128
    1354:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    1358:	e0fffd17 	ldw	r3,-12(fp)
    135c:	e0bffb17 	ldw	r2,-20(fp)
    1360:	18bfef36 	bltu	r3,r2,1320 <__alt_data_end+0xffff1320>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    1364:	e0bffe17 	ldw	r2,-8(fp)
}
    1368:	e037883a 	mov	sp,fp
    136c:	df000017 	ldw	fp,0(sp)
    1370:	dec00104 	addi	sp,sp,4
    1374:	f800283a 	ret

00001378 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
    1378:	defff404 	addi	sp,sp,-48
    137c:	df000b15 	stw	fp,44(sp)
    1380:	df000b04 	addi	fp,sp,44
    1384:	e13ffc15 	stw	r4,-16(fp)
    1388:	e17ffd15 	stw	r5,-12(fp)
    138c:	e1bffe15 	stw	r6,-8(fp)
    1390:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
    1394:	e0ffff17 	ldw	r3,-4(fp)
    1398:	e0bffe17 	ldw	r2,-8(fp)
    139c:	1885883a 	add	r2,r3,r2
    13a0:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
    13a4:	e0c00217 	ldw	r3,8(fp)
    13a8:	e0800117 	ldw	r2,4(fp)
    13ac:	1885883a 	add	r2,r3,r2
    13b0:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
    13b4:	e0800117 	ldw	r2,4(fp)
    13b8:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
    13bc:	e0bffe17 	ldw	r2,-8(fp)
    13c0:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
    13c4:	00800044 	movi	r2,1
    13c8:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
    13cc:	e0bffc17 	ldw	r2,-16(fp)
    13d0:	10800504 	addi	r2,r2,20
    13d4:	1009883a 	mov	r4,r2
    13d8:	00c00044 	movi	r3,1
    13dc:	e0bffd17 	ldw	r2,-12(fp)
    13e0:	1884983a 	sll	r2,r3,r2
    13e4:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
    13e8:	e0800317 	ldw	r2,12(fp)
    13ec:	1080008c 	andi	r2,r2,2
    13f0:	1000051e 	bne	r2,zero,1408 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
    13f4:	e0bffc17 	ldw	r2,-16(fp)
    13f8:	10800304 	addi	r2,r2,12
    13fc:	1007883a 	mov	r3,r2
    1400:	00810004 	movi	r2,1024
    1404:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
    1408:	e0bffc17 	ldw	r2,-16(fp)
    140c:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    1410:	e0bffc17 	ldw	r2,-16(fp)
    1414:	10800204 	addi	r2,r2,8
    1418:	10800037 	ldwio	r2,0(r2)
    141c:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    1420:	e0bffa17 	ldw	r2,-24(fp)
    1424:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    1428:	10000226 	beq	r2,zero,1434 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    142c:	e0bff717 	ldw	r2,-36(fp)
    1430:	1000031e 	bne	r2,zero,1440 <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
    1434:	e0bffa17 	ldw	r2,-24(fp)
    1438:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
    143c:	103ff426 	beq	r2,zero,1410 <__alt_data_end+0xffff1410>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
    1440:	e0bffa17 	ldw	r2,-24(fp)
    1444:	1080100c 	andi	r2,r2,64
    1448:	10001e26 	beq	r2,zero,14c4 <alt_avalon_spi_command+0x14c>
    144c:	e0bff717 	ldw	r2,-36(fp)
    1450:	00801c0e 	bge	zero,r2,14c4 <alt_avalon_spi_command+0x14c>
    {
      credits--;
    1454:	e0bff717 	ldw	r2,-36(fp)
    1458:	10bfffc4 	addi	r2,r2,-1
    145c:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
    1460:	e0ffff17 	ldw	r3,-4(fp)
    1464:	e0bff817 	ldw	r2,-32(fp)
    1468:	18800a2e 	bgeu	r3,r2,1494 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
    146c:	e0bffc17 	ldw	r2,-16(fp)
    1470:	10800104 	addi	r2,r2,4
    1474:	1009883a 	mov	r4,r2
    1478:	e0bfff17 	ldw	r2,-4(fp)
    147c:	10c00044 	addi	r3,r2,1
    1480:	e0ffff15 	stw	r3,-4(fp)
    1484:	10800003 	ldbu	r2,0(r2)
    1488:	10803fcc 	andi	r2,r2,255
    148c:	20800035 	stwio	r2,0(r4)
    1490:	00000c06 	br	14c4 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
    1494:	e0bff517 	ldw	r2,-44(fp)
    1498:	10000826 	beq	r2,zero,14bc <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
    149c:	e0bff517 	ldw	r2,-44(fp)
    14a0:	10bfffc4 	addi	r2,r2,-1
    14a4:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
    14a8:	e0bffc17 	ldw	r2,-16(fp)
    14ac:	10800104 	addi	r2,r2,4
    14b0:	0007883a 	mov	r3,zero
    14b4:	10c00035 	stwio	r3,0(r2)
    14b8:	00000206 	br	14c4 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
    14bc:	00bf0004 	movi	r2,-1024
    14c0:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
    14c4:	e0bffa17 	ldw	r2,-24(fp)
    14c8:	1080200c 	andi	r2,r2,128
    14cc:	103fd026 	beq	r2,zero,1410 <__alt_data_end+0xffff1410>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
    14d0:	e0bffc17 	ldw	r2,-16(fp)
    14d4:	10800037 	ldwio	r2,0(r2)
    14d8:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
    14dc:	e0bff617 	ldw	r2,-40(fp)
    14e0:	10000426 	beq	r2,zero,14f4 <alt_avalon_spi_command+0x17c>
        read_ignore--;
    14e4:	e0bff617 	ldw	r2,-40(fp)
    14e8:	10bfffc4 	addi	r2,r2,-1
    14ec:	e0bff615 	stw	r2,-40(fp)
    14f0:	00000506 	br	1508 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
    14f4:	e0800217 	ldw	r2,8(fp)
    14f8:	10c00044 	addi	r3,r2,1
    14fc:	e0c00215 	stw	r3,8(fp)
    1500:	e0fffb17 	ldw	r3,-20(fp)
    1504:	10c00005 	stb	r3,0(r2)
      credits++;
    1508:	e0bff717 	ldw	r2,-36(fp)
    150c:	10800044 	addi	r2,r2,1
    1510:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
    1514:	e0bff617 	ldw	r2,-40(fp)
    1518:	103fbd1e 	bne	r2,zero,1410 <__alt_data_end+0xffff1410>
    151c:	e0c00217 	ldw	r3,8(fp)
    1520:	e0bff917 	ldw	r2,-28(fp)
    1524:	18bfba1e 	bne	r3,r2,1410 <__alt_data_end+0xffff1410>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    1528:	e0bffc17 	ldw	r2,-16(fp)
    152c:	10800204 	addi	r2,r2,8
    1530:	10800037 	ldwio	r2,0(r2)
    1534:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
    1538:	e0bffa17 	ldw	r2,-24(fp)
    153c:	1080080c 	andi	r2,r2,32
    1540:	103ff926 	beq	r2,zero,1528 <__alt_data_end+0xffff1528>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
    1544:	e0800317 	ldw	r2,12(fp)
    1548:	1080004c 	andi	r2,r2,1
    154c:	1000041e 	bne	r2,zero,1560 <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
    1550:	e0bffc17 	ldw	r2,-16(fp)
    1554:	10800304 	addi	r2,r2,12
    1558:	0007883a 	mov	r3,zero
    155c:	10c00035 	stwio	r3,0(r2)

  return read_length;
    1560:	e0800117 	ldw	r2,4(fp)
}
    1564:	e037883a 	mov	sp,fp
    1568:	df000017 	ldw	fp,0(sp)
    156c:	dec00104 	addi	sp,sp,4
    1570:	f800283a 	ret

00001574 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    1574:	defffa04 	addi	sp,sp,-24
    1578:	dfc00515 	stw	ra,20(sp)
    157c:	df000415 	stw	fp,16(sp)
    1580:	df000404 	addi	fp,sp,16
    1584:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    1588:	0007883a 	mov	r3,zero
    158c:	e0bfff17 	ldw	r2,-4(fp)
    1590:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    1594:	e0bfff17 	ldw	r2,-4(fp)
    1598:	10800104 	addi	r2,r2,4
    159c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    15a0:	0005303a 	rdctl	r2,status
    15a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    15a8:	e0fffd17 	ldw	r3,-12(fp)
    15ac:	00bfff84 	movi	r2,-2
    15b0:	1884703a 	and	r2,r3,r2
    15b4:	1001703a 	wrctl	status,r2
  
  return context;
    15b8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    15bc:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    15c0:	00020f40 	call	20f4 <alt_tick>
    15c4:	e0bffc17 	ldw	r2,-16(fp)
    15c8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    15cc:	e0bffe17 	ldw	r2,-8(fp)
    15d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    15d4:	0001883a 	nop
    15d8:	e037883a 	mov	sp,fp
    15dc:	dfc00117 	ldw	ra,4(sp)
    15e0:	df000017 	ldw	fp,0(sp)
    15e4:	dec00204 	addi	sp,sp,8
    15e8:	f800283a 	ret

000015ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    15ec:	defff804 	addi	sp,sp,-32
    15f0:	dfc00715 	stw	ra,28(sp)
    15f4:	df000615 	stw	fp,24(sp)
    15f8:	df000604 	addi	fp,sp,24
    15fc:	e13ffc15 	stw	r4,-16(fp)
    1600:	e17ffd15 	stw	r5,-12(fp)
    1604:	e1bffe15 	stw	r6,-8(fp)
    1608:	e1ffff15 	stw	r7,-4(fp)
    160c:	e0bfff17 	ldw	r2,-4(fp)
    1610:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    1614:	00800034 	movhi	r2,0
    1618:	108bb204 	addi	r2,r2,11976
    161c:	10800017 	ldw	r2,0(r2)
    1620:	1000041e 	bne	r2,zero,1634 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
    1624:	00800034 	movhi	r2,0
    1628:	108bb204 	addi	r2,r2,11976
    162c:	e0fffb17 	ldw	r3,-20(fp)
    1630:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    1634:	e0bffc17 	ldw	r2,-16(fp)
    1638:	10800104 	addi	r2,r2,4
    163c:	00c001c4 	movi	r3,7
    1640:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    1644:	d8000015 	stw	zero,0(sp)
    1648:	e1fffc17 	ldw	r7,-16(fp)
    164c:	01800034 	movhi	r6,0
    1650:	31855d04 	addi	r6,r6,5492
    1654:	e17ffe17 	ldw	r5,-8(fp)
    1658:	e13ffd17 	ldw	r4,-12(fp)
    165c:	00019000 	call	1900 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    1660:	0001883a 	nop
    1664:	e037883a 	mov	sp,fp
    1668:	dfc00117 	ldw	ra,4(sp)
    166c:	df000017 	ldw	fp,0(sp)
    1670:	dec00204 	addi	sp,sp,8
    1674:	f800283a 	ret

00001678 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1678:	defffe04 	addi	sp,sp,-8
    167c:	dfc00115 	stw	ra,4(sp)
    1680:	df000015 	stw	fp,0(sp)
    1684:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1688:	00800034 	movhi	r2,0
    168c:	108ace04 	addi	r2,r2,11064
    1690:	10800017 	ldw	r2,0(r2)
    1694:	10000526 	beq	r2,zero,16ac <alt_get_errno+0x34>
    1698:	00800034 	movhi	r2,0
    169c:	108ace04 	addi	r2,r2,11064
    16a0:	10800017 	ldw	r2,0(r2)
    16a4:	103ee83a 	callr	r2
    16a8:	00000206 	br	16b4 <alt_get_errno+0x3c>
    16ac:	00800034 	movhi	r2,0
    16b0:	108bad04 	addi	r2,r2,11956
}
    16b4:	e037883a 	mov	sp,fp
    16b8:	dfc00117 	ldw	ra,4(sp)
    16bc:	df000017 	ldw	fp,0(sp)
    16c0:	dec00204 	addi	sp,sp,8
    16c4:	f800283a 	ret

000016c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    16c8:	defffb04 	addi	sp,sp,-20
    16cc:	dfc00415 	stw	ra,16(sp)
    16d0:	df000315 	stw	fp,12(sp)
    16d4:	df000304 	addi	fp,sp,12
    16d8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    16dc:	e0bfff17 	ldw	r2,-4(fp)
    16e0:	10000816 	blt	r2,zero,1704 <close+0x3c>
    16e4:	01400304 	movi	r5,12
    16e8:	e13fff17 	ldw	r4,-4(fp)
    16ec:	000048c0 	call	48c <__mulsi3>
    16f0:	1007883a 	mov	r3,r2
    16f4:	00800034 	movhi	r2,0
    16f8:	108a6704 	addi	r2,r2,10652
    16fc:	1885883a 	add	r2,r3,r2
    1700:	00000106 	br	1708 <close+0x40>
    1704:	0005883a 	mov	r2,zero
    1708:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    170c:	e0bffd17 	ldw	r2,-12(fp)
    1710:	10001926 	beq	r2,zero,1778 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1714:	e0bffd17 	ldw	r2,-12(fp)
    1718:	10800017 	ldw	r2,0(r2)
    171c:	10800417 	ldw	r2,16(r2)
    1720:	10000626 	beq	r2,zero,173c <close+0x74>
    1724:	e0bffd17 	ldw	r2,-12(fp)
    1728:	10800017 	ldw	r2,0(r2)
    172c:	10800417 	ldw	r2,16(r2)
    1730:	e13ffd17 	ldw	r4,-12(fp)
    1734:	103ee83a 	callr	r2
    1738:	00000106 	br	1740 <close+0x78>
    173c:	0005883a 	mov	r2,zero
    1740:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1744:	e13fff17 	ldw	r4,-4(fp)
    1748:	0001fd40 	call	1fd4 <alt_release_fd>
    if (rval < 0)
    174c:	e0bffe17 	ldw	r2,-8(fp)
    1750:	1000070e 	bge	r2,zero,1770 <close+0xa8>
    {
      ALT_ERRNO = -rval;
    1754:	00016780 	call	1678 <alt_get_errno>
    1758:	1007883a 	mov	r3,r2
    175c:	e0bffe17 	ldw	r2,-8(fp)
    1760:	0085c83a 	sub	r2,zero,r2
    1764:	18800015 	stw	r2,0(r3)
      return -1;
    1768:	00bfffc4 	movi	r2,-1
    176c:	00000706 	br	178c <close+0xc4>
    }
    return 0;
    1770:	0005883a 	mov	r2,zero
    1774:	00000506 	br	178c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1778:	00016780 	call	1678 <alt_get_errno>
    177c:	1007883a 	mov	r3,r2
    1780:	00801444 	movi	r2,81
    1784:	18800015 	stw	r2,0(r3)
    return -1;
    1788:	00bfffc4 	movi	r2,-1
  }
}
    178c:	e037883a 	mov	sp,fp
    1790:	dfc00117 	ldw	ra,4(sp)
    1794:	df000017 	ldw	fp,0(sp)
    1798:	dec00204 	addi	sp,sp,8
    179c:	f800283a 	ret

000017a0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    17a0:	deffff04 	addi	sp,sp,-4
    17a4:	df000015 	stw	fp,0(sp)
    17a8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    17ac:	0001883a 	nop
    17b0:	e037883a 	mov	sp,fp
    17b4:	df000017 	ldw	fp,0(sp)
    17b8:	dec00104 	addi	sp,sp,4
    17bc:	f800283a 	ret

000017c0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    17c0:	defffc04 	addi	sp,sp,-16
    17c4:	df000315 	stw	fp,12(sp)
    17c8:	df000304 	addi	fp,sp,12
    17cc:	e13ffd15 	stw	r4,-12(fp)
    17d0:	e17ffe15 	stw	r5,-8(fp)
    17d4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    17d8:	e0bfff17 	ldw	r2,-4(fp)
}
    17dc:	e037883a 	mov	sp,fp
    17e0:	df000017 	ldw	fp,0(sp)
    17e4:	dec00104 	addi	sp,sp,4
    17e8:	f800283a 	ret

000017ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    17ec:	defffe04 	addi	sp,sp,-8
    17f0:	dfc00115 	stw	ra,4(sp)
    17f4:	df000015 	stw	fp,0(sp)
    17f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    17fc:	00800034 	movhi	r2,0
    1800:	108ace04 	addi	r2,r2,11064
    1804:	10800017 	ldw	r2,0(r2)
    1808:	10000526 	beq	r2,zero,1820 <alt_get_errno+0x34>
    180c:	00800034 	movhi	r2,0
    1810:	108ace04 	addi	r2,r2,11064
    1814:	10800017 	ldw	r2,0(r2)
    1818:	103ee83a 	callr	r2
    181c:	00000206 	br	1828 <alt_get_errno+0x3c>
    1820:	00800034 	movhi	r2,0
    1824:	108bad04 	addi	r2,r2,11956
}
    1828:	e037883a 	mov	sp,fp
    182c:	dfc00117 	ldw	ra,4(sp)
    1830:	df000017 	ldw	fp,0(sp)
    1834:	dec00204 	addi	sp,sp,8
    1838:	f800283a 	ret

0000183c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    183c:	defffa04 	addi	sp,sp,-24
    1840:	dfc00515 	stw	ra,20(sp)
    1844:	df000415 	stw	fp,16(sp)
    1848:	df000404 	addi	fp,sp,16
    184c:	e13ffe15 	stw	r4,-8(fp)
    1850:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1854:	e0bffe17 	ldw	r2,-8(fp)
    1858:	10000326 	beq	r2,zero,1868 <alt_dev_llist_insert+0x2c>
    185c:	e0bffe17 	ldw	r2,-8(fp)
    1860:	10800217 	ldw	r2,8(r2)
    1864:	1000061e 	bne	r2,zero,1880 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1868:	00017ec0 	call	17ec <alt_get_errno>
    186c:	1007883a 	mov	r3,r2
    1870:	00800584 	movi	r2,22
    1874:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1878:	00bffa84 	movi	r2,-22
    187c:	00001306 	br	18cc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1880:	e0bffe17 	ldw	r2,-8(fp)
    1884:	e0ffff17 	ldw	r3,-4(fp)
    1888:	e0fffc15 	stw	r3,-16(fp)
    188c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1890:	e0bffd17 	ldw	r2,-12(fp)
    1894:	e0fffc17 	ldw	r3,-16(fp)
    1898:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    189c:	e0bffc17 	ldw	r2,-16(fp)
    18a0:	10c00017 	ldw	r3,0(r2)
    18a4:	e0bffd17 	ldw	r2,-12(fp)
    18a8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    18ac:	e0bffc17 	ldw	r2,-16(fp)
    18b0:	10800017 	ldw	r2,0(r2)
    18b4:	e0fffd17 	ldw	r3,-12(fp)
    18b8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    18bc:	e0bffc17 	ldw	r2,-16(fp)
    18c0:	e0fffd17 	ldw	r3,-12(fp)
    18c4:	10c00015 	stw	r3,0(r2)

  return 0;  
    18c8:	0005883a 	mov	r2,zero
}
    18cc:	e037883a 	mov	sp,fp
    18d0:	dfc00117 	ldw	ra,4(sp)
    18d4:	df000017 	ldw	fp,0(sp)
    18d8:	dec00204 	addi	sp,sp,8
    18dc:	f800283a 	ret

000018e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    18e0:	deffff04 	addi	sp,sp,-4
    18e4:	df000015 	stw	fp,0(sp)
    18e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
    18ec:	0001883a 	nop
    18f0:	e037883a 	mov	sp,fp
    18f4:	df000017 	ldw	fp,0(sp)
    18f8:	dec00104 	addi	sp,sp,4
    18fc:	f800283a 	ret

00001900 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1900:	defff904 	addi	sp,sp,-28
    1904:	dfc00615 	stw	ra,24(sp)
    1908:	df000515 	stw	fp,20(sp)
    190c:	df000504 	addi	fp,sp,20
    1910:	e13ffc15 	stw	r4,-16(fp)
    1914:	e17ffd15 	stw	r5,-12(fp)
    1918:	e1bffe15 	stw	r6,-8(fp)
    191c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1920:	e0800217 	ldw	r2,8(fp)
    1924:	d8800015 	stw	r2,0(sp)
    1928:	e1ffff17 	ldw	r7,-4(fp)
    192c:	e1bffe17 	ldw	r6,-8(fp)
    1930:	e17ffd17 	ldw	r5,-12(fp)
    1934:	e13ffc17 	ldw	r4,-16(fp)
    1938:	0001ae00 	call	1ae0 <alt_iic_isr_register>
}  
    193c:	e037883a 	mov	sp,fp
    1940:	dfc00117 	ldw	ra,4(sp)
    1944:	df000017 	ldw	fp,0(sp)
    1948:	dec00204 	addi	sp,sp,8
    194c:	f800283a 	ret

00001950 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    1950:	defff904 	addi	sp,sp,-28
    1954:	df000615 	stw	fp,24(sp)
    1958:	df000604 	addi	fp,sp,24
    195c:	e13ffe15 	stw	r4,-8(fp)
    1960:	e17fff15 	stw	r5,-4(fp)
    1964:	e0bfff17 	ldw	r2,-4(fp)
    1968:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    196c:	0005303a 	rdctl	r2,status
    1970:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1974:	e0fffb17 	ldw	r3,-20(fp)
    1978:	00bfff84 	movi	r2,-2
    197c:	1884703a 	and	r2,r3,r2
    1980:	1001703a 	wrctl	status,r2
  
  return context;
    1984:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1988:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    198c:	00c00044 	movi	r3,1
    1990:	e0bffa17 	ldw	r2,-24(fp)
    1994:	1884983a 	sll	r2,r3,r2
    1998:	1007883a 	mov	r3,r2
    199c:	00800034 	movhi	r2,0
    19a0:	108bb104 	addi	r2,r2,11972
    19a4:	10800017 	ldw	r2,0(r2)
    19a8:	1886b03a 	or	r3,r3,r2
    19ac:	00800034 	movhi	r2,0
    19b0:	108bb104 	addi	r2,r2,11972
    19b4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    19b8:	00800034 	movhi	r2,0
    19bc:	108bb104 	addi	r2,r2,11972
    19c0:	10800017 	ldw	r2,0(r2)
    19c4:	100170fa 	wrctl	ienable,r2
    19c8:	e0bffc17 	ldw	r2,-16(fp)
    19cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    19d0:	e0bffd17 	ldw	r2,-12(fp)
    19d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    19d8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    19dc:	0001883a 	nop
}
    19e0:	e037883a 	mov	sp,fp
    19e4:	df000017 	ldw	fp,0(sp)
    19e8:	dec00104 	addi	sp,sp,4
    19ec:	f800283a 	ret

000019f0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    19f0:	defff904 	addi	sp,sp,-28
    19f4:	df000615 	stw	fp,24(sp)
    19f8:	df000604 	addi	fp,sp,24
    19fc:	e13ffe15 	stw	r4,-8(fp)
    1a00:	e17fff15 	stw	r5,-4(fp)
    1a04:	e0bfff17 	ldw	r2,-4(fp)
    1a08:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1a0c:	0005303a 	rdctl	r2,status
    1a10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1a14:	e0fffb17 	ldw	r3,-20(fp)
    1a18:	00bfff84 	movi	r2,-2
    1a1c:	1884703a 	and	r2,r3,r2
    1a20:	1001703a 	wrctl	status,r2
  
  return context;
    1a24:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    1a28:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    1a2c:	00c00044 	movi	r3,1
    1a30:	e0bffa17 	ldw	r2,-24(fp)
    1a34:	1884983a 	sll	r2,r3,r2
    1a38:	0084303a 	nor	r2,zero,r2
    1a3c:	1007883a 	mov	r3,r2
    1a40:	00800034 	movhi	r2,0
    1a44:	108bb104 	addi	r2,r2,11972
    1a48:	10800017 	ldw	r2,0(r2)
    1a4c:	1886703a 	and	r3,r3,r2
    1a50:	00800034 	movhi	r2,0
    1a54:	108bb104 	addi	r2,r2,11972
    1a58:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    1a5c:	00800034 	movhi	r2,0
    1a60:	108bb104 	addi	r2,r2,11972
    1a64:	10800017 	ldw	r2,0(r2)
    1a68:	100170fa 	wrctl	ienable,r2
    1a6c:	e0bffc17 	ldw	r2,-16(fp)
    1a70:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1a74:	e0bffd17 	ldw	r2,-12(fp)
    1a78:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    1a7c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    1a80:	0001883a 	nop
}
    1a84:	e037883a 	mov	sp,fp
    1a88:	df000017 	ldw	fp,0(sp)
    1a8c:	dec00104 	addi	sp,sp,4
    1a90:	f800283a 	ret

00001a94 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    1a94:	defffc04 	addi	sp,sp,-16
    1a98:	df000315 	stw	fp,12(sp)
    1a9c:	df000304 	addi	fp,sp,12
    1aa0:	e13ffe15 	stw	r4,-8(fp)
    1aa4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    1aa8:	000530fa 	rdctl	r2,ienable
    1aac:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    1ab0:	00c00044 	movi	r3,1
    1ab4:	e0bfff17 	ldw	r2,-4(fp)
    1ab8:	1884983a 	sll	r2,r3,r2
    1abc:	1007883a 	mov	r3,r2
    1ac0:	e0bffd17 	ldw	r2,-12(fp)
    1ac4:	1884703a 	and	r2,r3,r2
    1ac8:	1004c03a 	cmpne	r2,r2,zero
    1acc:	10803fcc 	andi	r2,r2,255
}
    1ad0:	e037883a 	mov	sp,fp
    1ad4:	df000017 	ldw	fp,0(sp)
    1ad8:	dec00104 	addi	sp,sp,4
    1adc:	f800283a 	ret

00001ae0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1ae0:	defff504 	addi	sp,sp,-44
    1ae4:	dfc00a15 	stw	ra,40(sp)
    1ae8:	df000915 	stw	fp,36(sp)
    1aec:	df000904 	addi	fp,sp,36
    1af0:	e13ffc15 	stw	r4,-16(fp)
    1af4:	e17ffd15 	stw	r5,-12(fp)
    1af8:	e1bffe15 	stw	r6,-8(fp)
    1afc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    1b00:	00bffa84 	movi	r2,-22
    1b04:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    1b08:	e0bffd17 	ldw	r2,-12(fp)
    1b0c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    1b10:	e0bff817 	ldw	r2,-32(fp)
    1b14:	10800808 	cmpgei	r2,r2,32
    1b18:	1000271e 	bne	r2,zero,1bb8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1b1c:	0005303a 	rdctl	r2,status
    1b20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1b24:	e0fffb17 	ldw	r3,-20(fp)
    1b28:	00bfff84 	movi	r2,-2
    1b2c:	1884703a 	and	r2,r3,r2
    1b30:	1001703a 	wrctl	status,r2
  
  return context;
    1b34:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    1b38:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    1b3c:	00800034 	movhi	r2,0
    1b40:	108bb504 	addi	r2,r2,11988
    1b44:	e0fff817 	ldw	r3,-32(fp)
    1b48:	180690fa 	slli	r3,r3,3
    1b4c:	10c5883a 	add	r2,r2,r3
    1b50:	e0fffe17 	ldw	r3,-8(fp)
    1b54:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    1b58:	00800034 	movhi	r2,0
    1b5c:	108bb504 	addi	r2,r2,11988
    1b60:	e0fff817 	ldw	r3,-32(fp)
    1b64:	180690fa 	slli	r3,r3,3
    1b68:	10c5883a 	add	r2,r2,r3
    1b6c:	10800104 	addi	r2,r2,4
    1b70:	e0ffff17 	ldw	r3,-4(fp)
    1b74:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    1b78:	e0bffe17 	ldw	r2,-8(fp)
    1b7c:	10000526 	beq	r2,zero,1b94 <alt_iic_isr_register+0xb4>
    1b80:	e0bff817 	ldw	r2,-32(fp)
    1b84:	100b883a 	mov	r5,r2
    1b88:	e13ffc17 	ldw	r4,-16(fp)
    1b8c:	00019500 	call	1950 <alt_ic_irq_enable>
    1b90:	00000406 	br	1ba4 <alt_iic_isr_register+0xc4>
    1b94:	e0bff817 	ldw	r2,-32(fp)
    1b98:	100b883a 	mov	r5,r2
    1b9c:	e13ffc17 	ldw	r4,-16(fp)
    1ba0:	00019f00 	call	19f0 <alt_ic_irq_disable>
    1ba4:	e0bff715 	stw	r2,-36(fp)
    1ba8:	e0bffa17 	ldw	r2,-24(fp)
    1bac:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1bb0:	e0bff917 	ldw	r2,-28(fp)
    1bb4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    1bb8:	e0bff717 	ldw	r2,-36(fp)
}
    1bbc:	e037883a 	mov	sp,fp
    1bc0:	dfc00117 	ldw	ra,4(sp)
    1bc4:	df000017 	ldw	fp,0(sp)
    1bc8:	dec00204 	addi	sp,sp,8
    1bcc:	f800283a 	ret

00001bd0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    1bd0:	defff804 	addi	sp,sp,-32
    1bd4:	dfc00715 	stw	ra,28(sp)
    1bd8:	df000615 	stw	fp,24(sp)
    1bdc:	dc000515 	stw	r16,20(sp)
    1be0:	df000604 	addi	fp,sp,24
    1be4:	e13ffb15 	stw	r4,-20(fp)
    1be8:	e17ffc15 	stw	r5,-16(fp)
    1bec:	e1bffd15 	stw	r6,-12(fp)
    1bf0:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
    1bf4:	e1bffe17 	ldw	r6,-8(fp)
    1bf8:	e17ffd17 	ldw	r5,-12(fp)
    1bfc:	e13ffc17 	ldw	r4,-16(fp)
    1c00:	0001e740 	call	1e74 <open>
    1c04:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
    1c08:	e0bffa17 	ldw	r2,-24(fp)
    1c0c:	10002216 	blt	r2,zero,1c98 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
    1c10:	04000034 	movhi	r16,0
    1c14:	840a6704 	addi	r16,r16,10652
    1c18:	e0bffa17 	ldw	r2,-24(fp)
    1c1c:	01400304 	movi	r5,12
    1c20:	1009883a 	mov	r4,r2
    1c24:	000048c0 	call	48c <__mulsi3>
    1c28:	8085883a 	add	r2,r16,r2
    1c2c:	10c00017 	ldw	r3,0(r2)
    1c30:	e0bffb17 	ldw	r2,-20(fp)
    1c34:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    1c38:	04000034 	movhi	r16,0
    1c3c:	840a6704 	addi	r16,r16,10652
    1c40:	e0bffa17 	ldw	r2,-24(fp)
    1c44:	01400304 	movi	r5,12
    1c48:	1009883a 	mov	r4,r2
    1c4c:	000048c0 	call	48c <__mulsi3>
    1c50:	8085883a 	add	r2,r16,r2
    1c54:	10800104 	addi	r2,r2,4
    1c58:	10c00017 	ldw	r3,0(r2)
    1c5c:	e0bffb17 	ldw	r2,-20(fp)
    1c60:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    1c64:	04000034 	movhi	r16,0
    1c68:	840a6704 	addi	r16,r16,10652
    1c6c:	e0bffa17 	ldw	r2,-24(fp)
    1c70:	01400304 	movi	r5,12
    1c74:	1009883a 	mov	r4,r2
    1c78:	000048c0 	call	48c <__mulsi3>
    1c7c:	8085883a 	add	r2,r16,r2
    1c80:	10800204 	addi	r2,r2,8
    1c84:	10c00017 	ldw	r3,0(r2)
    1c88:	e0bffb17 	ldw	r2,-20(fp)
    1c8c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    1c90:	e13ffa17 	ldw	r4,-24(fp)
    1c94:	0001fd40 	call	1fd4 <alt_release_fd>
  }
} 
    1c98:	0001883a 	nop
    1c9c:	e6ffff04 	addi	sp,fp,-4
    1ca0:	dfc00217 	ldw	ra,8(sp)
    1ca4:	df000117 	ldw	fp,4(sp)
    1ca8:	dc000017 	ldw	r16,0(sp)
    1cac:	dec00304 	addi	sp,sp,12
    1cb0:	f800283a 	ret

00001cb4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    1cb4:	defffb04 	addi	sp,sp,-20
    1cb8:	dfc00415 	stw	ra,16(sp)
    1cbc:	df000315 	stw	fp,12(sp)
    1cc0:	df000304 	addi	fp,sp,12
    1cc4:	e13ffd15 	stw	r4,-12(fp)
    1cc8:	e17ffe15 	stw	r5,-8(fp)
    1ccc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    1cd0:	01c07fc4 	movi	r7,511
    1cd4:	01800044 	movi	r6,1
    1cd8:	e17ffd17 	ldw	r5,-12(fp)
    1cdc:	01000034 	movhi	r4,0
    1ce0:	210a6a04 	addi	r4,r4,10664
    1ce4:	0001bd00 	call	1bd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    1ce8:	01c07fc4 	movi	r7,511
    1cec:	000d883a 	mov	r6,zero
    1cf0:	e17ffe17 	ldw	r5,-8(fp)
    1cf4:	01000034 	movhi	r4,0
    1cf8:	210a6704 	addi	r4,r4,10652
    1cfc:	0001bd00 	call	1bd0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    1d00:	01c07fc4 	movi	r7,511
    1d04:	01800044 	movi	r6,1
    1d08:	e17fff17 	ldw	r5,-4(fp)
    1d0c:	01000034 	movhi	r4,0
    1d10:	210a6d04 	addi	r4,r4,10676
    1d14:	0001bd00 	call	1bd0 <alt_open_fd>
}  
    1d18:	0001883a 	nop
    1d1c:	e037883a 	mov	sp,fp
    1d20:	dfc00117 	ldw	ra,4(sp)
    1d24:	df000017 	ldw	fp,0(sp)
    1d28:	dec00204 	addi	sp,sp,8
    1d2c:	f800283a 	ret

00001d30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1d30:	defffe04 	addi	sp,sp,-8
    1d34:	dfc00115 	stw	ra,4(sp)
    1d38:	df000015 	stw	fp,0(sp)
    1d3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1d40:	00800034 	movhi	r2,0
    1d44:	108ace04 	addi	r2,r2,11064
    1d48:	10800017 	ldw	r2,0(r2)
    1d4c:	10000526 	beq	r2,zero,1d64 <alt_get_errno+0x34>
    1d50:	00800034 	movhi	r2,0
    1d54:	108ace04 	addi	r2,r2,11064
    1d58:	10800017 	ldw	r2,0(r2)
    1d5c:	103ee83a 	callr	r2
    1d60:	00000206 	br	1d6c <alt_get_errno+0x3c>
    1d64:	00800034 	movhi	r2,0
    1d68:	108bad04 	addi	r2,r2,11956
}
    1d6c:	e037883a 	mov	sp,fp
    1d70:	dfc00117 	ldw	ra,4(sp)
    1d74:	df000017 	ldw	fp,0(sp)
    1d78:	dec00204 	addi	sp,sp,8
    1d7c:	f800283a 	ret

00001d80 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    1d80:	defffb04 	addi	sp,sp,-20
    1d84:	dfc00415 	stw	ra,16(sp)
    1d88:	df000315 	stw	fp,12(sp)
    1d8c:	dc000215 	stw	r16,8(sp)
    1d90:	df000304 	addi	fp,sp,12
    1d94:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    1d98:	e0bffe17 	ldw	r2,-8(fp)
    1d9c:	10800217 	ldw	r2,8(r2)
    1da0:	10d00034 	orhi	r3,r2,16384
    1da4:	e0bffe17 	ldw	r2,-8(fp)
    1da8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1dac:	e03ffd15 	stw	zero,-12(fp)
    1db0:	00002306 	br	1e40 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1db4:	04000034 	movhi	r16,0
    1db8:	840a6704 	addi	r16,r16,10652
    1dbc:	e0bffd17 	ldw	r2,-12(fp)
    1dc0:	01400304 	movi	r5,12
    1dc4:	1009883a 	mov	r4,r2
    1dc8:	000048c0 	call	48c <__mulsi3>
    1dcc:	8085883a 	add	r2,r16,r2
    1dd0:	10c00017 	ldw	r3,0(r2)
    1dd4:	e0bffe17 	ldw	r2,-8(fp)
    1dd8:	10800017 	ldw	r2,0(r2)
    1ddc:	1880151e 	bne	r3,r2,1e34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1de0:	04000034 	movhi	r16,0
    1de4:	840a6704 	addi	r16,r16,10652
    1de8:	e0bffd17 	ldw	r2,-12(fp)
    1dec:	01400304 	movi	r5,12
    1df0:	1009883a 	mov	r4,r2
    1df4:	000048c0 	call	48c <__mulsi3>
    1df8:	8085883a 	add	r2,r16,r2
    1dfc:	10800204 	addi	r2,r2,8
    1e00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    1e04:	10000b0e 	bge	r2,zero,1e34 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    1e08:	01400304 	movi	r5,12
    1e0c:	e13ffd17 	ldw	r4,-12(fp)
    1e10:	000048c0 	call	48c <__mulsi3>
    1e14:	1007883a 	mov	r3,r2
    1e18:	00800034 	movhi	r2,0
    1e1c:	108a6704 	addi	r2,r2,10652
    1e20:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    1e24:	e0bffe17 	ldw	r2,-8(fp)
    1e28:	18800226 	beq	r3,r2,1e34 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    1e2c:	00bffcc4 	movi	r2,-13
    1e30:	00000a06 	br	1e5c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    1e34:	e0bffd17 	ldw	r2,-12(fp)
    1e38:	10800044 	addi	r2,r2,1
    1e3c:	e0bffd15 	stw	r2,-12(fp)
    1e40:	00800034 	movhi	r2,0
    1e44:	108acd04 	addi	r2,r2,11060
    1e48:	10800017 	ldw	r2,0(r2)
    1e4c:	1007883a 	mov	r3,r2
    1e50:	e0bffd17 	ldw	r2,-12(fp)
    1e54:	18bfd72e 	bgeu	r3,r2,1db4 <__alt_data_end+0xffff1db4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    1e58:	0005883a 	mov	r2,zero
}
    1e5c:	e6ffff04 	addi	sp,fp,-4
    1e60:	dfc00217 	ldw	ra,8(sp)
    1e64:	df000117 	ldw	fp,4(sp)
    1e68:	dc000017 	ldw	r16,0(sp)
    1e6c:	dec00304 	addi	sp,sp,12
    1e70:	f800283a 	ret

00001e74 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    1e74:	defff604 	addi	sp,sp,-40
    1e78:	dfc00915 	stw	ra,36(sp)
    1e7c:	df000815 	stw	fp,32(sp)
    1e80:	df000804 	addi	fp,sp,32
    1e84:	e13ffd15 	stw	r4,-12(fp)
    1e88:	e17ffe15 	stw	r5,-8(fp)
    1e8c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    1e90:	00bfffc4 	movi	r2,-1
    1e94:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    1e98:	00bffb44 	movi	r2,-19
    1e9c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    1ea0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    1ea4:	01400034 	movhi	r5,0
    1ea8:	294acb04 	addi	r5,r5,11052
    1eac:	e13ffd17 	ldw	r4,-12(fp)
    1eb0:	00022200 	call	2220 <alt_find_dev>
    1eb4:	e0bff815 	stw	r2,-32(fp)
    1eb8:	e0bff817 	ldw	r2,-32(fp)
    1ebc:	1000051e 	bne	r2,zero,1ed4 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    1ec0:	e13ffd17 	ldw	r4,-12(fp)
    1ec4:	00022b00 	call	22b0 <alt_find_file>
    1ec8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    1ecc:	00800044 	movi	r2,1
    1ed0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    1ed4:	e0bff817 	ldw	r2,-32(fp)
    1ed8:	10002b26 	beq	r2,zero,1f88 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
    1edc:	e13ff817 	ldw	r4,-32(fp)
    1ee0:	00023c40 	call	23c4 <alt_get_fd>
    1ee4:	e0bff915 	stw	r2,-28(fp)
    1ee8:	e0bff917 	ldw	r2,-28(fp)
    1eec:	1000030e 	bge	r2,zero,1efc <open+0x88>
    {
      status = index;
    1ef0:	e0bff917 	ldw	r2,-28(fp)
    1ef4:	e0bffa15 	stw	r2,-24(fp)
    1ef8:	00002506 	br	1f90 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
    1efc:	01400304 	movi	r5,12
    1f00:	e13ff917 	ldw	r4,-28(fp)
    1f04:	000048c0 	call	48c <__mulsi3>
    1f08:	1007883a 	mov	r3,r2
    1f0c:	00800034 	movhi	r2,0
    1f10:	108a6704 	addi	r2,r2,10652
    1f14:	1885883a 	add	r2,r3,r2
    1f18:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    1f1c:	e0fffe17 	ldw	r3,-8(fp)
    1f20:	00900034 	movhi	r2,16384
    1f24:	10bfffc4 	addi	r2,r2,-1
    1f28:	1886703a 	and	r3,r3,r2
    1f2c:	e0bffc17 	ldw	r2,-16(fp)
    1f30:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    1f34:	e0bffb17 	ldw	r2,-20(fp)
    1f38:	1000051e 	bne	r2,zero,1f50 <open+0xdc>
    1f3c:	e13ffc17 	ldw	r4,-16(fp)
    1f40:	0001d800 	call	1d80 <alt_file_locked>
    1f44:	e0bffa15 	stw	r2,-24(fp)
    1f48:	e0bffa17 	ldw	r2,-24(fp)
    1f4c:	10001016 	blt	r2,zero,1f90 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    1f50:	e0bff817 	ldw	r2,-32(fp)
    1f54:	10800317 	ldw	r2,12(r2)
    1f58:	10000826 	beq	r2,zero,1f7c <open+0x108>
    1f5c:	e0bff817 	ldw	r2,-32(fp)
    1f60:	10800317 	ldw	r2,12(r2)
    1f64:	e1ffff17 	ldw	r7,-4(fp)
    1f68:	e1bffe17 	ldw	r6,-8(fp)
    1f6c:	e17ffd17 	ldw	r5,-12(fp)
    1f70:	e13ffc17 	ldw	r4,-16(fp)
    1f74:	103ee83a 	callr	r2
    1f78:	00000106 	br	1f80 <open+0x10c>
    1f7c:	0005883a 	mov	r2,zero
    1f80:	e0bffa15 	stw	r2,-24(fp)
    1f84:	00000206 	br	1f90 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
    1f88:	00bffb44 	movi	r2,-19
    1f8c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    1f90:	e0bffa17 	ldw	r2,-24(fp)
    1f94:	1000090e 	bge	r2,zero,1fbc <open+0x148>
  {
    alt_release_fd (index);  
    1f98:	e13ff917 	ldw	r4,-28(fp)
    1f9c:	0001fd40 	call	1fd4 <alt_release_fd>
    ALT_ERRNO = -status;
    1fa0:	0001d300 	call	1d30 <alt_get_errno>
    1fa4:	1007883a 	mov	r3,r2
    1fa8:	e0bffa17 	ldw	r2,-24(fp)
    1fac:	0085c83a 	sub	r2,zero,r2
    1fb0:	18800015 	stw	r2,0(r3)
    return -1;
    1fb4:	00bfffc4 	movi	r2,-1
    1fb8:	00000106 	br	1fc0 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
    1fbc:	e0bff917 	ldw	r2,-28(fp)
}
    1fc0:	e037883a 	mov	sp,fp
    1fc4:	dfc00117 	ldw	ra,4(sp)
    1fc8:	df000017 	ldw	fp,0(sp)
    1fcc:	dec00204 	addi	sp,sp,8
    1fd0:	f800283a 	ret

00001fd4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    1fd4:	defffc04 	addi	sp,sp,-16
    1fd8:	dfc00315 	stw	ra,12(sp)
    1fdc:	df000215 	stw	fp,8(sp)
    1fe0:	dc000115 	stw	r16,4(sp)
    1fe4:	df000204 	addi	fp,sp,8
    1fe8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
    1fec:	e0bffe17 	ldw	r2,-8(fp)
    1ff0:	108000d0 	cmplti	r2,r2,3
    1ff4:	1000111e 	bne	r2,zero,203c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
    1ff8:	04000034 	movhi	r16,0
    1ffc:	840a6704 	addi	r16,r16,10652
    2000:	e0bffe17 	ldw	r2,-8(fp)
    2004:	01400304 	movi	r5,12
    2008:	1009883a 	mov	r4,r2
    200c:	000048c0 	call	48c <__mulsi3>
    2010:	8085883a 	add	r2,r16,r2
    2014:	10800204 	addi	r2,r2,8
    2018:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    201c:	04000034 	movhi	r16,0
    2020:	840a6704 	addi	r16,r16,10652
    2024:	e0bffe17 	ldw	r2,-8(fp)
    2028:	01400304 	movi	r5,12
    202c:	1009883a 	mov	r4,r2
    2030:	000048c0 	call	48c <__mulsi3>
    2034:	8085883a 	add	r2,r16,r2
    2038:	10000015 	stw	zero,0(r2)
  }
}
    203c:	0001883a 	nop
    2040:	e6ffff04 	addi	sp,fp,-4
    2044:	dfc00217 	ldw	ra,8(sp)
    2048:	df000117 	ldw	fp,4(sp)
    204c:	dc000017 	ldw	r16,0(sp)
    2050:	dec00304 	addi	sp,sp,12
    2054:	f800283a 	ret

00002058 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2058:	defffa04 	addi	sp,sp,-24
    205c:	df000515 	stw	fp,20(sp)
    2060:	df000504 	addi	fp,sp,20
    2064:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2068:	0005303a 	rdctl	r2,status
    206c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2070:	e0fffc17 	ldw	r3,-16(fp)
    2074:	00bfff84 	movi	r2,-2
    2078:	1884703a 	and	r2,r3,r2
    207c:	1001703a 	wrctl	status,r2
  
  return context;
    2080:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2084:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2088:	e0bfff17 	ldw	r2,-4(fp)
    208c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2090:	e0bffd17 	ldw	r2,-12(fp)
    2094:	10800017 	ldw	r2,0(r2)
    2098:	e0fffd17 	ldw	r3,-12(fp)
    209c:	18c00117 	ldw	r3,4(r3)
    20a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    20a4:	e0bffd17 	ldw	r2,-12(fp)
    20a8:	10800117 	ldw	r2,4(r2)
    20ac:	e0fffd17 	ldw	r3,-12(fp)
    20b0:	18c00017 	ldw	r3,0(r3)
    20b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    20b8:	e0bffd17 	ldw	r2,-12(fp)
    20bc:	e0fffd17 	ldw	r3,-12(fp)
    20c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    20c4:	e0bffd17 	ldw	r2,-12(fp)
    20c8:	e0fffd17 	ldw	r3,-12(fp)
    20cc:	10c00015 	stw	r3,0(r2)
    20d0:	e0bffb17 	ldw	r2,-20(fp)
    20d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    20d8:	e0bffe17 	ldw	r2,-8(fp)
    20dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    20e0:	0001883a 	nop
    20e4:	e037883a 	mov	sp,fp
    20e8:	df000017 	ldw	fp,0(sp)
    20ec:	dec00104 	addi	sp,sp,4
    20f0:	f800283a 	ret

000020f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    20f4:	defffb04 	addi	sp,sp,-20
    20f8:	dfc00415 	stw	ra,16(sp)
    20fc:	df000315 	stw	fp,12(sp)
    2100:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2104:	d0a00917 	ldw	r2,-32732(gp)
    2108:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    210c:	d0a0ec17 	ldw	r2,-31824(gp)
    2110:	10800044 	addi	r2,r2,1
    2114:	d0a0ec15 	stw	r2,-31824(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2118:	00002e06 	br	21d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    211c:	e0bffd17 	ldw	r2,-12(fp)
    2120:	10800017 	ldw	r2,0(r2)
    2124:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2128:	e0bffd17 	ldw	r2,-12(fp)
    212c:	10800403 	ldbu	r2,16(r2)
    2130:	10803fcc 	andi	r2,r2,255
    2134:	10000426 	beq	r2,zero,2148 <alt_tick+0x54>
    2138:	d0a0ec17 	ldw	r2,-31824(gp)
    213c:	1000021e 	bne	r2,zero,2148 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2140:	e0bffd17 	ldw	r2,-12(fp)
    2144:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2148:	e0bffd17 	ldw	r2,-12(fp)
    214c:	10800217 	ldw	r2,8(r2)
    2150:	d0e0ec17 	ldw	r3,-31824(gp)
    2154:	18801d36 	bltu	r3,r2,21cc <alt_tick+0xd8>
    2158:	e0bffd17 	ldw	r2,-12(fp)
    215c:	10800403 	ldbu	r2,16(r2)
    2160:	10803fcc 	andi	r2,r2,255
    2164:	1000191e 	bne	r2,zero,21cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2168:	e0bffd17 	ldw	r2,-12(fp)
    216c:	10800317 	ldw	r2,12(r2)
    2170:	e0fffd17 	ldw	r3,-12(fp)
    2174:	18c00517 	ldw	r3,20(r3)
    2178:	1809883a 	mov	r4,r3
    217c:	103ee83a 	callr	r2
    2180:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2184:	e0bfff17 	ldw	r2,-4(fp)
    2188:	1000031e 	bne	r2,zero,2198 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    218c:	e13ffd17 	ldw	r4,-12(fp)
    2190:	00020580 	call	2058 <alt_alarm_stop>
    2194:	00000d06 	br	21cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    2198:	e0bffd17 	ldw	r2,-12(fp)
    219c:	10c00217 	ldw	r3,8(r2)
    21a0:	e0bfff17 	ldw	r2,-4(fp)
    21a4:	1887883a 	add	r3,r3,r2
    21a8:	e0bffd17 	ldw	r2,-12(fp)
    21ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    21b0:	e0bffd17 	ldw	r2,-12(fp)
    21b4:	10c00217 	ldw	r3,8(r2)
    21b8:	d0a0ec17 	ldw	r2,-31824(gp)
    21bc:	1880032e 	bgeu	r3,r2,21cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    21c0:	e0bffd17 	ldw	r2,-12(fp)
    21c4:	00c00044 	movi	r3,1
    21c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    21cc:	e0bffe17 	ldw	r2,-8(fp)
    21d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    21d4:	e0fffd17 	ldw	r3,-12(fp)
    21d8:	d0a00904 	addi	r2,gp,-32732
    21dc:	18bfcf1e 	bne	r3,r2,211c <__alt_data_end+0xffff211c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    21e0:	0001883a 	nop
}
    21e4:	0001883a 	nop
    21e8:	e037883a 	mov	sp,fp
    21ec:	dfc00117 	ldw	ra,4(sp)
    21f0:	df000017 	ldw	fp,0(sp)
    21f4:	dec00204 	addi	sp,sp,8
    21f8:	f800283a 	ret

000021fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    21fc:	deffff04 	addi	sp,sp,-4
    2200:	df000015 	stw	fp,0(sp)
    2204:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2208:	000170fa 	wrctl	ienable,zero
}
    220c:	0001883a 	nop
    2210:	e037883a 	mov	sp,fp
    2214:	df000017 	ldw	fp,0(sp)
    2218:	dec00104 	addi	sp,sp,4
    221c:	f800283a 	ret

00002220 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2220:	defffa04 	addi	sp,sp,-24
    2224:	dfc00515 	stw	ra,20(sp)
    2228:	df000415 	stw	fp,16(sp)
    222c:	df000404 	addi	fp,sp,16
    2230:	e13ffe15 	stw	r4,-8(fp)
    2234:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2238:	e0bfff17 	ldw	r2,-4(fp)
    223c:	10800017 	ldw	r2,0(r2)
    2240:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2244:	e13ffe17 	ldw	r4,-8(fp)
    2248:	0000ba80 	call	ba8 <strlen>
    224c:	10800044 	addi	r2,r2,1
    2250:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2254:	00000d06 	br	228c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2258:	e0bffc17 	ldw	r2,-16(fp)
    225c:	10800217 	ldw	r2,8(r2)
    2260:	e0fffd17 	ldw	r3,-12(fp)
    2264:	180d883a 	mov	r6,r3
    2268:	e17ffe17 	ldw	r5,-8(fp)
    226c:	1009883a 	mov	r4,r2
    2270:	00025540 	call	2554 <memcmp>
    2274:	1000021e 	bne	r2,zero,2280 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2278:	e0bffc17 	ldw	r2,-16(fp)
    227c:	00000706 	br	229c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2280:	e0bffc17 	ldw	r2,-16(fp)
    2284:	10800017 	ldw	r2,0(r2)
    2288:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    228c:	e0fffc17 	ldw	r3,-16(fp)
    2290:	e0bfff17 	ldw	r2,-4(fp)
    2294:	18bff01e 	bne	r3,r2,2258 <__alt_data_end+0xffff2258>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2298:	0005883a 	mov	r2,zero
}
    229c:	e037883a 	mov	sp,fp
    22a0:	dfc00117 	ldw	ra,4(sp)
    22a4:	df000017 	ldw	fp,0(sp)
    22a8:	dec00204 	addi	sp,sp,8
    22ac:	f800283a 	ret

000022b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    22b0:	defffb04 	addi	sp,sp,-20
    22b4:	dfc00415 	stw	ra,16(sp)
    22b8:	df000315 	stw	fp,12(sp)
    22bc:	df000304 	addi	fp,sp,12
    22c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    22c4:	00800034 	movhi	r2,0
    22c8:	108ac904 	addi	r2,r2,11044
    22cc:	10800017 	ldw	r2,0(r2)
    22d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    22d4:	00003106 	br	239c <alt_find_file+0xec>
  {
    len = strlen(next->name);
    22d8:	e0bffd17 	ldw	r2,-12(fp)
    22dc:	10800217 	ldw	r2,8(r2)
    22e0:	1009883a 	mov	r4,r2
    22e4:	0000ba80 	call	ba8 <strlen>
    22e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    22ec:	e0bffd17 	ldw	r2,-12(fp)
    22f0:	10c00217 	ldw	r3,8(r2)
    22f4:	e0bffe17 	ldw	r2,-8(fp)
    22f8:	10bfffc4 	addi	r2,r2,-1
    22fc:	1885883a 	add	r2,r3,r2
    2300:	10800003 	ldbu	r2,0(r2)
    2304:	10803fcc 	andi	r2,r2,255
    2308:	1080201c 	xori	r2,r2,128
    230c:	10bfe004 	addi	r2,r2,-128
    2310:	10800bd8 	cmpnei	r2,r2,47
    2314:	1000031e 	bne	r2,zero,2324 <alt_find_file+0x74>
    {
      len -= 1;
    2318:	e0bffe17 	ldw	r2,-8(fp)
    231c:	10bfffc4 	addi	r2,r2,-1
    2320:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2324:	e0bffe17 	ldw	r2,-8(fp)
    2328:	e0ffff17 	ldw	r3,-4(fp)
    232c:	1885883a 	add	r2,r3,r2
    2330:	10800003 	ldbu	r2,0(r2)
    2334:	10803fcc 	andi	r2,r2,255
    2338:	1080201c 	xori	r2,r2,128
    233c:	10bfe004 	addi	r2,r2,-128
    2340:	10800be0 	cmpeqi	r2,r2,47
    2344:	1000081e 	bne	r2,zero,2368 <alt_find_file+0xb8>
    2348:	e0bffe17 	ldw	r2,-8(fp)
    234c:	e0ffff17 	ldw	r3,-4(fp)
    2350:	1885883a 	add	r2,r3,r2
    2354:	10800003 	ldbu	r2,0(r2)
    2358:	10803fcc 	andi	r2,r2,255
    235c:	1080201c 	xori	r2,r2,128
    2360:	10bfe004 	addi	r2,r2,-128
    2364:	10000a1e 	bne	r2,zero,2390 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    2368:	e0bffd17 	ldw	r2,-12(fp)
    236c:	10800217 	ldw	r2,8(r2)
    2370:	e0fffe17 	ldw	r3,-8(fp)
    2374:	180d883a 	mov	r6,r3
    2378:	e17fff17 	ldw	r5,-4(fp)
    237c:	1009883a 	mov	r4,r2
    2380:	00025540 	call	2554 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    2384:	1000021e 	bne	r2,zero,2390 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2388:	e0bffd17 	ldw	r2,-12(fp)
    238c:	00000806 	br	23b0 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
    2390:	e0bffd17 	ldw	r2,-12(fp)
    2394:	10800017 	ldw	r2,0(r2)
    2398:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    239c:	e0fffd17 	ldw	r3,-12(fp)
    23a0:	00800034 	movhi	r2,0
    23a4:	108ac904 	addi	r2,r2,11044
    23a8:	18bfcb1e 	bne	r3,r2,22d8 <__alt_data_end+0xffff22d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    23ac:	0005883a 	mov	r2,zero
}
    23b0:	e037883a 	mov	sp,fp
    23b4:	dfc00117 	ldw	ra,4(sp)
    23b8:	df000017 	ldw	fp,0(sp)
    23bc:	dec00204 	addi	sp,sp,8
    23c0:	f800283a 	ret

000023c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    23c4:	defffa04 	addi	sp,sp,-24
    23c8:	dfc00515 	stw	ra,20(sp)
    23cc:	df000415 	stw	fp,16(sp)
    23d0:	dc000315 	stw	r16,12(sp)
    23d4:	df000404 	addi	fp,sp,16
    23d8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
    23dc:	00bffa04 	movi	r2,-24
    23e0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    23e4:	e03ffc15 	stw	zero,-16(fp)
    23e8:	00002106 	br	2470 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
    23ec:	04000034 	movhi	r16,0
    23f0:	840a6704 	addi	r16,r16,10652
    23f4:	e0bffc17 	ldw	r2,-16(fp)
    23f8:	01400304 	movi	r5,12
    23fc:	1009883a 	mov	r4,r2
    2400:	000048c0 	call	48c <__mulsi3>
    2404:	8085883a 	add	r2,r16,r2
    2408:	10800017 	ldw	r2,0(r2)
    240c:	1000151e 	bne	r2,zero,2464 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
    2410:	04000034 	movhi	r16,0
    2414:	840a6704 	addi	r16,r16,10652
    2418:	e0bffc17 	ldw	r2,-16(fp)
    241c:	01400304 	movi	r5,12
    2420:	1009883a 	mov	r4,r2
    2424:	000048c0 	call	48c <__mulsi3>
    2428:	8085883a 	add	r2,r16,r2
    242c:	e0fffe17 	ldw	r3,-8(fp)
    2430:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2434:	00800034 	movhi	r2,0
    2438:	108acd04 	addi	r2,r2,11060
    243c:	10c00017 	ldw	r3,0(r2)
    2440:	e0bffc17 	ldw	r2,-16(fp)
    2444:	1880040e 	bge	r3,r2,2458 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
    2448:	00800034 	movhi	r2,0
    244c:	108acd04 	addi	r2,r2,11060
    2450:	e0fffc17 	ldw	r3,-16(fp)
    2454:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
    2458:	e0bffc17 	ldw	r2,-16(fp)
    245c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
    2460:	00000606 	br	247c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2464:	e0bffc17 	ldw	r2,-16(fp)
    2468:	10800044 	addi	r2,r2,1
    246c:	e0bffc15 	stw	r2,-16(fp)
    2470:	e0bffc17 	ldw	r2,-16(fp)
    2474:	10800810 	cmplti	r2,r2,32
    2478:	103fdc1e 	bne	r2,zero,23ec <__alt_data_end+0xffff23ec>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    247c:	e0bffd17 	ldw	r2,-12(fp)
}
    2480:	e6ffff04 	addi	sp,fp,-4
    2484:	dfc00217 	ldw	ra,8(sp)
    2488:	df000117 	ldw	fp,4(sp)
    248c:	dc000017 	ldw	r16,0(sp)
    2490:	dec00304 	addi	sp,sp,12
    2494:	f800283a 	ret

00002498 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    2498:	defffe04 	addi	sp,sp,-8
    249c:	df000115 	stw	fp,4(sp)
    24a0:	df000104 	addi	fp,sp,4
    24a4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    24a8:	e0bfff17 	ldw	r2,-4(fp)
    24ac:	10bffe84 	addi	r2,r2,-6
    24b0:	10c00428 	cmpgeui	r3,r2,16
    24b4:	18001a1e 	bne	r3,zero,2520 <alt_exception_cause_generated_bad_addr+0x88>
    24b8:	100690ba 	slli	r3,r2,2
    24bc:	00800034 	movhi	r2,0
    24c0:	10893404 	addi	r2,r2,9424
    24c4:	1885883a 	add	r2,r3,r2
    24c8:	10800017 	ldw	r2,0(r2)
    24cc:	1000683a 	jmp	r2
    24d0:	00002510 	cmplti	zero,zero,148
    24d4:	00002510 	cmplti	zero,zero,148
    24d8:	00002520 	cmpeqi	zero,zero,148
    24dc:	00002520 	cmpeqi	zero,zero,148
    24e0:	00002520 	cmpeqi	zero,zero,148
    24e4:	00002510 	cmplti	zero,zero,148
    24e8:	00002518 	cmpnei	zero,zero,148
    24ec:	00002520 	cmpeqi	zero,zero,148
    24f0:	00002510 	cmplti	zero,zero,148
    24f4:	00002510 	cmplti	zero,zero,148
    24f8:	00002520 	cmpeqi	zero,zero,148
    24fc:	00002510 	cmplti	zero,zero,148
    2500:	00002518 	cmpnei	zero,zero,148
    2504:	00002520 	cmpeqi	zero,zero,148
    2508:	00002520 	cmpeqi	zero,zero,148
    250c:	00002510 	cmplti	zero,zero,148
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2510:	00800044 	movi	r2,1
    2514:	00000306 	br	2524 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2518:	0005883a 	mov	r2,zero
    251c:	00000106 	br	2524 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2520:	0005883a 	mov	r2,zero
  }
}
    2524:	e037883a 	mov	sp,fp
    2528:	df000017 	ldw	fp,0(sp)
    252c:	dec00104 	addi	sp,sp,4
    2530:	f800283a 	ret

00002534 <exit>:
    2534:	defffe04 	addi	sp,sp,-8
    2538:	000b883a 	mov	r5,zero
    253c:	dc000015 	stw	r16,0(sp)
    2540:	dfc00115 	stw	ra,4(sp)
    2544:	2021883a 	mov	r16,r4
    2548:	00025840 	call	2584 <__call_exitprocs>
    254c:	8009883a 	mov	r4,r16
    2550:	00027140 	call	2714 <_exit>

00002554 <memcmp>:
    2554:	218d883a 	add	r6,r4,r6
    2558:	21800826 	beq	r4,r6,257c <memcmp+0x28>
    255c:	20800003 	ldbu	r2,0(r4)
    2560:	28c00003 	ldbu	r3,0(r5)
    2564:	10c00226 	beq	r2,r3,2570 <memcmp+0x1c>
    2568:	10c5c83a 	sub	r2,r2,r3
    256c:	f800283a 	ret
    2570:	21000044 	addi	r4,r4,1
    2574:	29400044 	addi	r5,r5,1
    2578:	003ff706 	br	2558 <__alt_data_end+0xffff2558>
    257c:	0005883a 	mov	r2,zero
    2580:	f800283a 	ret

00002584 <__call_exitprocs>:
    2584:	defff504 	addi	sp,sp,-44
    2588:	dd000515 	stw	r20,20(sp)
    258c:	05000034 	movhi	r20,0
    2590:	dc800315 	stw	r18,12(sp)
    2594:	dfc00a15 	stw	ra,40(sp)
    2598:	df000915 	stw	fp,36(sp)
    259c:	ddc00815 	stw	r23,32(sp)
    25a0:	dd800715 	stw	r22,28(sp)
    25a4:	dd400615 	stw	r21,24(sp)
    25a8:	dcc00415 	stw	r19,16(sp)
    25ac:	dc400215 	stw	r17,8(sp)
    25b0:	dc000115 	stw	r16,4(sp)
    25b4:	d9000015 	stw	r4,0(sp)
    25b8:	2825883a 	mov	r18,r5
    25bc:	a50ac704 	addi	r20,r20,11036
    25c0:	a4400017 	ldw	r17,0(r20)
    25c4:	8cc00c17 	ldw	r19,48(r17)
    25c8:	8c400c04 	addi	r17,r17,48
    25cc:	98004526 	beq	r19,zero,26e4 <__call_exitprocs+0x160>
    25d0:	9c000117 	ldw	r16,4(r19)
    25d4:	00900034 	movhi	r2,16384
    25d8:	10bfffc4 	addi	r2,r2,-1
    25dc:	9d402217 	ldw	r21,136(r19)
    25e0:	85bfffc4 	addi	r22,r16,-1
    25e4:	80a1883a 	add	r16,r16,r2
    25e8:	8421883a 	add	r16,r16,r16
    25ec:	8421883a 	add	r16,r16,r16
    25f0:	ac2f883a 	add	r23,r21,r16
    25f4:	84000204 	addi	r16,r16,8
    25f8:	9c21883a 	add	r16,r19,r16
    25fc:	b0002716 	blt	r22,zero,269c <__call_exitprocs+0x118>
    2600:	90000726 	beq	r18,zero,2620 <__call_exitprocs+0x9c>
    2604:	a800041e 	bne	r21,zero,2618 <__call_exitprocs+0x94>
    2608:	b5bfffc4 	addi	r22,r22,-1
    260c:	bdffff04 	addi	r23,r23,-4
    2610:	843fff04 	addi	r16,r16,-4
    2614:	003ff906 	br	25fc <__alt_data_end+0xffff25fc>
    2618:	b9002017 	ldw	r4,128(r23)
    261c:	913ffa1e 	bne	r18,r4,2608 <__alt_data_end+0xffff2608>
    2620:	99000117 	ldw	r4,4(r19)
    2624:	82000017 	ldw	r8,0(r16)
    2628:	213fffc4 	addi	r4,r4,-1
    262c:	b100021e 	bne	r22,r4,2638 <__call_exitprocs+0xb4>
    2630:	9d800115 	stw	r22,4(r19)
    2634:	00000106 	br	263c <__call_exitprocs+0xb8>
    2638:	80000015 	stw	zero,0(r16)
    263c:	403ff226 	beq	r8,zero,2608 <__alt_data_end+0xffff2608>
    2640:	9f000117 	ldw	fp,4(r19)
    2644:	a8000526 	beq	r21,zero,265c <__call_exitprocs+0xd8>
    2648:	00800044 	movi	r2,1
    264c:	1592983a 	sll	r9,r2,r22
    2650:	a9404017 	ldw	r5,256(r21)
    2654:	494a703a 	and	r5,r9,r5
    2658:	2800021e 	bne	r5,zero,2664 <__call_exitprocs+0xe0>
    265c:	403ee83a 	callr	r8
    2660:	00000906 	br	2688 <__call_exitprocs+0x104>
    2664:	a9004117 	ldw	r4,260(r21)
    2668:	4908703a 	and	r4,r9,r4
    266c:	2000041e 	bne	r4,zero,2680 <__call_exitprocs+0xfc>
    2670:	b9400017 	ldw	r5,0(r23)
    2674:	d9000017 	ldw	r4,0(sp)
    2678:	403ee83a 	callr	r8
    267c:	00000206 	br	2688 <__call_exitprocs+0x104>
    2680:	b9000017 	ldw	r4,0(r23)
    2684:	403ee83a 	callr	r8
    2688:	99000117 	ldw	r4,4(r19)
    268c:	e13fcc1e 	bne	fp,r4,25c0 <__alt_data_end+0xffff25c0>
    2690:	89000017 	ldw	r4,0(r17)
    2694:	993fdc26 	beq	r19,r4,2608 <__alt_data_end+0xffff2608>
    2698:	003fc906 	br	25c0 <__alt_data_end+0xffff25c0>
    269c:	00800034 	movhi	r2,0
    26a0:	10800004 	addi	r2,r2,0
    26a4:	10000f26 	beq	r2,zero,26e4 <__call_exitprocs+0x160>
    26a8:	99400117 	ldw	r5,4(r19)
    26ac:	99000017 	ldw	r4,0(r19)
    26b0:	2800091e 	bne	r5,zero,26d8 <__call_exitprocs+0x154>
    26b4:	20000826 	beq	r4,zero,26d8 <__call_exitprocs+0x154>
    26b8:	89000015 	stw	r4,0(r17)
    26bc:	a8000226 	beq	r21,zero,26c8 <__call_exitprocs+0x144>
    26c0:	a809883a 	mov	r4,r21
    26c4:	00000000 	call	0 <__alt_mem_on_chip_memory>
    26c8:	9809883a 	mov	r4,r19
    26cc:	00000000 	call	0 <__alt_mem_on_chip_memory>
    26d0:	8cc00017 	ldw	r19,0(r17)
    26d4:	003fbd06 	br	25cc <__alt_data_end+0xffff25cc>
    26d8:	9823883a 	mov	r17,r19
    26dc:	2027883a 	mov	r19,r4
    26e0:	003fba06 	br	25cc <__alt_data_end+0xffff25cc>
    26e4:	dfc00a17 	ldw	ra,40(sp)
    26e8:	df000917 	ldw	fp,36(sp)
    26ec:	ddc00817 	ldw	r23,32(sp)
    26f0:	dd800717 	ldw	r22,28(sp)
    26f4:	dd400617 	ldw	r21,24(sp)
    26f8:	dd000517 	ldw	r20,20(sp)
    26fc:	dcc00417 	ldw	r19,16(sp)
    2700:	dc800317 	ldw	r18,12(sp)
    2704:	dc400217 	ldw	r17,8(sp)
    2708:	dc000117 	ldw	r16,4(sp)
    270c:	dec00b04 	addi	sp,sp,44
    2710:	f800283a 	ret

00002714 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    2714:	defffd04 	addi	sp,sp,-12
    2718:	df000215 	stw	fp,8(sp)
    271c:	df000204 	addi	fp,sp,8
    2720:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    2724:	0001883a 	nop
    2728:	e0bfff17 	ldw	r2,-4(fp)
    272c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    2730:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    2734:	10000226 	beq	r2,zero,2740 <_exit+0x2c>
    ALT_SIM_FAIL();
    2738:	002af070 	cmpltui	zero,zero,43969
    273c:	00000106 	br	2744 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    2740:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    2744:	003fff06 	br	2744 <__alt_data_end+0xffff2744>
