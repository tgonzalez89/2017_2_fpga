// p4_parte1_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 16.0 211

`timescale 1 ps / 1 ps
module p4_parte1_mm_interconnect_0 (
		input  wire        clk_source_clk_clk,                                        //                                      clk_source_clk.clk
		input  wire        packets_to_master_0_clk_reset_reset_bridge_in_reset_reset, // packets_to_master_0_clk_reset_reset_bridge_in_reset.reset
		input  wire [31:0] i2c_avalon_master_address,                                 //                                   i2c_avalon_master.address
		output wire        i2c_avalon_master_waitrequest,                             //                                                    .waitrequest
		input  wire [3:0]  i2c_avalon_master_byteenable,                              //                                                    .byteenable
		input  wire        i2c_avalon_master_read,                                    //                                                    .read
		output wire [31:0] i2c_avalon_master_readdata,                                //                                                    .readdata
		output wire        i2c_avalon_master_readdatavalid,                           //                                                    .readdatavalid
		input  wire        i2c_avalon_master_write,                                   //                                                    .write
		input  wire [31:0] i2c_avalon_master_writedata,                               //                                                    .writedata
		input  wire [16:0] nios_ii_processor_data_master_address,                     //                       nios_ii_processor_data_master.address
		output wire        nios_ii_processor_data_master_waitrequest,                 //                                                    .waitrequest
		input  wire [3:0]  nios_ii_processor_data_master_byteenable,                  //                                                    .byteenable
		input  wire        nios_ii_processor_data_master_read,                        //                                                    .read
		output wire [31:0] nios_ii_processor_data_master_readdata,                    //                                                    .readdata
		input  wire        nios_ii_processor_data_master_write,                       //                                                    .write
		input  wire [31:0] nios_ii_processor_data_master_writedata,                   //                                                    .writedata
		input  wire        nios_ii_processor_data_master_debugaccess,                 //                                                    .debugaccess
		input  wire [16:0] nios_ii_processor_instruction_master_address,              //                nios_ii_processor_instruction_master.address
		output wire        nios_ii_processor_instruction_master_waitrequest,          //                                                    .waitrequest
		input  wire        nios_ii_processor_instruction_master_read,                 //                                                    .read
		output wire [31:0] nios_ii_processor_instruction_master_readdata,             //                                                    .readdata
		input  wire [31:0] packets_to_master_0_avalon_master_address,                 //                   packets_to_master_0_avalon_master.address
		output wire        packets_to_master_0_avalon_master_waitrequest,             //                                                    .waitrequest
		input  wire [3:0]  packets_to_master_0_avalon_master_byteenable,              //                                                    .byteenable
		input  wire        packets_to_master_0_avalon_master_read,                    //                                                    .read
		output wire [31:0] packets_to_master_0_avalon_master_readdata,                //                                                    .readdata
		output wire        packets_to_master_0_avalon_master_readdatavalid,           //                                                    .readdatavalid
		input  wire        packets_to_master_0_avalon_master_write,                   //                                                    .write
		input  wire [31:0] packets_to_master_0_avalon_master_writedata,               //                                                    .writedata
		input  wire [31:0] packets_to_master_1_avalon_master_address,                 //                   packets_to_master_1_avalon_master.address
		output wire        packets_to_master_1_avalon_master_waitrequest,             //                                                    .waitrequest
		input  wire [3:0]  packets_to_master_1_avalon_master_byteenable,              //                                                    .byteenable
		input  wire        packets_to_master_1_avalon_master_read,                    //                                                    .read
		output wire [31:0] packets_to_master_1_avalon_master_readdata,                //                                                    .readdata
		output wire        packets_to_master_1_avalon_master_readdatavalid,           //                                                    .readdatavalid
		input  wire        packets_to_master_1_avalon_master_write,                   //                                                    .write
		input  wire [31:0] packets_to_master_1_avalon_master_writedata,               //                                                    .writedata
		output wire [8:0]  nios_ii_processor_debug_mem_slave_address,                 //                   nios_ii_processor_debug_mem_slave.address
		output wire        nios_ii_processor_debug_mem_slave_write,                   //                                                    .write
		output wire        nios_ii_processor_debug_mem_slave_read,                    //                                                    .read
		input  wire [31:0] nios_ii_processor_debug_mem_slave_readdata,                //                                                    .readdata
		output wire [31:0] nios_ii_processor_debug_mem_slave_writedata,               //                                                    .writedata
		output wire [3:0]  nios_ii_processor_debug_mem_slave_byteenable,              //                                                    .byteenable
		input  wire        nios_ii_processor_debug_mem_slave_waitrequest,             //                                                    .waitrequest
		output wire        nios_ii_processor_debug_mem_slave_debugaccess,             //                                                    .debugaccess
		output wire [8:0]  on_chip_memory_s1_address,                                 //                                   on_chip_memory_s1.address
		output wire        on_chip_memory_s1_write,                                   //                                                    .write
		input  wire [15:0] on_chip_memory_s1_readdata,                                //                                                    .readdata
		output wire [15:0] on_chip_memory_s1_writedata,                               //                                                    .writedata
		output wire [1:0]  on_chip_memory_s1_byteenable,                              //                                                    .byteenable
		output wire        on_chip_memory_s1_chipselect,                              //                                                    .chipselect
		output wire        on_chip_memory_s1_clken,                                   //                                                    .clken
		output wire [5:0]  pll_reconfig_0_mgmt_avalon_slave_address,                  //                    pll_reconfig_0_mgmt_avalon_slave.address
		output wire        pll_reconfig_0_mgmt_avalon_slave_write,                    //                                                    .write
		output wire        pll_reconfig_0_mgmt_avalon_slave_read,                     //                                                    .read
		input  wire [31:0] pll_reconfig_0_mgmt_avalon_slave_readdata,                 //                                                    .readdata
		output wire [31:0] pll_reconfig_0_mgmt_avalon_slave_writedata,                //                                                    .writedata
		input  wire        pll_reconfig_0_mgmt_avalon_slave_waitrequest,              //                                                    .waitrequest
		output wire [2:0]  spi_spi_control_port_address,                              //                                spi_spi_control_port.address
		output wire        spi_spi_control_port_write,                                //                                                    .write
		output wire        spi_spi_control_port_read,                                 //                                                    .read
		input  wire [15:0] spi_spi_control_port_readdata,                             //                                                    .readdata
		output wire [15:0] spi_spi_control_port_writedata,                            //                                                    .writedata
		output wire        spi_spi_control_port_chipselect,                           //                                                    .chipselect
		output wire [2:0]  wdt_s1_address,                                            //                                              wdt_s1.address
		output wire        wdt_s1_write,                                              //                                                    .write
		input  wire [15:0] wdt_s1_readdata,                                           //                                                    .readdata
		output wire [15:0] wdt_s1_writedata,                                          //                                                    .writedata
		output wire        wdt_s1_chipselect                                          //                                                    .chipselect
	);

	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest;      // packets_to_master_0_avalon_master_agent:av_waitrequest -> packets_to_master_0_avalon_master_translator:uav_waitrequest
	wire   [31:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdata;         // packets_to_master_0_avalon_master_agent:av_readdata -> packets_to_master_0_avalon_master_translator:uav_readdata
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess;      // packets_to_master_0_avalon_master_translator:uav_debugaccess -> packets_to_master_0_avalon_master_agent:av_debugaccess
	wire   [31:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_address;          // packets_to_master_0_avalon_master_translator:uav_address -> packets_to_master_0_avalon_master_agent:av_address
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_read;             // packets_to_master_0_avalon_master_translator:uav_read -> packets_to_master_0_avalon_master_agent:av_read
	wire    [3:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_byteenable;       // packets_to_master_0_avalon_master_translator:uav_byteenable -> packets_to_master_0_avalon_master_agent:av_byteenable
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid;    // packets_to_master_0_avalon_master_agent:av_readdatavalid -> packets_to_master_0_avalon_master_translator:uav_readdatavalid
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_lock;             // packets_to_master_0_avalon_master_translator:uav_lock -> packets_to_master_0_avalon_master_agent:av_lock
	wire          packets_to_master_0_avalon_master_translator_avalon_universal_master_0_write;            // packets_to_master_0_avalon_master_translator:uav_write -> packets_to_master_0_avalon_master_agent:av_write
	wire   [31:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_writedata;        // packets_to_master_0_avalon_master_translator:uav_writedata -> packets_to_master_0_avalon_master_agent:av_writedata
	wire    [2:0] packets_to_master_0_avalon_master_translator_avalon_universal_master_0_burstcount;       // packets_to_master_0_avalon_master_translator:uav_burstcount -> packets_to_master_0_avalon_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                       // rsp_mux:src_valid -> packets_to_master_0_avalon_master_agent:rp_valid
	wire  [107:0] rsp_mux_src_data;                                                                        // rsp_mux:src_data -> packets_to_master_0_avalon_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                       // packets_to_master_0_avalon_master_agent:rp_ready -> rsp_mux:src_ready
	wire    [4:0] rsp_mux_src_channel;                                                                     // rsp_mux:src_channel -> packets_to_master_0_avalon_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                               // rsp_mux:src_startofpacket -> packets_to_master_0_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                 // rsp_mux:src_endofpacket -> packets_to_master_0_avalon_master_agent:rp_endofpacket
	wire          packets_to_master_1_avalon_master_translator_avalon_universal_master_0_waitrequest;      // packets_to_master_1_avalon_master_agent:av_waitrequest -> packets_to_master_1_avalon_master_translator:uav_waitrequest
	wire   [31:0] packets_to_master_1_avalon_master_translator_avalon_universal_master_0_readdata;         // packets_to_master_1_avalon_master_agent:av_readdata -> packets_to_master_1_avalon_master_translator:uav_readdata
	wire          packets_to_master_1_avalon_master_translator_avalon_universal_master_0_debugaccess;      // packets_to_master_1_avalon_master_translator:uav_debugaccess -> packets_to_master_1_avalon_master_agent:av_debugaccess
	wire   [31:0] packets_to_master_1_avalon_master_translator_avalon_universal_master_0_address;          // packets_to_master_1_avalon_master_translator:uav_address -> packets_to_master_1_avalon_master_agent:av_address
	wire          packets_to_master_1_avalon_master_translator_avalon_universal_master_0_read;             // packets_to_master_1_avalon_master_translator:uav_read -> packets_to_master_1_avalon_master_agent:av_read
	wire    [3:0] packets_to_master_1_avalon_master_translator_avalon_universal_master_0_byteenable;       // packets_to_master_1_avalon_master_translator:uav_byteenable -> packets_to_master_1_avalon_master_agent:av_byteenable
	wire          packets_to_master_1_avalon_master_translator_avalon_universal_master_0_readdatavalid;    // packets_to_master_1_avalon_master_agent:av_readdatavalid -> packets_to_master_1_avalon_master_translator:uav_readdatavalid
	wire          packets_to_master_1_avalon_master_translator_avalon_universal_master_0_lock;             // packets_to_master_1_avalon_master_translator:uav_lock -> packets_to_master_1_avalon_master_agent:av_lock
	wire          packets_to_master_1_avalon_master_translator_avalon_universal_master_0_write;            // packets_to_master_1_avalon_master_translator:uav_write -> packets_to_master_1_avalon_master_agent:av_write
	wire   [31:0] packets_to_master_1_avalon_master_translator_avalon_universal_master_0_writedata;        // packets_to_master_1_avalon_master_translator:uav_writedata -> packets_to_master_1_avalon_master_agent:av_writedata
	wire    [2:0] packets_to_master_1_avalon_master_translator_avalon_universal_master_0_burstcount;       // packets_to_master_1_avalon_master_translator:uav_burstcount -> packets_to_master_1_avalon_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                   // rsp_mux_001:src_valid -> packets_to_master_1_avalon_master_agent:rp_valid
	wire  [107:0] rsp_mux_001_src_data;                                                                    // rsp_mux_001:src_data -> packets_to_master_1_avalon_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                   // packets_to_master_1_avalon_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire    [4:0] rsp_mux_001_src_channel;                                                                 // rsp_mux_001:src_channel -> packets_to_master_1_avalon_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                           // rsp_mux_001:src_startofpacket -> packets_to_master_1_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                             // rsp_mux_001:src_endofpacket -> packets_to_master_1_avalon_master_agent:rp_endofpacket
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_waitrequest;          // nios_ii_processor_data_master_agent:av_waitrequest -> nios_ii_processor_data_master_translator:uav_waitrequest
	wire   [31:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_readdata;             // nios_ii_processor_data_master_agent:av_readdata -> nios_ii_processor_data_master_translator:uav_readdata
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_debugaccess;          // nios_ii_processor_data_master_translator:uav_debugaccess -> nios_ii_processor_data_master_agent:av_debugaccess
	wire   [31:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_address;              // nios_ii_processor_data_master_translator:uav_address -> nios_ii_processor_data_master_agent:av_address
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_read;                 // nios_ii_processor_data_master_translator:uav_read -> nios_ii_processor_data_master_agent:av_read
	wire    [3:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_byteenable;           // nios_ii_processor_data_master_translator:uav_byteenable -> nios_ii_processor_data_master_agent:av_byteenable
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios_ii_processor_data_master_agent:av_readdatavalid -> nios_ii_processor_data_master_translator:uav_readdatavalid
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_lock;                 // nios_ii_processor_data_master_translator:uav_lock -> nios_ii_processor_data_master_agent:av_lock
	wire          nios_ii_processor_data_master_translator_avalon_universal_master_0_write;                // nios_ii_processor_data_master_translator:uav_write -> nios_ii_processor_data_master_agent:av_write
	wire   [31:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_writedata;            // nios_ii_processor_data_master_translator:uav_writedata -> nios_ii_processor_data_master_agent:av_writedata
	wire    [2:0] nios_ii_processor_data_master_translator_avalon_universal_master_0_burstcount;           // nios_ii_processor_data_master_translator:uav_burstcount -> nios_ii_processor_data_master_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                   // rsp_mux_002:src_valid -> nios_ii_processor_data_master_agent:rp_valid
	wire  [107:0] rsp_mux_002_src_data;                                                                    // rsp_mux_002:src_data -> nios_ii_processor_data_master_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                   // nios_ii_processor_data_master_agent:rp_ready -> rsp_mux_002:src_ready
	wire    [4:0] rsp_mux_002_src_channel;                                                                 // rsp_mux_002:src_channel -> nios_ii_processor_data_master_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                           // rsp_mux_002:src_startofpacket -> nios_ii_processor_data_master_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                             // rsp_mux_002:src_endofpacket -> nios_ii_processor_data_master_agent:rp_endofpacket
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios_ii_processor_instruction_master_agent:av_waitrequest -> nios_ii_processor_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdata;      // nios_ii_processor_instruction_master_agent:av_readdata -> nios_ii_processor_instruction_master_translator:uav_readdata
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios_ii_processor_instruction_master_translator:uav_debugaccess -> nios_ii_processor_instruction_master_agent:av_debugaccess
	wire   [31:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_address;       // nios_ii_processor_instruction_master_translator:uav_address -> nios_ii_processor_instruction_master_agent:av_address
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_read;          // nios_ii_processor_instruction_master_translator:uav_read -> nios_ii_processor_instruction_master_agent:av_read
	wire    [3:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios_ii_processor_instruction_master_translator:uav_byteenable -> nios_ii_processor_instruction_master_agent:av_byteenable
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios_ii_processor_instruction_master_agent:av_readdatavalid -> nios_ii_processor_instruction_master_translator:uav_readdatavalid
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_lock;          // nios_ii_processor_instruction_master_translator:uav_lock -> nios_ii_processor_instruction_master_agent:av_lock
	wire          nios_ii_processor_instruction_master_translator_avalon_universal_master_0_write;         // nios_ii_processor_instruction_master_translator:uav_write -> nios_ii_processor_instruction_master_agent:av_write
	wire   [31:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_writedata;     // nios_ii_processor_instruction_master_translator:uav_writedata -> nios_ii_processor_instruction_master_agent:av_writedata
	wire    [2:0] nios_ii_processor_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios_ii_processor_instruction_master_translator:uav_burstcount -> nios_ii_processor_instruction_master_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                   // rsp_mux_003:src_valid -> nios_ii_processor_instruction_master_agent:rp_valid
	wire  [107:0] rsp_mux_003_src_data;                                                                    // rsp_mux_003:src_data -> nios_ii_processor_instruction_master_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                   // nios_ii_processor_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	wire    [4:0] rsp_mux_003_src_channel;                                                                 // rsp_mux_003:src_channel -> nios_ii_processor_instruction_master_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                           // rsp_mux_003:src_startofpacket -> nios_ii_processor_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                             // rsp_mux_003:src_endofpacket -> nios_ii_processor_instruction_master_agent:rp_endofpacket
	wire          i2c_avalon_master_translator_avalon_universal_master_0_waitrequest;                      // i2c_avalon_master_agent:av_waitrequest -> i2c_avalon_master_translator:uav_waitrequest
	wire   [31:0] i2c_avalon_master_translator_avalon_universal_master_0_readdata;                         // i2c_avalon_master_agent:av_readdata -> i2c_avalon_master_translator:uav_readdata
	wire          i2c_avalon_master_translator_avalon_universal_master_0_debugaccess;                      // i2c_avalon_master_translator:uav_debugaccess -> i2c_avalon_master_agent:av_debugaccess
	wire   [31:0] i2c_avalon_master_translator_avalon_universal_master_0_address;                          // i2c_avalon_master_translator:uav_address -> i2c_avalon_master_agent:av_address
	wire          i2c_avalon_master_translator_avalon_universal_master_0_read;                             // i2c_avalon_master_translator:uav_read -> i2c_avalon_master_agent:av_read
	wire    [3:0] i2c_avalon_master_translator_avalon_universal_master_0_byteenable;                       // i2c_avalon_master_translator:uav_byteenable -> i2c_avalon_master_agent:av_byteenable
	wire          i2c_avalon_master_translator_avalon_universal_master_0_readdatavalid;                    // i2c_avalon_master_agent:av_readdatavalid -> i2c_avalon_master_translator:uav_readdatavalid
	wire          i2c_avalon_master_translator_avalon_universal_master_0_lock;                             // i2c_avalon_master_translator:uav_lock -> i2c_avalon_master_agent:av_lock
	wire          i2c_avalon_master_translator_avalon_universal_master_0_write;                            // i2c_avalon_master_translator:uav_write -> i2c_avalon_master_agent:av_write
	wire   [31:0] i2c_avalon_master_translator_avalon_universal_master_0_writedata;                        // i2c_avalon_master_translator:uav_writedata -> i2c_avalon_master_agent:av_writedata
	wire    [2:0] i2c_avalon_master_translator_avalon_universal_master_0_burstcount;                       // i2c_avalon_master_translator:uav_burstcount -> i2c_avalon_master_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                   // rsp_mux_004:src_valid -> i2c_avalon_master_agent:rp_valid
	wire  [107:0] rsp_mux_004_src_data;                                                                    // rsp_mux_004:src_data -> i2c_avalon_master_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                   // i2c_avalon_master_agent:rp_ready -> rsp_mux_004:src_ready
	wire    [4:0] rsp_mux_004_src_channel;                                                                 // rsp_mux_004:src_channel -> i2c_avalon_master_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                           // rsp_mux_004:src_startofpacket -> i2c_avalon_master_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                             // rsp_mux_004:src_endofpacket -> i2c_avalon_master_agent:rp_endofpacket
	wire   [31:0] pll_reconfig_0_mgmt_avalon_slave_agent_m0_readdata;                                      // pll_reconfig_0_mgmt_avalon_slave_translator:uav_readdata -> pll_reconfig_0_mgmt_avalon_slave_agent:m0_readdata
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_m0_waitrequest;                                   // pll_reconfig_0_mgmt_avalon_slave_translator:uav_waitrequest -> pll_reconfig_0_mgmt_avalon_slave_agent:m0_waitrequest
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_m0_debugaccess;                                   // pll_reconfig_0_mgmt_avalon_slave_agent:m0_debugaccess -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_debugaccess
	wire   [31:0] pll_reconfig_0_mgmt_avalon_slave_agent_m0_address;                                       // pll_reconfig_0_mgmt_avalon_slave_agent:m0_address -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_address
	wire    [3:0] pll_reconfig_0_mgmt_avalon_slave_agent_m0_byteenable;                                    // pll_reconfig_0_mgmt_avalon_slave_agent:m0_byteenable -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_byteenable
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_m0_read;                                          // pll_reconfig_0_mgmt_avalon_slave_agent:m0_read -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_read
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_m0_readdatavalid;                                 // pll_reconfig_0_mgmt_avalon_slave_translator:uav_readdatavalid -> pll_reconfig_0_mgmt_avalon_slave_agent:m0_readdatavalid
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_m0_lock;                                          // pll_reconfig_0_mgmt_avalon_slave_agent:m0_lock -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_lock
	wire   [31:0] pll_reconfig_0_mgmt_avalon_slave_agent_m0_writedata;                                     // pll_reconfig_0_mgmt_avalon_slave_agent:m0_writedata -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_writedata
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_m0_write;                                         // pll_reconfig_0_mgmt_avalon_slave_agent:m0_write -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_write
	wire    [2:0] pll_reconfig_0_mgmt_avalon_slave_agent_m0_burstcount;                                    // pll_reconfig_0_mgmt_avalon_slave_agent:m0_burstcount -> pll_reconfig_0_mgmt_avalon_slave_translator:uav_burstcount
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_valid;                                  // pll_reconfig_0_mgmt_avalon_slave_agent:rf_source_valid -> pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:in_valid
	wire  [108:0] pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_data;                                   // pll_reconfig_0_mgmt_avalon_slave_agent:rf_source_data -> pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:in_data
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_ready;                                  // pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:in_ready -> pll_reconfig_0_mgmt_avalon_slave_agent:rf_source_ready
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_startofpacket;                          // pll_reconfig_0_mgmt_avalon_slave_agent:rf_source_startofpacket -> pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:in_startofpacket
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_endofpacket;                            // pll_reconfig_0_mgmt_avalon_slave_agent:rf_source_endofpacket -> pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:in_endofpacket
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_valid;                               // pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:out_valid -> pll_reconfig_0_mgmt_avalon_slave_agent:rf_sink_valid
	wire  [108:0] pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_data;                                // pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:out_data -> pll_reconfig_0_mgmt_avalon_slave_agent:rf_sink_data
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_ready;                               // pll_reconfig_0_mgmt_avalon_slave_agent:rf_sink_ready -> pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:out_ready
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket;                       // pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:out_startofpacket -> pll_reconfig_0_mgmt_avalon_slave_agent:rf_sink_startofpacket
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket;                         // pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo:out_endofpacket -> pll_reconfig_0_mgmt_avalon_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_src_valid;                                                                       // cmd_mux:src_valid -> pll_reconfig_0_mgmt_avalon_slave_agent:cp_valid
	wire  [107:0] cmd_mux_src_data;                                                                        // cmd_mux:src_data -> pll_reconfig_0_mgmt_avalon_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                       // pll_reconfig_0_mgmt_avalon_slave_agent:cp_ready -> cmd_mux:src_ready
	wire    [4:0] cmd_mux_src_channel;                                                                     // cmd_mux:src_channel -> pll_reconfig_0_mgmt_avalon_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                               // cmd_mux:src_startofpacket -> pll_reconfig_0_mgmt_avalon_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                 // cmd_mux:src_endofpacket -> pll_reconfig_0_mgmt_avalon_slave_agent:cp_endofpacket
	wire   [31:0] nios_ii_processor_debug_mem_slave_agent_m0_readdata;                                     // nios_ii_processor_debug_mem_slave_translator:uav_readdata -> nios_ii_processor_debug_mem_slave_agent:m0_readdata
	wire          nios_ii_processor_debug_mem_slave_agent_m0_waitrequest;                                  // nios_ii_processor_debug_mem_slave_translator:uav_waitrequest -> nios_ii_processor_debug_mem_slave_agent:m0_waitrequest
	wire          nios_ii_processor_debug_mem_slave_agent_m0_debugaccess;                                  // nios_ii_processor_debug_mem_slave_agent:m0_debugaccess -> nios_ii_processor_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios_ii_processor_debug_mem_slave_agent_m0_address;                                      // nios_ii_processor_debug_mem_slave_agent:m0_address -> nios_ii_processor_debug_mem_slave_translator:uav_address
	wire    [3:0] nios_ii_processor_debug_mem_slave_agent_m0_byteenable;                                   // nios_ii_processor_debug_mem_slave_agent:m0_byteenable -> nios_ii_processor_debug_mem_slave_translator:uav_byteenable
	wire          nios_ii_processor_debug_mem_slave_agent_m0_read;                                         // nios_ii_processor_debug_mem_slave_agent:m0_read -> nios_ii_processor_debug_mem_slave_translator:uav_read
	wire          nios_ii_processor_debug_mem_slave_agent_m0_readdatavalid;                                // nios_ii_processor_debug_mem_slave_translator:uav_readdatavalid -> nios_ii_processor_debug_mem_slave_agent:m0_readdatavalid
	wire          nios_ii_processor_debug_mem_slave_agent_m0_lock;                                         // nios_ii_processor_debug_mem_slave_agent:m0_lock -> nios_ii_processor_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios_ii_processor_debug_mem_slave_agent_m0_writedata;                                    // nios_ii_processor_debug_mem_slave_agent:m0_writedata -> nios_ii_processor_debug_mem_slave_translator:uav_writedata
	wire          nios_ii_processor_debug_mem_slave_agent_m0_write;                                        // nios_ii_processor_debug_mem_slave_agent:m0_write -> nios_ii_processor_debug_mem_slave_translator:uav_write
	wire    [2:0] nios_ii_processor_debug_mem_slave_agent_m0_burstcount;                                   // nios_ii_processor_debug_mem_slave_agent:m0_burstcount -> nios_ii_processor_debug_mem_slave_translator:uav_burstcount
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_valid;                                 // nios_ii_processor_debug_mem_slave_agent:rf_source_valid -> nios_ii_processor_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [108:0] nios_ii_processor_debug_mem_slave_agent_rf_source_data;                                  // nios_ii_processor_debug_mem_slave_agent:rf_source_data -> nios_ii_processor_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_ready;                                 // nios_ii_processor_debug_mem_slave_agent_rsp_fifo:in_ready -> nios_ii_processor_debug_mem_slave_agent:rf_source_ready
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_startofpacket;                         // nios_ii_processor_debug_mem_slave_agent:rf_source_startofpacket -> nios_ii_processor_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rf_source_endofpacket;                           // nios_ii_processor_debug_mem_slave_agent:rf_source_endofpacket -> nios_ii_processor_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_valid;                              // nios_ii_processor_debug_mem_slave_agent_rsp_fifo:out_valid -> nios_ii_processor_debug_mem_slave_agent:rf_sink_valid
	wire  [108:0] nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_data;                               // nios_ii_processor_debug_mem_slave_agent_rsp_fifo:out_data -> nios_ii_processor_debug_mem_slave_agent:rf_sink_data
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_ready;                              // nios_ii_processor_debug_mem_slave_agent:rf_sink_ready -> nios_ii_processor_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                      // nios_ii_processor_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios_ii_processor_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                        // nios_ii_processor_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios_ii_processor_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                   // cmd_mux_001:src_valid -> nios_ii_processor_debug_mem_slave_agent:cp_valid
	wire  [107:0] cmd_mux_001_src_data;                                                                    // cmd_mux_001:src_data -> nios_ii_processor_debug_mem_slave_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                   // nios_ii_processor_debug_mem_slave_agent:cp_ready -> cmd_mux_001:src_ready
	wire    [4:0] cmd_mux_001_src_channel;                                                                 // cmd_mux_001:src_channel -> nios_ii_processor_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                           // cmd_mux_001:src_startofpacket -> nios_ii_processor_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                             // cmd_mux_001:src_endofpacket -> nios_ii_processor_debug_mem_slave_agent:cp_endofpacket
	wire   [31:0] wdt_s1_agent_m0_readdata;                                                                // wdt_s1_translator:uav_readdata -> wdt_s1_agent:m0_readdata
	wire          wdt_s1_agent_m0_waitrequest;                                                             // wdt_s1_translator:uav_waitrequest -> wdt_s1_agent:m0_waitrequest
	wire          wdt_s1_agent_m0_debugaccess;                                                             // wdt_s1_agent:m0_debugaccess -> wdt_s1_translator:uav_debugaccess
	wire   [31:0] wdt_s1_agent_m0_address;                                                                 // wdt_s1_agent:m0_address -> wdt_s1_translator:uav_address
	wire    [3:0] wdt_s1_agent_m0_byteenable;                                                              // wdt_s1_agent:m0_byteenable -> wdt_s1_translator:uav_byteenable
	wire          wdt_s1_agent_m0_read;                                                                    // wdt_s1_agent:m0_read -> wdt_s1_translator:uav_read
	wire          wdt_s1_agent_m0_readdatavalid;                                                           // wdt_s1_translator:uav_readdatavalid -> wdt_s1_agent:m0_readdatavalid
	wire          wdt_s1_agent_m0_lock;                                                                    // wdt_s1_agent:m0_lock -> wdt_s1_translator:uav_lock
	wire   [31:0] wdt_s1_agent_m0_writedata;                                                               // wdt_s1_agent:m0_writedata -> wdt_s1_translator:uav_writedata
	wire          wdt_s1_agent_m0_write;                                                                   // wdt_s1_agent:m0_write -> wdt_s1_translator:uav_write
	wire    [2:0] wdt_s1_agent_m0_burstcount;                                                              // wdt_s1_agent:m0_burstcount -> wdt_s1_translator:uav_burstcount
	wire          wdt_s1_agent_rf_source_valid;                                                            // wdt_s1_agent:rf_source_valid -> wdt_s1_agent_rsp_fifo:in_valid
	wire  [108:0] wdt_s1_agent_rf_source_data;                                                             // wdt_s1_agent:rf_source_data -> wdt_s1_agent_rsp_fifo:in_data
	wire          wdt_s1_agent_rf_source_ready;                                                            // wdt_s1_agent_rsp_fifo:in_ready -> wdt_s1_agent:rf_source_ready
	wire          wdt_s1_agent_rf_source_startofpacket;                                                    // wdt_s1_agent:rf_source_startofpacket -> wdt_s1_agent_rsp_fifo:in_startofpacket
	wire          wdt_s1_agent_rf_source_endofpacket;                                                      // wdt_s1_agent:rf_source_endofpacket -> wdt_s1_agent_rsp_fifo:in_endofpacket
	wire          wdt_s1_agent_rsp_fifo_out_valid;                                                         // wdt_s1_agent_rsp_fifo:out_valid -> wdt_s1_agent:rf_sink_valid
	wire  [108:0] wdt_s1_agent_rsp_fifo_out_data;                                                          // wdt_s1_agent_rsp_fifo:out_data -> wdt_s1_agent:rf_sink_data
	wire          wdt_s1_agent_rsp_fifo_out_ready;                                                         // wdt_s1_agent:rf_sink_ready -> wdt_s1_agent_rsp_fifo:out_ready
	wire          wdt_s1_agent_rsp_fifo_out_startofpacket;                                                 // wdt_s1_agent_rsp_fifo:out_startofpacket -> wdt_s1_agent:rf_sink_startofpacket
	wire          wdt_s1_agent_rsp_fifo_out_endofpacket;                                                   // wdt_s1_agent_rsp_fifo:out_endofpacket -> wdt_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                   // cmd_mux_002:src_valid -> wdt_s1_agent:cp_valid
	wire  [107:0] cmd_mux_002_src_data;                                                                    // cmd_mux_002:src_data -> wdt_s1_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                   // wdt_s1_agent:cp_ready -> cmd_mux_002:src_ready
	wire    [4:0] cmd_mux_002_src_channel;                                                                 // cmd_mux_002:src_channel -> wdt_s1_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                           // cmd_mux_002:src_startofpacket -> wdt_s1_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                             // cmd_mux_002:src_endofpacket -> wdt_s1_agent:cp_endofpacket
	wire   [15:0] on_chip_memory_s1_agent_m0_readdata;                                                     // on_chip_memory_s1_translator:uav_readdata -> on_chip_memory_s1_agent:m0_readdata
	wire          on_chip_memory_s1_agent_m0_waitrequest;                                                  // on_chip_memory_s1_translator:uav_waitrequest -> on_chip_memory_s1_agent:m0_waitrequest
	wire          on_chip_memory_s1_agent_m0_debugaccess;                                                  // on_chip_memory_s1_agent:m0_debugaccess -> on_chip_memory_s1_translator:uav_debugaccess
	wire   [31:0] on_chip_memory_s1_agent_m0_address;                                                      // on_chip_memory_s1_agent:m0_address -> on_chip_memory_s1_translator:uav_address
	wire    [1:0] on_chip_memory_s1_agent_m0_byteenable;                                                   // on_chip_memory_s1_agent:m0_byteenable -> on_chip_memory_s1_translator:uav_byteenable
	wire          on_chip_memory_s1_agent_m0_read;                                                         // on_chip_memory_s1_agent:m0_read -> on_chip_memory_s1_translator:uav_read
	wire          on_chip_memory_s1_agent_m0_readdatavalid;                                                // on_chip_memory_s1_translator:uav_readdatavalid -> on_chip_memory_s1_agent:m0_readdatavalid
	wire          on_chip_memory_s1_agent_m0_lock;                                                         // on_chip_memory_s1_agent:m0_lock -> on_chip_memory_s1_translator:uav_lock
	wire   [15:0] on_chip_memory_s1_agent_m0_writedata;                                                    // on_chip_memory_s1_agent:m0_writedata -> on_chip_memory_s1_translator:uav_writedata
	wire          on_chip_memory_s1_agent_m0_write;                                                        // on_chip_memory_s1_agent:m0_write -> on_chip_memory_s1_translator:uav_write
	wire    [1:0] on_chip_memory_s1_agent_m0_burstcount;                                                   // on_chip_memory_s1_agent:m0_burstcount -> on_chip_memory_s1_translator:uav_burstcount
	wire          on_chip_memory_s1_agent_rf_source_valid;                                                 // on_chip_memory_s1_agent:rf_source_valid -> on_chip_memory_s1_agent_rsp_fifo:in_valid
	wire   [90:0] on_chip_memory_s1_agent_rf_source_data;                                                  // on_chip_memory_s1_agent:rf_source_data -> on_chip_memory_s1_agent_rsp_fifo:in_data
	wire          on_chip_memory_s1_agent_rf_source_ready;                                                 // on_chip_memory_s1_agent_rsp_fifo:in_ready -> on_chip_memory_s1_agent:rf_source_ready
	wire          on_chip_memory_s1_agent_rf_source_startofpacket;                                         // on_chip_memory_s1_agent:rf_source_startofpacket -> on_chip_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          on_chip_memory_s1_agent_rf_source_endofpacket;                                           // on_chip_memory_s1_agent:rf_source_endofpacket -> on_chip_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          on_chip_memory_s1_agent_rsp_fifo_out_valid;                                              // on_chip_memory_s1_agent_rsp_fifo:out_valid -> on_chip_memory_s1_agent:rf_sink_valid
	wire   [90:0] on_chip_memory_s1_agent_rsp_fifo_out_data;                                               // on_chip_memory_s1_agent_rsp_fifo:out_data -> on_chip_memory_s1_agent:rf_sink_data
	wire          on_chip_memory_s1_agent_rsp_fifo_out_ready;                                              // on_chip_memory_s1_agent:rf_sink_ready -> on_chip_memory_s1_agent_rsp_fifo:out_ready
	wire          on_chip_memory_s1_agent_rsp_fifo_out_startofpacket;                                      // on_chip_memory_s1_agent_rsp_fifo:out_startofpacket -> on_chip_memory_s1_agent:rf_sink_startofpacket
	wire          on_chip_memory_s1_agent_rsp_fifo_out_endofpacket;                                        // on_chip_memory_s1_agent_rsp_fifo:out_endofpacket -> on_chip_memory_s1_agent:rf_sink_endofpacket
	wire   [31:0] spi_spi_control_port_agent_m0_readdata;                                                  // spi_spi_control_port_translator:uav_readdata -> spi_spi_control_port_agent:m0_readdata
	wire          spi_spi_control_port_agent_m0_waitrequest;                                               // spi_spi_control_port_translator:uav_waitrequest -> spi_spi_control_port_agent:m0_waitrequest
	wire          spi_spi_control_port_agent_m0_debugaccess;                                               // spi_spi_control_port_agent:m0_debugaccess -> spi_spi_control_port_translator:uav_debugaccess
	wire   [31:0] spi_spi_control_port_agent_m0_address;                                                   // spi_spi_control_port_agent:m0_address -> spi_spi_control_port_translator:uav_address
	wire    [3:0] spi_spi_control_port_agent_m0_byteenable;                                                // spi_spi_control_port_agent:m0_byteenable -> spi_spi_control_port_translator:uav_byteenable
	wire          spi_spi_control_port_agent_m0_read;                                                      // spi_spi_control_port_agent:m0_read -> spi_spi_control_port_translator:uav_read
	wire          spi_spi_control_port_agent_m0_readdatavalid;                                             // spi_spi_control_port_translator:uav_readdatavalid -> spi_spi_control_port_agent:m0_readdatavalid
	wire          spi_spi_control_port_agent_m0_lock;                                                      // spi_spi_control_port_agent:m0_lock -> spi_spi_control_port_translator:uav_lock
	wire   [31:0] spi_spi_control_port_agent_m0_writedata;                                                 // spi_spi_control_port_agent:m0_writedata -> spi_spi_control_port_translator:uav_writedata
	wire          spi_spi_control_port_agent_m0_write;                                                     // spi_spi_control_port_agent:m0_write -> spi_spi_control_port_translator:uav_write
	wire    [2:0] spi_spi_control_port_agent_m0_burstcount;                                                // spi_spi_control_port_agent:m0_burstcount -> spi_spi_control_port_translator:uav_burstcount
	wire          spi_spi_control_port_agent_rf_source_valid;                                              // spi_spi_control_port_agent:rf_source_valid -> spi_spi_control_port_agent_rsp_fifo:in_valid
	wire  [108:0] spi_spi_control_port_agent_rf_source_data;                                               // spi_spi_control_port_agent:rf_source_data -> spi_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_spi_control_port_agent_rf_source_ready;                                              // spi_spi_control_port_agent_rsp_fifo:in_ready -> spi_spi_control_port_agent:rf_source_ready
	wire          spi_spi_control_port_agent_rf_source_startofpacket;                                      // spi_spi_control_port_agent:rf_source_startofpacket -> spi_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_spi_control_port_agent_rf_source_endofpacket;                                        // spi_spi_control_port_agent:rf_source_endofpacket -> spi_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_spi_control_port_agent_rsp_fifo_out_valid;                                           // spi_spi_control_port_agent_rsp_fifo:out_valid -> spi_spi_control_port_agent:rf_sink_valid
	wire  [108:0] spi_spi_control_port_agent_rsp_fifo_out_data;                                            // spi_spi_control_port_agent_rsp_fifo:out_data -> spi_spi_control_port_agent:rf_sink_data
	wire          spi_spi_control_port_agent_rsp_fifo_out_ready;                                           // spi_spi_control_port_agent:rf_sink_ready -> spi_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_spi_control_port_agent_rsp_fifo_out_startofpacket;                                   // spi_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_spi_control_port_agent_rsp_fifo_out_endofpacket;                                     // spi_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_spi_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_004_src_valid;                                                                   // cmd_mux_004:src_valid -> spi_spi_control_port_agent:cp_valid
	wire  [107:0] cmd_mux_004_src_data;                                                                    // cmd_mux_004:src_data -> spi_spi_control_port_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                                   // spi_spi_control_port_agent:cp_ready -> cmd_mux_004:src_ready
	wire    [4:0] cmd_mux_004_src_channel;                                                                 // cmd_mux_004:src_channel -> spi_spi_control_port_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                           // cmd_mux_004:src_startofpacket -> spi_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                             // cmd_mux_004:src_endofpacket -> spi_spi_control_port_agent:cp_endofpacket
	wire          packets_to_master_0_avalon_master_agent_cp_valid;                                        // packets_to_master_0_avalon_master_agent:cp_valid -> router:sink_valid
	wire  [107:0] packets_to_master_0_avalon_master_agent_cp_data;                                         // packets_to_master_0_avalon_master_agent:cp_data -> router:sink_data
	wire          packets_to_master_0_avalon_master_agent_cp_ready;                                        // router:sink_ready -> packets_to_master_0_avalon_master_agent:cp_ready
	wire          packets_to_master_0_avalon_master_agent_cp_startofpacket;                                // packets_to_master_0_avalon_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          packets_to_master_0_avalon_master_agent_cp_endofpacket;                                  // packets_to_master_0_avalon_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                        // router:src_valid -> cmd_demux:sink_valid
	wire  [107:0] router_src_data;                                                                         // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                        // cmd_demux:sink_ready -> router:src_ready
	wire    [4:0] router_src_channel;                                                                      // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                  // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          packets_to_master_1_avalon_master_agent_cp_valid;                                        // packets_to_master_1_avalon_master_agent:cp_valid -> router_001:sink_valid
	wire  [107:0] packets_to_master_1_avalon_master_agent_cp_data;                                         // packets_to_master_1_avalon_master_agent:cp_data -> router_001:sink_data
	wire          packets_to_master_1_avalon_master_agent_cp_ready;                                        // router_001:sink_ready -> packets_to_master_1_avalon_master_agent:cp_ready
	wire          packets_to_master_1_avalon_master_agent_cp_startofpacket;                                // packets_to_master_1_avalon_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          packets_to_master_1_avalon_master_agent_cp_endofpacket;                                  // packets_to_master_1_avalon_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                    // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [107:0] router_001_src_data;                                                                     // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                    // cmd_demux_001:sink_ready -> router_001:src_ready
	wire    [4:0] router_001_src_channel;                                                                  // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                            // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                              // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          nios_ii_processor_data_master_agent_cp_valid;                                            // nios_ii_processor_data_master_agent:cp_valid -> router_002:sink_valid
	wire  [107:0] nios_ii_processor_data_master_agent_cp_data;                                             // nios_ii_processor_data_master_agent:cp_data -> router_002:sink_data
	wire          nios_ii_processor_data_master_agent_cp_ready;                                            // router_002:sink_ready -> nios_ii_processor_data_master_agent:cp_ready
	wire          nios_ii_processor_data_master_agent_cp_startofpacket;                                    // nios_ii_processor_data_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          nios_ii_processor_data_master_agent_cp_endofpacket;                                      // nios_ii_processor_data_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                    // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [107:0] router_002_src_data;                                                                     // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                    // cmd_demux_002:sink_ready -> router_002:src_ready
	wire    [4:0] router_002_src_channel;                                                                  // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                            // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                              // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          nios_ii_processor_instruction_master_agent_cp_valid;                                     // nios_ii_processor_instruction_master_agent:cp_valid -> router_003:sink_valid
	wire  [107:0] nios_ii_processor_instruction_master_agent_cp_data;                                      // nios_ii_processor_instruction_master_agent:cp_data -> router_003:sink_data
	wire          nios_ii_processor_instruction_master_agent_cp_ready;                                     // router_003:sink_ready -> nios_ii_processor_instruction_master_agent:cp_ready
	wire          nios_ii_processor_instruction_master_agent_cp_startofpacket;                             // nios_ii_processor_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          nios_ii_processor_instruction_master_agent_cp_endofpacket;                               // nios_ii_processor_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                    // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [107:0] router_003_src_data;                                                                     // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                    // cmd_demux_003:sink_ready -> router_003:src_ready
	wire    [4:0] router_003_src_channel;                                                                  // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                            // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                              // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          i2c_avalon_master_agent_cp_valid;                                                        // i2c_avalon_master_agent:cp_valid -> router_004:sink_valid
	wire  [107:0] i2c_avalon_master_agent_cp_data;                                                         // i2c_avalon_master_agent:cp_data -> router_004:sink_data
	wire          i2c_avalon_master_agent_cp_ready;                                                        // router_004:sink_ready -> i2c_avalon_master_agent:cp_ready
	wire          i2c_avalon_master_agent_cp_startofpacket;                                                // i2c_avalon_master_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          i2c_avalon_master_agent_cp_endofpacket;                                                  // i2c_avalon_master_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                    // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [107:0] router_004_src_data;                                                                     // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                    // cmd_demux_004:sink_ready -> router_004:src_ready
	wire    [4:0] router_004_src_channel;                                                                  // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                            // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                              // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rp_valid;                                         // pll_reconfig_0_mgmt_avalon_slave_agent:rp_valid -> router_005:sink_valid
	wire  [107:0] pll_reconfig_0_mgmt_avalon_slave_agent_rp_data;                                          // pll_reconfig_0_mgmt_avalon_slave_agent:rp_data -> router_005:sink_data
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rp_ready;                                         // router_005:sink_ready -> pll_reconfig_0_mgmt_avalon_slave_agent:rp_ready
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rp_startofpacket;                                 // pll_reconfig_0_mgmt_avalon_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rp_endofpacket;                                   // pll_reconfig_0_mgmt_avalon_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                    // router_005:src_valid -> rsp_demux:sink_valid
	wire  [107:0] router_005_src_data;                                                                     // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                                    // rsp_demux:sink_ready -> router_005:src_ready
	wire    [4:0] router_005_src_channel;                                                                  // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                            // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                              // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rp_valid;                                        // nios_ii_processor_debug_mem_slave_agent:rp_valid -> router_006:sink_valid
	wire  [107:0] nios_ii_processor_debug_mem_slave_agent_rp_data;                                         // nios_ii_processor_debug_mem_slave_agent:rp_data -> router_006:sink_data
	wire          nios_ii_processor_debug_mem_slave_agent_rp_ready;                                        // router_006:sink_ready -> nios_ii_processor_debug_mem_slave_agent:rp_ready
	wire          nios_ii_processor_debug_mem_slave_agent_rp_startofpacket;                                // nios_ii_processor_debug_mem_slave_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          nios_ii_processor_debug_mem_slave_agent_rp_endofpacket;                                  // nios_ii_processor_debug_mem_slave_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                    // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [107:0] router_006_src_data;                                                                     // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                    // rsp_demux_001:sink_ready -> router_006:src_ready
	wire    [4:0] router_006_src_channel;                                                                  // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                            // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                              // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          wdt_s1_agent_rp_valid;                                                                   // wdt_s1_agent:rp_valid -> router_007:sink_valid
	wire  [107:0] wdt_s1_agent_rp_data;                                                                    // wdt_s1_agent:rp_data -> router_007:sink_data
	wire          wdt_s1_agent_rp_ready;                                                                   // router_007:sink_ready -> wdt_s1_agent:rp_ready
	wire          wdt_s1_agent_rp_startofpacket;                                                           // wdt_s1_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          wdt_s1_agent_rp_endofpacket;                                                             // wdt_s1_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                    // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [107:0] router_007_src_data;                                                                     // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                    // rsp_demux_002:sink_ready -> router_007:src_ready
	wire    [4:0] router_007_src_channel;                                                                  // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                            // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                              // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          on_chip_memory_s1_agent_rp_valid;                                                        // on_chip_memory_s1_agent:rp_valid -> router_008:sink_valid
	wire   [89:0] on_chip_memory_s1_agent_rp_data;                                                         // on_chip_memory_s1_agent:rp_data -> router_008:sink_data
	wire          on_chip_memory_s1_agent_rp_ready;                                                        // router_008:sink_ready -> on_chip_memory_s1_agent:rp_ready
	wire          on_chip_memory_s1_agent_rp_startofpacket;                                                // on_chip_memory_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          on_chip_memory_s1_agent_rp_endofpacket;                                                  // on_chip_memory_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          spi_spi_control_port_agent_rp_valid;                                                     // spi_spi_control_port_agent:rp_valid -> router_009:sink_valid
	wire  [107:0] spi_spi_control_port_agent_rp_data;                                                      // spi_spi_control_port_agent:rp_data -> router_009:sink_data
	wire          spi_spi_control_port_agent_rp_ready;                                                     // router_009:sink_ready -> spi_spi_control_port_agent:rp_ready
	wire          spi_spi_control_port_agent_rp_startofpacket;                                             // spi_spi_control_port_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          spi_spi_control_port_agent_rp_endofpacket;                                               // spi_spi_control_port_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                    // router_009:src_valid -> rsp_demux_004:sink_valid
	wire  [107:0] router_009_src_data;                                                                     // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                    // rsp_demux_004:sink_ready -> router_009:src_ready
	wire    [4:0] router_009_src_channel;                                                                  // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                            // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                              // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          on_chip_memory_s1_burst_adapter_source0_valid;                                           // on_chip_memory_s1_burst_adapter:source0_valid -> on_chip_memory_s1_agent:cp_valid
	wire   [89:0] on_chip_memory_s1_burst_adapter_source0_data;                                            // on_chip_memory_s1_burst_adapter:source0_data -> on_chip_memory_s1_agent:cp_data
	wire          on_chip_memory_s1_burst_adapter_source0_ready;                                           // on_chip_memory_s1_agent:cp_ready -> on_chip_memory_s1_burst_adapter:source0_ready
	wire    [4:0] on_chip_memory_s1_burst_adapter_source0_channel;                                         // on_chip_memory_s1_burst_adapter:source0_channel -> on_chip_memory_s1_agent:cp_channel
	wire          on_chip_memory_s1_burst_adapter_source0_startofpacket;                                   // on_chip_memory_s1_burst_adapter:source0_startofpacket -> on_chip_memory_s1_agent:cp_startofpacket
	wire          on_chip_memory_s1_burst_adapter_source0_endofpacket;                                     // on_chip_memory_s1_burst_adapter:source0_endofpacket -> on_chip_memory_s1_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                                    // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [107:0] cmd_demux_src0_data;                                                                     // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                                    // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire    [4:0] cmd_demux_src0_channel;                                                                  // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                            // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                              // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                // cmd_demux_001:src0_valid -> cmd_mux:sink1_valid
	wire  [107:0] cmd_demux_001_src0_data;                                                                 // cmd_demux_001:src0_data -> cmd_mux:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                // cmd_mux:sink1_ready -> cmd_demux_001:src0_ready
	wire    [4:0] cmd_demux_001_src0_channel;                                                              // cmd_demux_001:src0_channel -> cmd_mux:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                        // cmd_demux_001:src0_startofpacket -> cmd_mux:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                          // cmd_demux_001:src0_endofpacket -> cmd_mux:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                // cmd_demux_002:src0_valid -> cmd_mux:sink2_valid
	wire  [107:0] cmd_demux_002_src0_data;                                                                 // cmd_demux_002:src0_data -> cmd_mux:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                // cmd_mux:sink2_ready -> cmd_demux_002:src0_ready
	wire    [4:0] cmd_demux_002_src0_channel;                                                              // cmd_demux_002:src0_channel -> cmd_mux:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                        // cmd_demux_002:src0_startofpacket -> cmd_mux:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                          // cmd_demux_002:src0_endofpacket -> cmd_mux:sink2_endofpacket
	wire          cmd_demux_002_src1_valid;                                                                // cmd_demux_002:src1_valid -> cmd_mux_001:sink0_valid
	wire  [107:0] cmd_demux_002_src1_data;                                                                 // cmd_demux_002:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_002_src1_ready;                                                                // cmd_mux_001:sink0_ready -> cmd_demux_002:src1_ready
	wire    [4:0] cmd_demux_002_src1_channel;                                                              // cmd_demux_002:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_002_src1_startofpacket;                                                        // cmd_demux_002:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_002_src1_endofpacket;                                                          // cmd_demux_002:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_002_src2_valid;                                                                // cmd_demux_002:src2_valid -> cmd_mux_002:sink0_valid
	wire  [107:0] cmd_demux_002_src2_data;                                                                 // cmd_demux_002:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_002_src2_ready;                                                                // cmd_mux_002:sink0_ready -> cmd_demux_002:src2_ready
	wire    [4:0] cmd_demux_002_src2_channel;                                                              // cmd_demux_002:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_002_src2_startofpacket;                                                        // cmd_demux_002:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_002_src2_endofpacket;                                                          // cmd_demux_002:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_002_src3_valid;                                                                // cmd_demux_002:src3_valid -> cmd_mux_003:sink0_valid
	wire  [107:0] cmd_demux_002_src3_data;                                                                 // cmd_demux_002:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_002_src3_ready;                                                                // cmd_mux_003:sink0_ready -> cmd_demux_002:src3_ready
	wire    [4:0] cmd_demux_002_src3_channel;                                                              // cmd_demux_002:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_002_src3_startofpacket;                                                        // cmd_demux_002:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_002_src3_endofpacket;                                                          // cmd_demux_002:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_002_src4_valid;                                                                // cmd_demux_002:src4_valid -> cmd_mux_004:sink0_valid
	wire  [107:0] cmd_demux_002_src4_data;                                                                 // cmd_demux_002:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_002_src4_ready;                                                                // cmd_mux_004:sink0_ready -> cmd_demux_002:src4_ready
	wire    [4:0] cmd_demux_002_src4_channel;                                                              // cmd_demux_002:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_002_src4_startofpacket;                                                        // cmd_demux_002:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_002_src4_endofpacket;                                                          // cmd_demux_002:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                // cmd_demux_003:src0_valid -> cmd_mux:sink3_valid
	wire  [107:0] cmd_demux_003_src0_data;                                                                 // cmd_demux_003:src0_data -> cmd_mux:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                // cmd_mux:sink3_ready -> cmd_demux_003:src0_ready
	wire    [4:0] cmd_demux_003_src0_channel;                                                              // cmd_demux_003:src0_channel -> cmd_mux:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                        // cmd_demux_003:src0_startofpacket -> cmd_mux:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                          // cmd_demux_003:src0_endofpacket -> cmd_mux:sink3_endofpacket
	wire          cmd_demux_003_src1_valid;                                                                // cmd_demux_003:src1_valid -> cmd_mux_001:sink1_valid
	wire  [107:0] cmd_demux_003_src1_data;                                                                 // cmd_demux_003:src1_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_003_src1_ready;                                                                // cmd_mux_001:sink1_ready -> cmd_demux_003:src1_ready
	wire    [4:0] cmd_demux_003_src1_channel;                                                              // cmd_demux_003:src1_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_003_src1_startofpacket;                                                        // cmd_demux_003:src1_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_003_src1_endofpacket;                                                          // cmd_demux_003:src1_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_003_src2_valid;                                                                // cmd_demux_003:src2_valid -> cmd_mux_002:sink1_valid
	wire  [107:0] cmd_demux_003_src2_data;                                                                 // cmd_demux_003:src2_data -> cmd_mux_002:sink1_data
	wire          cmd_demux_003_src2_ready;                                                                // cmd_mux_002:sink1_ready -> cmd_demux_003:src2_ready
	wire    [4:0] cmd_demux_003_src2_channel;                                                              // cmd_demux_003:src2_channel -> cmd_mux_002:sink1_channel
	wire          cmd_demux_003_src2_startofpacket;                                                        // cmd_demux_003:src2_startofpacket -> cmd_mux_002:sink1_startofpacket
	wire          cmd_demux_003_src2_endofpacket;                                                          // cmd_demux_003:src2_endofpacket -> cmd_mux_002:sink1_endofpacket
	wire          cmd_demux_003_src3_valid;                                                                // cmd_demux_003:src3_valid -> cmd_mux_003:sink1_valid
	wire  [107:0] cmd_demux_003_src3_data;                                                                 // cmd_demux_003:src3_data -> cmd_mux_003:sink1_data
	wire          cmd_demux_003_src3_ready;                                                                // cmd_mux_003:sink1_ready -> cmd_demux_003:src3_ready
	wire    [4:0] cmd_demux_003_src3_channel;                                                              // cmd_demux_003:src3_channel -> cmd_mux_003:sink1_channel
	wire          cmd_demux_003_src3_startofpacket;                                                        // cmd_demux_003:src3_startofpacket -> cmd_mux_003:sink1_startofpacket
	wire          cmd_demux_003_src3_endofpacket;                                                          // cmd_demux_003:src3_endofpacket -> cmd_mux_003:sink1_endofpacket
	wire          cmd_demux_003_src4_valid;                                                                // cmd_demux_003:src4_valid -> cmd_mux_004:sink1_valid
	wire  [107:0] cmd_demux_003_src4_data;                                                                 // cmd_demux_003:src4_data -> cmd_mux_004:sink1_data
	wire          cmd_demux_003_src4_ready;                                                                // cmd_mux_004:sink1_ready -> cmd_demux_003:src4_ready
	wire    [4:0] cmd_demux_003_src4_channel;                                                              // cmd_demux_003:src4_channel -> cmd_mux_004:sink1_channel
	wire          cmd_demux_003_src4_startofpacket;                                                        // cmd_demux_003:src4_startofpacket -> cmd_mux_004:sink1_startofpacket
	wire          cmd_demux_003_src4_endofpacket;                                                          // cmd_demux_003:src4_endofpacket -> cmd_mux_004:sink1_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                // cmd_demux_004:src0_valid -> cmd_mux_004:sink2_valid
	wire  [107:0] cmd_demux_004_src0_data;                                                                 // cmd_demux_004:src0_data -> cmd_mux_004:sink2_data
	wire          cmd_demux_004_src0_ready;                                                                // cmd_mux_004:sink2_ready -> cmd_demux_004:src0_ready
	wire    [4:0] cmd_demux_004_src0_channel;                                                              // cmd_demux_004:src0_channel -> cmd_mux_004:sink2_channel
	wire          cmd_demux_004_src0_startofpacket;                                                        // cmd_demux_004:src0_startofpacket -> cmd_mux_004:sink2_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                          // cmd_demux_004:src0_endofpacket -> cmd_mux_004:sink2_endofpacket
	wire          rsp_demux_src0_valid;                                                                    // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [107:0] rsp_demux_src0_data;                                                                     // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                                    // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire    [4:0] rsp_demux_src0_channel;                                                                  // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                            // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                              // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_src1_valid;                                                                    // rsp_demux:src1_valid -> rsp_mux_001:sink0_valid
	wire  [107:0] rsp_demux_src1_data;                                                                     // rsp_demux:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_src1_ready;                                                                    // rsp_mux_001:sink0_ready -> rsp_demux:src1_ready
	wire    [4:0] rsp_demux_src1_channel;                                                                  // rsp_demux:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_src1_startofpacket;                                                            // rsp_demux:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_src1_endofpacket;                                                              // rsp_demux:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_src2_valid;                                                                    // rsp_demux:src2_valid -> rsp_mux_002:sink0_valid
	wire  [107:0] rsp_demux_src2_data;                                                                     // rsp_demux:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_src2_ready;                                                                    // rsp_mux_002:sink0_ready -> rsp_demux:src2_ready
	wire    [4:0] rsp_demux_src2_channel;                                                                  // rsp_demux:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_src2_startofpacket;                                                            // rsp_demux:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_src2_endofpacket;                                                              // rsp_demux:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_src3_valid;                                                                    // rsp_demux:src3_valid -> rsp_mux_003:sink0_valid
	wire  [107:0] rsp_demux_src3_data;                                                                     // rsp_demux:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_src3_ready;                                                                    // rsp_mux_003:sink0_ready -> rsp_demux:src3_ready
	wire    [4:0] rsp_demux_src3_channel;                                                                  // rsp_demux:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_src3_startofpacket;                                                            // rsp_demux:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_src3_endofpacket;                                                              // rsp_demux:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                // rsp_demux_001:src0_valid -> rsp_mux_002:sink1_valid
	wire  [107:0] rsp_demux_001_src0_data;                                                                 // rsp_demux_001:src0_data -> rsp_mux_002:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                // rsp_mux_002:sink1_ready -> rsp_demux_001:src0_ready
	wire    [4:0] rsp_demux_001_src0_channel;                                                              // rsp_demux_001:src0_channel -> rsp_mux_002:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                        // rsp_demux_001:src0_startofpacket -> rsp_mux_002:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                          // rsp_demux_001:src0_endofpacket -> rsp_mux_002:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                // rsp_demux_001:src1_valid -> rsp_mux_003:sink1_valid
	wire  [107:0] rsp_demux_001_src1_data;                                                                 // rsp_demux_001:src1_data -> rsp_mux_003:sink1_data
	wire          rsp_demux_001_src1_ready;                                                                // rsp_mux_003:sink1_ready -> rsp_demux_001:src1_ready
	wire    [4:0] rsp_demux_001_src1_channel;                                                              // rsp_demux_001:src1_channel -> rsp_mux_003:sink1_channel
	wire          rsp_demux_001_src1_startofpacket;                                                        // rsp_demux_001:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                          // rsp_demux_001:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                // rsp_demux_002:src0_valid -> rsp_mux_002:sink2_valid
	wire  [107:0] rsp_demux_002_src0_data;                                                                 // rsp_demux_002:src0_data -> rsp_mux_002:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                // rsp_mux_002:sink2_ready -> rsp_demux_002:src0_ready
	wire    [4:0] rsp_demux_002_src0_channel;                                                              // rsp_demux_002:src0_channel -> rsp_mux_002:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                        // rsp_demux_002:src0_startofpacket -> rsp_mux_002:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                          // rsp_demux_002:src0_endofpacket -> rsp_mux_002:sink2_endofpacket
	wire          rsp_demux_002_src1_valid;                                                                // rsp_demux_002:src1_valid -> rsp_mux_003:sink2_valid
	wire  [107:0] rsp_demux_002_src1_data;                                                                 // rsp_demux_002:src1_data -> rsp_mux_003:sink2_data
	wire          rsp_demux_002_src1_ready;                                                                // rsp_mux_003:sink2_ready -> rsp_demux_002:src1_ready
	wire    [4:0] rsp_demux_002_src1_channel;                                                              // rsp_demux_002:src1_channel -> rsp_mux_003:sink2_channel
	wire          rsp_demux_002_src1_startofpacket;                                                        // rsp_demux_002:src1_startofpacket -> rsp_mux_003:sink2_startofpacket
	wire          rsp_demux_002_src1_endofpacket;                                                          // rsp_demux_002:src1_endofpacket -> rsp_mux_003:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                // rsp_demux_003:src0_valid -> rsp_mux_002:sink3_valid
	wire  [107:0] rsp_demux_003_src0_data;                                                                 // rsp_demux_003:src0_data -> rsp_mux_002:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                // rsp_mux_002:sink3_ready -> rsp_demux_003:src0_ready
	wire    [4:0] rsp_demux_003_src0_channel;                                                              // rsp_demux_003:src0_channel -> rsp_mux_002:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                        // rsp_demux_003:src0_startofpacket -> rsp_mux_002:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                          // rsp_demux_003:src0_endofpacket -> rsp_mux_002:sink3_endofpacket
	wire          rsp_demux_003_src1_valid;                                                                // rsp_demux_003:src1_valid -> rsp_mux_003:sink3_valid
	wire  [107:0] rsp_demux_003_src1_data;                                                                 // rsp_demux_003:src1_data -> rsp_mux_003:sink3_data
	wire          rsp_demux_003_src1_ready;                                                                // rsp_mux_003:sink3_ready -> rsp_demux_003:src1_ready
	wire    [4:0] rsp_demux_003_src1_channel;                                                              // rsp_demux_003:src1_channel -> rsp_mux_003:sink3_channel
	wire          rsp_demux_003_src1_startofpacket;                                                        // rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink3_startofpacket
	wire          rsp_demux_003_src1_endofpacket;                                                          // rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                // rsp_demux_004:src0_valid -> rsp_mux_002:sink4_valid
	wire  [107:0] rsp_demux_004_src0_data;                                                                 // rsp_demux_004:src0_data -> rsp_mux_002:sink4_data
	wire          rsp_demux_004_src0_ready;                                                                // rsp_mux_002:sink4_ready -> rsp_demux_004:src0_ready
	wire    [4:0] rsp_demux_004_src0_channel;                                                              // rsp_demux_004:src0_channel -> rsp_mux_002:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                        // rsp_demux_004:src0_startofpacket -> rsp_mux_002:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                          // rsp_demux_004:src0_endofpacket -> rsp_mux_002:sink4_endofpacket
	wire          rsp_demux_004_src1_valid;                                                                // rsp_demux_004:src1_valid -> rsp_mux_003:sink4_valid
	wire  [107:0] rsp_demux_004_src1_data;                                                                 // rsp_demux_004:src1_data -> rsp_mux_003:sink4_data
	wire          rsp_demux_004_src1_ready;                                                                // rsp_mux_003:sink4_ready -> rsp_demux_004:src1_ready
	wire    [4:0] rsp_demux_004_src1_channel;                                                              // rsp_demux_004:src1_channel -> rsp_mux_003:sink4_channel
	wire          rsp_demux_004_src1_startofpacket;                                                        // rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink4_startofpacket
	wire          rsp_demux_004_src1_endofpacket;                                                          // rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink4_endofpacket
	wire          rsp_demux_004_src2_valid;                                                                // rsp_demux_004:src2_valid -> rsp_mux_004:sink0_valid
	wire  [107:0] rsp_demux_004_src2_data;                                                                 // rsp_demux_004:src2_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_004_src2_ready;                                                                // rsp_mux_004:sink0_ready -> rsp_demux_004:src2_ready
	wire    [4:0] rsp_demux_004_src2_channel;                                                              // rsp_demux_004:src2_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_004_src2_startofpacket;                                                        // rsp_demux_004:src2_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_004_src2_endofpacket;                                                          // rsp_demux_004:src2_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          router_008_src_valid;                                                                    // router_008:src_valid -> on_chip_memory_s1_rsp_width_adapter:in_valid
	wire   [89:0] router_008_src_data;                                                                     // router_008:src_data -> on_chip_memory_s1_rsp_width_adapter:in_data
	wire          router_008_src_ready;                                                                    // on_chip_memory_s1_rsp_width_adapter:in_ready -> router_008:src_ready
	wire    [4:0] router_008_src_channel;                                                                  // router_008:src_channel -> on_chip_memory_s1_rsp_width_adapter:in_channel
	wire          router_008_src_startofpacket;                                                            // router_008:src_startofpacket -> on_chip_memory_s1_rsp_width_adapter:in_startofpacket
	wire          router_008_src_endofpacket;                                                              // router_008:src_endofpacket -> on_chip_memory_s1_rsp_width_adapter:in_endofpacket
	wire          on_chip_memory_s1_rsp_width_adapter_src_valid;                                           // on_chip_memory_s1_rsp_width_adapter:out_valid -> rsp_demux_003:sink_valid
	wire  [107:0] on_chip_memory_s1_rsp_width_adapter_src_data;                                            // on_chip_memory_s1_rsp_width_adapter:out_data -> rsp_demux_003:sink_data
	wire          on_chip_memory_s1_rsp_width_adapter_src_ready;                                           // rsp_demux_003:sink_ready -> on_chip_memory_s1_rsp_width_adapter:out_ready
	wire    [4:0] on_chip_memory_s1_rsp_width_adapter_src_channel;                                         // on_chip_memory_s1_rsp_width_adapter:out_channel -> rsp_demux_003:sink_channel
	wire          on_chip_memory_s1_rsp_width_adapter_src_startofpacket;                                   // on_chip_memory_s1_rsp_width_adapter:out_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          on_chip_memory_s1_rsp_width_adapter_src_endofpacket;                                     // on_chip_memory_s1_rsp_width_adapter:out_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                   // cmd_mux_003:src_valid -> on_chip_memory_s1_cmd_width_adapter:in_valid
	wire  [107:0] cmd_mux_003_src_data;                                                                    // cmd_mux_003:src_data -> on_chip_memory_s1_cmd_width_adapter:in_data
	wire          cmd_mux_003_src_ready;                                                                   // on_chip_memory_s1_cmd_width_adapter:in_ready -> cmd_mux_003:src_ready
	wire    [4:0] cmd_mux_003_src_channel;                                                                 // cmd_mux_003:src_channel -> on_chip_memory_s1_cmd_width_adapter:in_channel
	wire          cmd_mux_003_src_startofpacket;                                                           // cmd_mux_003:src_startofpacket -> on_chip_memory_s1_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                             // cmd_mux_003:src_endofpacket -> on_chip_memory_s1_cmd_width_adapter:in_endofpacket
	wire          on_chip_memory_s1_cmd_width_adapter_src_valid;                                           // on_chip_memory_s1_cmd_width_adapter:out_valid -> on_chip_memory_s1_burst_adapter:sink0_valid
	wire   [89:0] on_chip_memory_s1_cmd_width_adapter_src_data;                                            // on_chip_memory_s1_cmd_width_adapter:out_data -> on_chip_memory_s1_burst_adapter:sink0_data
	wire          on_chip_memory_s1_cmd_width_adapter_src_ready;                                           // on_chip_memory_s1_burst_adapter:sink0_ready -> on_chip_memory_s1_cmd_width_adapter:out_ready
	wire    [4:0] on_chip_memory_s1_cmd_width_adapter_src_channel;                                         // on_chip_memory_s1_cmd_width_adapter:out_channel -> on_chip_memory_s1_burst_adapter:sink0_channel
	wire          on_chip_memory_s1_cmd_width_adapter_src_startofpacket;                                   // on_chip_memory_s1_cmd_width_adapter:out_startofpacket -> on_chip_memory_s1_burst_adapter:sink0_startofpacket
	wire          on_chip_memory_s1_cmd_width_adapter_src_endofpacket;                                     // on_chip_memory_s1_cmd_width_adapter:out_endofpacket -> on_chip_memory_s1_burst_adapter:sink0_endofpacket
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_valid;                             // pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire   [33:0] pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_data;                              // pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_ready;                             // avalon_st_adapter:in_0_ready -> pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                           // avalon_st_adapter:out_0_valid -> pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_out_0_data;                                                            // avalon_st_adapter:out_0_data -> pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                           // pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                           // avalon_st_adapter:out_0_error -> pll_reconfig_0_mgmt_avalon_slave_agent:rdata_fifo_sink_error
	wire          nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_valid;                            // nios_ii_processor_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_data;                             // nios_ii_processor_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_ready;                            // avalon_st_adapter_001:in_0_ready -> nios_ii_processor_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                       // avalon_st_adapter_001:out_0_valid -> nios_ii_processor_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                        // avalon_st_adapter_001:out_0_data -> nios_ii_processor_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                       // nios_ii_processor_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                       // avalon_st_adapter_001:out_0_error -> nios_ii_processor_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          wdt_s1_agent_rdata_fifo_src_valid;                                                       // wdt_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] wdt_s1_agent_rdata_fifo_src_data;                                                        // wdt_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          wdt_s1_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_002:in_0_ready -> wdt_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                       // avalon_st_adapter_002:out_0_valid -> wdt_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                        // avalon_st_adapter_002:out_0_data -> wdt_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                       // wdt_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                       // avalon_st_adapter_002:out_0_error -> wdt_s1_agent:rdata_fifo_sink_error
	wire          on_chip_memory_s1_agent_rdata_fifo_src_valid;                                            // on_chip_memory_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [17:0] on_chip_memory_s1_agent_rdata_fifo_src_data;                                             // on_chip_memory_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          on_chip_memory_s1_agent_rdata_fifo_src_ready;                                            // avalon_st_adapter_003:in_0_ready -> on_chip_memory_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                       // avalon_st_adapter_003:out_0_valid -> on_chip_memory_s1_agent:rdata_fifo_sink_valid
	wire   [17:0] avalon_st_adapter_003_out_0_data;                                                        // avalon_st_adapter_003:out_0_data -> on_chip_memory_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                       // on_chip_memory_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                       // avalon_st_adapter_003:out_0_error -> on_chip_memory_s1_agent:rdata_fifo_sink_error
	wire          spi_spi_control_port_agent_rdata_fifo_src_valid;                                         // spi_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire   [33:0] spi_spi_control_port_agent_rdata_fifo_src_data;                                          // spi_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          spi_spi_control_port_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_004:in_0_ready -> spi_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                       // avalon_st_adapter_004:out_0_valid -> spi_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_004_out_0_data;                                                        // avalon_st_adapter_004:out_0_data -> spi_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                       // spi_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                       // avalon_st_adapter_004:out_0_error -> spi_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) packets_to_master_0_avalon_master_translator (
		.clk                    (clk_source_clk_clk),                                                                   //                       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (packets_to_master_0_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (packets_to_master_0_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (packets_to_master_0_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (packets_to_master_0_avalon_master_read),                                               //                          .read
		.av_readdata            (packets_to_master_0_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (packets_to_master_0_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (packets_to_master_0_avalon_master_write),                                              //                          .write
		.av_writedata           (packets_to_master_0_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) packets_to_master_1_avalon_master_translator (
		.clk                    (clk_source_clk_clk),                                                                   //                       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (packets_to_master_1_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (packets_to_master_1_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (packets_to_master_1_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (packets_to_master_1_avalon_master_read),                                               //                          .read
		.av_readdata            (packets_to_master_1_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (packets_to_master_1_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (packets_to_master_1_avalon_master_write),                                              //                          .write
		.av_writedata           (packets_to_master_1_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                                 //               (terminated)
		.uav_clken              (),                                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                                //               (terminated)
		.av_response            (),                                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                                      //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios_ii_processor_data_master_translator (
		.clk                    (clk_source_clk_clk),                                                               //                       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (nios_ii_processor_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_ii_processor_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_ii_processor_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_ii_processor_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_ii_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_ii_processor_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_ii_processor_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_ii_processor_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_ii_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios_ii_processor_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios_ii_processor_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios_ii_processor_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios_ii_processor_data_master_read),                                               //                          .read
		.av_readdata            (nios_ii_processor_data_master_readdata),                                           //                          .readdata
		.av_write               (nios_ii_processor_data_master_write),                                              //                          .write
		.av_writedata           (nios_ii_processor_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios_ii_processor_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                             //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                             //               (terminated)
		.uav_clken              (),                                                                                 //               (terminated)
		.av_clken               (1'b1),                                                                             //               (terminated)
		.uav_response           (2'b00),                                                                            //               (terminated)
		.av_response            (),                                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (17),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios_ii_processor_instruction_master_translator (
		.clk                    (clk_source_clk_clk),                                                                      //                       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                               //                     reset.reset
		.uav_address            (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios_ii_processor_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios_ii_processor_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios_ii_processor_instruction_master_read),                                               //                          .read
		.av_readdata            (nios_ii_processor_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                                    //               (terminated)
		.av_byteenable          (4'b1111),                                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                                    //               (terminated)
		.av_begintransfer       (1'b0),                                                                                    //               (terminated)
		.av_chipselect          (1'b0),                                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                                        //               (terminated)
		.av_write               (1'b0),                                                                                    //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                                    //               (terminated)
		.av_lock                (1'b0),                                                                                    //               (terminated)
		.av_debugaccess         (1'b0),                                                                                    //               (terminated)
		.uav_clken              (),                                                                                        //               (terminated)
		.av_clken               (1'b1),                                                                                    //               (terminated)
		.uav_response           (2'b00),                                                                                   //               (terminated)
		.av_response            (),                                                                                        //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                                    //               (terminated)
		.av_writeresponsevalid  ()                                                                                         //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) i2c_avalon_master_translator (
		.clk                    (clk_source_clk_clk),                                                   //                       clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),            //                     reset.reset
		.uav_address            (i2c_avalon_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (i2c_avalon_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (i2c_avalon_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (i2c_avalon_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (i2c_avalon_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (i2c_avalon_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (i2c_avalon_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (i2c_avalon_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (i2c_avalon_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (i2c_avalon_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (i2c_avalon_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (i2c_avalon_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (i2c_avalon_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (i2c_avalon_master_byteenable),                                         //                          .byteenable
		.av_read                (i2c_avalon_master_read),                                               //                          .read
		.av_readdata            (i2c_avalon_master_readdata),                                           //                          .readdata
		.av_readdatavalid       (i2c_avalon_master_readdatavalid),                                      //                          .readdatavalid
		.av_write               (i2c_avalon_master_write),                                              //                          .write
		.av_writedata           (i2c_avalon_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                 //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                 //               (terminated)
		.av_begintransfer       (1'b0),                                                                 //               (terminated)
		.av_chipselect          (1'b0),                                                                 //               (terminated)
		.av_lock                (1'b0),                                                                 //               (terminated)
		.av_debugaccess         (1'b0),                                                                 //               (terminated)
		.uav_clken              (),                                                                     //               (terminated)
		.av_clken               (1'b1),                                                                 //               (terminated)
		.uav_response           (2'b00),                                                                //               (terminated)
		.av_response            (),                                                                     //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                 //               (terminated)
		.av_writeresponsevalid  ()                                                                      //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (6),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pll_reconfig_0_mgmt_avalon_slave_translator (
		.clk                    (clk_source_clk_clk),                                        //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pll_reconfig_0_mgmt_avalon_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (pll_reconfig_0_mgmt_avalon_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (pll_reconfig_0_mgmt_avalon_slave_agent_m0_read),            //                         .read
		.uav_write              (pll_reconfig_0_mgmt_avalon_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (pll_reconfig_0_mgmt_avalon_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (pll_reconfig_0_mgmt_avalon_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (pll_reconfig_0_mgmt_avalon_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (pll_reconfig_0_mgmt_avalon_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (pll_reconfig_0_mgmt_avalon_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (pll_reconfig_0_mgmt_avalon_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (pll_reconfig_0_mgmt_avalon_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (pll_reconfig_0_mgmt_avalon_slave_address),                  //      avalon_anti_slave_0.address
		.av_write               (pll_reconfig_0_mgmt_avalon_slave_write),                    //                         .write
		.av_read                (pll_reconfig_0_mgmt_avalon_slave_read),                     //                         .read
		.av_readdata            (pll_reconfig_0_mgmt_avalon_slave_readdata),                 //                         .readdata
		.av_writedata           (pll_reconfig_0_mgmt_avalon_slave_writedata),                //                         .writedata
		.av_waitrequest         (pll_reconfig_0_mgmt_avalon_slave_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios_ii_processor_debug_mem_slave_translator (
		.clk                    (clk_source_clk_clk),                                        //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (nios_ii_processor_debug_mem_slave_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (nios_ii_processor_debug_mem_slave_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (nios_ii_processor_debug_mem_slave_agent_m0_read),           //                         .read
		.uav_write              (nios_ii_processor_debug_mem_slave_agent_m0_write),          //                         .write
		.uav_waitrequest        (nios_ii_processor_debug_mem_slave_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (nios_ii_processor_debug_mem_slave_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (nios_ii_processor_debug_mem_slave_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (nios_ii_processor_debug_mem_slave_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (nios_ii_processor_debug_mem_slave_agent_m0_writedata),      //                         .writedata
		.uav_lock               (nios_ii_processor_debug_mem_slave_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (nios_ii_processor_debug_mem_slave_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (nios_ii_processor_debug_mem_slave_address),                 //      avalon_anti_slave_0.address
		.av_write               (nios_ii_processor_debug_mem_slave_write),                   //                         .write
		.av_read                (nios_ii_processor_debug_mem_slave_read),                    //                         .read
		.av_readdata            (nios_ii_processor_debug_mem_slave_readdata),                //                         .readdata
		.av_writedata           (nios_ii_processor_debug_mem_slave_writedata),               //                         .writedata
		.av_byteenable          (nios_ii_processor_debug_mem_slave_byteenable),              //                         .byteenable
		.av_waitrequest         (nios_ii_processor_debug_mem_slave_waitrequest),             //                         .waitrequest
		.av_debugaccess         (nios_ii_processor_debug_mem_slave_debugaccess),             //                         .debugaccess
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_chipselect          (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) wdt_s1_translator (
		.clk                    (clk_source_clk_clk),                                        //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (wdt_s1_agent_m0_address),                                   // avalon_universal_slave_0.address
		.uav_burstcount         (wdt_s1_agent_m0_burstcount),                                //                         .burstcount
		.uav_read               (wdt_s1_agent_m0_read),                                      //                         .read
		.uav_write              (wdt_s1_agent_m0_write),                                     //                         .write
		.uav_waitrequest        (wdt_s1_agent_m0_waitrequest),                               //                         .waitrequest
		.uav_readdatavalid      (wdt_s1_agent_m0_readdatavalid),                             //                         .readdatavalid
		.uav_byteenable         (wdt_s1_agent_m0_byteenable),                                //                         .byteenable
		.uav_readdata           (wdt_s1_agent_m0_readdata),                                  //                         .readdata
		.uav_writedata          (wdt_s1_agent_m0_writedata),                                 //                         .writedata
		.uav_lock               (wdt_s1_agent_m0_lock),                                      //                         .lock
		.uav_debugaccess        (wdt_s1_agent_m0_debugaccess),                               //                         .debugaccess
		.av_address             (wdt_s1_address),                                            //      avalon_anti_slave_0.address
		.av_write               (wdt_s1_write),                                              //                         .write
		.av_readdata            (wdt_s1_readdata),                                           //                         .readdata
		.av_writedata           (wdt_s1_writedata),                                          //                         .writedata
		.av_chipselect          (wdt_s1_chipselect),                                         //                         .chipselect
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (16),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (2),
		.UAV_BYTEENABLE_W               (2),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (2),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (2),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) on_chip_memory_s1_translator (
		.clk                    (clk_source_clk_clk),                                        //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (on_chip_memory_s1_agent_m0_address),                        // avalon_universal_slave_0.address
		.uav_burstcount         (on_chip_memory_s1_agent_m0_burstcount),                     //                         .burstcount
		.uav_read               (on_chip_memory_s1_agent_m0_read),                           //                         .read
		.uav_write              (on_chip_memory_s1_agent_m0_write),                          //                         .write
		.uav_waitrequest        (on_chip_memory_s1_agent_m0_waitrequest),                    //                         .waitrequest
		.uav_readdatavalid      (on_chip_memory_s1_agent_m0_readdatavalid),                  //                         .readdatavalid
		.uav_byteenable         (on_chip_memory_s1_agent_m0_byteenable),                     //                         .byteenable
		.uav_readdata           (on_chip_memory_s1_agent_m0_readdata),                       //                         .readdata
		.uav_writedata          (on_chip_memory_s1_agent_m0_writedata),                      //                         .writedata
		.uav_lock               (on_chip_memory_s1_agent_m0_lock),                           //                         .lock
		.uav_debugaccess        (on_chip_memory_s1_agent_m0_debugaccess),                    //                         .debugaccess
		.av_address             (on_chip_memory_s1_address),                                 //      avalon_anti_slave_0.address
		.av_write               (on_chip_memory_s1_write),                                   //                         .write
		.av_readdata            (on_chip_memory_s1_readdata),                                //                         .readdata
		.av_writedata           (on_chip_memory_s1_writedata),                               //                         .writedata
		.av_byteenable          (on_chip_memory_s1_byteenable),                              //                         .byteenable
		.av_chipselect          (on_chip_memory_s1_chipselect),                              //                         .chipselect
		.av_clken               (on_chip_memory_s1_clken),                                   //                         .clken
		.av_read                (),                                                          //              (terminated)
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_spi_control_port_translator (
		.clk                    (clk_source_clk_clk),                                        //                      clk.clk
		.reset                  (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (spi_spi_control_port_agent_m0_address),                     // avalon_universal_slave_0.address
		.uav_burstcount         (spi_spi_control_port_agent_m0_burstcount),                  //                         .burstcount
		.uav_read               (spi_spi_control_port_agent_m0_read),                        //                         .read
		.uav_write              (spi_spi_control_port_agent_m0_write),                       //                         .write
		.uav_waitrequest        (spi_spi_control_port_agent_m0_waitrequest),                 //                         .waitrequest
		.uav_readdatavalid      (spi_spi_control_port_agent_m0_readdatavalid),               //                         .readdatavalid
		.uav_byteenable         (spi_spi_control_port_agent_m0_byteenable),                  //                         .byteenable
		.uav_readdata           (spi_spi_control_port_agent_m0_readdata),                    //                         .readdata
		.uav_writedata          (spi_spi_control_port_agent_m0_writedata),                   //                         .writedata
		.uav_lock               (spi_spi_control_port_agent_m0_lock),                        //                         .lock
		.uav_debugaccess        (spi_spi_control_port_agent_m0_debugaccess),                 //                         .debugaccess
		.av_address             (spi_spi_control_port_address),                              //      avalon_anti_slave_0.address
		.av_write               (spi_spi_control_port_write),                                //                         .write
		.av_read                (spi_spi_control_port_read),                                 //                         .read
		.av_readdata            (spi_spi_control_port_readdata),                             //                         .readdata
		.av_writedata           (spi_spi_control_port_writedata),                            //                         .writedata
		.av_chipselect          (spi_spi_control_port_chipselect),                           //                         .chipselect
		.av_begintransfer       (),                                                          //              (terminated)
		.av_beginbursttransfer  (),                                                          //              (terminated)
		.av_burstcount          (),                                                          //              (terminated)
		.av_byteenable          (),                                                          //              (terminated)
		.av_readdatavalid       (1'b0),                                                      //              (terminated)
		.av_waitrequest         (1'b0),                                                      //              (terminated)
		.av_writebyteenable     (),                                                          //              (terminated)
		.av_lock                (),                                                          //              (terminated)
		.av_clken               (),                                                          //              (terminated)
		.uav_clken              (1'b0),                                                      //              (terminated)
		.av_debugaccess         (),                                                          //              (terminated)
		.av_outputenable        (),                                                          //              (terminated)
		.uav_response           (),                                                          //              (terminated)
		.av_response            (2'b00),                                                     //              (terminated)
		.uav_writeresponsevalid (),                                                          //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                       //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) packets_to_master_0_avalon_master_agent (
		.clk                   (clk_source_clk_clk),                                                                   //       clk.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (packets_to_master_0_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (packets_to_master_0_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (packets_to_master_0_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (packets_to_master_0_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (packets_to_master_0_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (packets_to_master_0_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                                    //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                                     //          .data
		.rp_channel            (rsp_mux_src_channel),                                                                  //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                              //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                                    //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) packets_to_master_1_avalon_master_agent (
		.clk                   (clk_source_clk_clk),                                                                   //       clk.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (packets_to_master_1_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (packets_to_master_1_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (packets_to_master_1_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (packets_to_master_1_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (packets_to_master_1_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (packets_to_master_1_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                                //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                                 //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                              //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                          //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                                //          .ready
		.av_response           (),                                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                                      // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_ii_processor_data_master_agent (
		.clk                   (clk_source_clk_clk),                                                               //       clk.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (nios_ii_processor_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_ii_processor_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_ii_processor_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_ii_processor_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_ii_processor_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_ii_processor_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_ii_processor_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_ii_processor_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_ii_processor_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_ii_processor_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_ii_processor_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_ii_processor_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_ii_processor_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_ii_processor_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_ii_processor_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                            //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                             //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                          //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                                      //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                            //          .ready
		.av_response           (),                                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios_ii_processor_instruction_master_agent (
		.clk                   (clk_source_clk_clk),                                                                      //       clk.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),                               // clk_reset.reset
		.av_address            (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios_ii_processor_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios_ii_processor_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios_ii_processor_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios_ii_processor_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios_ii_processor_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios_ii_processor_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                                   //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                                    //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                                 //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                                           //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                             //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                                   //          .ready
		.av_response           (),                                                                                        // (terminated)
		.av_writeresponsevalid ()                                                                                         // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (102),
		.PKT_CACHE_L               (99),
		.PKT_THREAD_ID_H           (95),
		.PKT_THREAD_ID_L           (95),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.ST_DATA_W                 (108),
		.ST_CHANNEL_W              (5),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) i2c_avalon_master_agent (
		.clk                   (clk_source_clk_clk),                                                   //       clk.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),            // clk_reset.reset
		.av_address            (i2c_avalon_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (i2c_avalon_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (i2c_avalon_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (i2c_avalon_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (i2c_avalon_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (i2c_avalon_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (i2c_avalon_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (i2c_avalon_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (i2c_avalon_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (i2c_avalon_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (i2c_avalon_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (i2c_avalon_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (i2c_avalon_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (i2c_avalon_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (i2c_avalon_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (i2c_avalon_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                 //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                              //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                        //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                          //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                //          .ready
		.av_response           (),                                                                     // (terminated)
		.av_writeresponsevalid ()                                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pll_reconfig_0_mgmt_avalon_slave_agent (
		.clk                     (clk_source_clk_clk),                                                //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (pll_reconfig_0_mgmt_avalon_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (pll_reconfig_0_mgmt_avalon_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (pll_reconfig_0_mgmt_avalon_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (pll_reconfig_0_mgmt_avalon_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (pll_reconfig_0_mgmt_avalon_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (pll_reconfig_0_mgmt_avalon_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (pll_reconfig_0_mgmt_avalon_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (pll_reconfig_0_mgmt_avalon_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (pll_reconfig_0_mgmt_avalon_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (pll_reconfig_0_mgmt_avalon_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (pll_reconfig_0_mgmt_avalon_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (pll_reconfig_0_mgmt_avalon_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (pll_reconfig_0_mgmt_avalon_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (pll_reconfig_0_mgmt_avalon_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (pll_reconfig_0_mgmt_avalon_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (pll_reconfig_0_mgmt_avalon_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                                 //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                                 //                .valid
		.cp_data                 (cmd_mux_src_data),                                                  //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                         //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                           //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                               //                .channel
		.rf_sink_ready           (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                     // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                     //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                      //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                     //                .error
		.rdata_fifo_src_ready    (pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo (
		.clk               (clk_source_clk_clk),                                                //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_data),             //        in.data
		.in_valid          (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (pll_reconfig_0_mgmt_avalon_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (pll_reconfig_0_mgmt_avalon_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                             // (terminated)
		.csr_read          (1'b0),                                                              // (terminated)
		.csr_write         (1'b0),                                                              // (terminated)
		.csr_readdata      (),                                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                              // (terminated)
		.almost_full_data  (),                                                                  // (terminated)
		.almost_empty_data (),                                                                  // (terminated)
		.in_empty          (1'b0),                                                              // (terminated)
		.out_empty         (),                                                                  // (terminated)
		.in_error          (1'b0),                                                              // (terminated)
		.out_error         (),                                                                  // (terminated)
		.in_channel        (1'b0),                                                              // (terminated)
		.out_channel       ()                                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios_ii_processor_debug_mem_slave_agent (
		.clk                     (clk_source_clk_clk),                                                 //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (nios_ii_processor_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios_ii_processor_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios_ii_processor_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios_ii_processor_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios_ii_processor_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios_ii_processor_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios_ii_processor_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios_ii_processor_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios_ii_processor_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios_ii_processor_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios_ii_processor_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios_ii_processor_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios_ii_processor_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios_ii_processor_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios_ii_processor_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios_ii_processor_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                              //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                              //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                               //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                        //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                            //                .channel
		.rf_sink_ready           (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios_ii_processor_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios_ii_processor_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios_ii_processor_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios_ii_processor_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios_ii_processor_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios_ii_processor_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_source_clk_clk),                                                 //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (nios_ii_processor_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios_ii_processor_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios_ii_processor_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios_ii_processor_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios_ii_processor_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios_ii_processor_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                              // (terminated)
		.csr_read          (1'b0),                                                               // (terminated)
		.csr_write         (1'b0),                                                               // (terminated)
		.csr_readdata      (),                                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                               // (terminated)
		.almost_full_data  (),                                                                   // (terminated)
		.almost_empty_data (),                                                                   // (terminated)
		.in_empty          (1'b0),                                                               // (terminated)
		.out_empty         (),                                                                   // (terminated)
		.in_error          (1'b0),                                                               // (terminated)
		.out_error         (),                                                                   // (terminated)
		.in_channel        (1'b0),                                                               // (terminated)
		.out_channel       ()                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) wdt_s1_agent (
		.clk                     (clk_source_clk_clk),                                        //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (wdt_s1_agent_m0_address),                                   //              m0.address
		.m0_burstcount           (wdt_s1_agent_m0_burstcount),                                //                .burstcount
		.m0_byteenable           (wdt_s1_agent_m0_byteenable),                                //                .byteenable
		.m0_debugaccess          (wdt_s1_agent_m0_debugaccess),                               //                .debugaccess
		.m0_lock                 (wdt_s1_agent_m0_lock),                                      //                .lock
		.m0_readdata             (wdt_s1_agent_m0_readdata),                                  //                .readdata
		.m0_readdatavalid        (wdt_s1_agent_m0_readdatavalid),                             //                .readdatavalid
		.m0_read                 (wdt_s1_agent_m0_read),                                      //                .read
		.m0_waitrequest          (wdt_s1_agent_m0_waitrequest),                               //                .waitrequest
		.m0_writedata            (wdt_s1_agent_m0_writedata),                                 //                .writedata
		.m0_write                (wdt_s1_agent_m0_write),                                     //                .write
		.rp_endofpacket          (wdt_s1_agent_rp_endofpacket),                               //              rp.endofpacket
		.rp_ready                (wdt_s1_agent_rp_ready),                                     //                .ready
		.rp_valid                (wdt_s1_agent_rp_valid),                                     //                .valid
		.rp_data                 (wdt_s1_agent_rp_data),                                      //                .data
		.rp_startofpacket        (wdt_s1_agent_rp_startofpacket),                             //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                   //                .channel
		.rf_sink_ready           (wdt_s1_agent_rsp_fifo_out_ready),                           //         rf_sink.ready
		.rf_sink_valid           (wdt_s1_agent_rsp_fifo_out_valid),                           //                .valid
		.rf_sink_startofpacket   (wdt_s1_agent_rsp_fifo_out_startofpacket),                   //                .startofpacket
		.rf_sink_endofpacket     (wdt_s1_agent_rsp_fifo_out_endofpacket),                     //                .endofpacket
		.rf_sink_data            (wdt_s1_agent_rsp_fifo_out_data),                            //                .data
		.rf_source_ready         (wdt_s1_agent_rf_source_ready),                              //       rf_source.ready
		.rf_source_valid         (wdt_s1_agent_rf_source_valid),                              //                .valid
		.rf_source_startofpacket (wdt_s1_agent_rf_source_startofpacket),                      //                .startofpacket
		.rf_source_endofpacket   (wdt_s1_agent_rf_source_endofpacket),                        //                .endofpacket
		.rf_source_data          (wdt_s1_agent_rf_source_data),                               //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (wdt_s1_agent_rdata_fifo_src_ready),                         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (wdt_s1_agent_rdata_fifo_src_valid),                         //                .valid
		.rdata_fifo_src_data     (wdt_s1_agent_rdata_fifo_src_data),                          //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) wdt_s1_agent_rsp_fifo (
		.clk               (clk_source_clk_clk),                                        //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (wdt_s1_agent_rf_source_data),                               //        in.data
		.in_valid          (wdt_s1_agent_rf_source_valid),                              //          .valid
		.in_ready          (wdt_s1_agent_rf_source_ready),                              //          .ready
		.in_startofpacket  (wdt_s1_agent_rf_source_startofpacket),                      //          .startofpacket
		.in_endofpacket    (wdt_s1_agent_rf_source_endofpacket),                        //          .endofpacket
		.out_data          (wdt_s1_agent_rsp_fifo_out_data),                            //       out.data
		.out_valid         (wdt_s1_agent_rsp_fifo_out_valid),                           //          .valid
		.out_ready         (wdt_s1_agent_rsp_fifo_out_ready),                           //          .ready
		.out_startofpacket (wdt_s1_agent_rsp_fifo_out_startofpacket),                   //          .startofpacket
		.out_endofpacket   (wdt_s1_agent_rsp_fifo_out_endofpacket),                     //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (89),
		.PKT_ORI_BURST_SIZE_L      (87),
		.PKT_RESPONSE_STATUS_H     (86),
		.PKT_RESPONSE_STATUS_L     (85),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_TRANS_LOCK            (54),
		.PKT_BEGIN_BURST           (69),
		.PKT_PROTECTION_H          (80),
		.PKT_PROTECTION_L          (78),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_POSTED          (51),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.PKT_DATA_H                (15),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_SRC_ID_H              (73),
		.PKT_SRC_ID_L              (71),
		.PKT_DEST_ID_H             (76),
		.PKT_DEST_ID_L             (74),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (90),
		.AVS_BURSTCOUNT_W          (2),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) on_chip_memory_s1_agent (
		.clk                     (clk_source_clk_clk),                                        //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (on_chip_memory_s1_agent_m0_address),                        //              m0.address
		.m0_burstcount           (on_chip_memory_s1_agent_m0_burstcount),                     //                .burstcount
		.m0_byteenable           (on_chip_memory_s1_agent_m0_byteenable),                     //                .byteenable
		.m0_debugaccess          (on_chip_memory_s1_agent_m0_debugaccess),                    //                .debugaccess
		.m0_lock                 (on_chip_memory_s1_agent_m0_lock),                           //                .lock
		.m0_readdata             (on_chip_memory_s1_agent_m0_readdata),                       //                .readdata
		.m0_readdatavalid        (on_chip_memory_s1_agent_m0_readdatavalid),                  //                .readdatavalid
		.m0_read                 (on_chip_memory_s1_agent_m0_read),                           //                .read
		.m0_waitrequest          (on_chip_memory_s1_agent_m0_waitrequest),                    //                .waitrequest
		.m0_writedata            (on_chip_memory_s1_agent_m0_writedata),                      //                .writedata
		.m0_write                (on_chip_memory_s1_agent_m0_write),                          //                .write
		.rp_endofpacket          (on_chip_memory_s1_agent_rp_endofpacket),                    //              rp.endofpacket
		.rp_ready                (on_chip_memory_s1_agent_rp_ready),                          //                .ready
		.rp_valid                (on_chip_memory_s1_agent_rp_valid),                          //                .valid
		.rp_data                 (on_chip_memory_s1_agent_rp_data),                           //                .data
		.rp_startofpacket        (on_chip_memory_s1_agent_rp_startofpacket),                  //                .startofpacket
		.cp_ready                (on_chip_memory_s1_burst_adapter_source0_ready),             //              cp.ready
		.cp_valid                (on_chip_memory_s1_burst_adapter_source0_valid),             //                .valid
		.cp_data                 (on_chip_memory_s1_burst_adapter_source0_data),              //                .data
		.cp_startofpacket        (on_chip_memory_s1_burst_adapter_source0_startofpacket),     //                .startofpacket
		.cp_endofpacket          (on_chip_memory_s1_burst_adapter_source0_endofpacket),       //                .endofpacket
		.cp_channel              (on_chip_memory_s1_burst_adapter_source0_channel),           //                .channel
		.rf_sink_ready           (on_chip_memory_s1_agent_rsp_fifo_out_ready),                //         rf_sink.ready
		.rf_sink_valid           (on_chip_memory_s1_agent_rsp_fifo_out_valid),                //                .valid
		.rf_sink_startofpacket   (on_chip_memory_s1_agent_rsp_fifo_out_startofpacket),        //                .startofpacket
		.rf_sink_endofpacket     (on_chip_memory_s1_agent_rsp_fifo_out_endofpacket),          //                .endofpacket
		.rf_sink_data            (on_chip_memory_s1_agent_rsp_fifo_out_data),                 //                .data
		.rf_source_ready         (on_chip_memory_s1_agent_rf_source_ready),                   //       rf_source.ready
		.rf_source_valid         (on_chip_memory_s1_agent_rf_source_valid),                   //                .valid
		.rf_source_startofpacket (on_chip_memory_s1_agent_rf_source_startofpacket),           //                .startofpacket
		.rf_source_endofpacket   (on_chip_memory_s1_agent_rf_source_endofpacket),             //                .endofpacket
		.rf_source_data          (on_chip_memory_s1_agent_rf_source_data),                    //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (on_chip_memory_s1_agent_rdata_fifo_src_ready),              //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (on_chip_memory_s1_agent_rdata_fifo_src_valid),              //                .valid
		.rdata_fifo_src_data     (on_chip_memory_s1_agent_rdata_fifo_src_data),               //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (91),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) on_chip_memory_s1_agent_rsp_fifo (
		.clk               (clk_source_clk_clk),                                        //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (on_chip_memory_s1_agent_rf_source_data),                    //        in.data
		.in_valid          (on_chip_memory_s1_agent_rf_source_valid),                   //          .valid
		.in_ready          (on_chip_memory_s1_agent_rf_source_ready),                   //          .ready
		.in_startofpacket  (on_chip_memory_s1_agent_rf_source_startofpacket),           //          .startofpacket
		.in_endofpacket    (on_chip_memory_s1_agent_rf_source_endofpacket),             //          .endofpacket
		.out_data          (on_chip_memory_s1_agent_rsp_fifo_out_data),                 //       out.data
		.out_valid         (on_chip_memory_s1_agent_rsp_fifo_out_valid),                //          .valid
		.out_ready         (on_chip_memory_s1_agent_rsp_fifo_out_ready),                //          .ready
		.out_startofpacket (on_chip_memory_s1_agent_rsp_fifo_out_startofpacket),        //          .startofpacket
		.out_endofpacket   (on_chip_memory_s1_agent_rsp_fifo_out_endofpacket),          //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (107),
		.PKT_ORI_BURST_SIZE_L      (105),
		.PKT_RESPONSE_STATUS_H     (104),
		.PKT_RESPONSE_STATUS_L     (103),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (98),
		.PKT_PROTECTION_L          (96),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (91),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (94),
		.PKT_DEST_ID_L             (92),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (5),
		.ST_DATA_W                 (108),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_spi_control_port_agent (
		.clk                     (clk_source_clk_clk),                                        //             clk.clk
		.reset                   (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (spi_spi_control_port_agent_m0_address),                     //              m0.address
		.m0_burstcount           (spi_spi_control_port_agent_m0_burstcount),                  //                .burstcount
		.m0_byteenable           (spi_spi_control_port_agent_m0_byteenable),                  //                .byteenable
		.m0_debugaccess          (spi_spi_control_port_agent_m0_debugaccess),                 //                .debugaccess
		.m0_lock                 (spi_spi_control_port_agent_m0_lock),                        //                .lock
		.m0_readdata             (spi_spi_control_port_agent_m0_readdata),                    //                .readdata
		.m0_readdatavalid        (spi_spi_control_port_agent_m0_readdatavalid),               //                .readdatavalid
		.m0_read                 (spi_spi_control_port_agent_m0_read),                        //                .read
		.m0_waitrequest          (spi_spi_control_port_agent_m0_waitrequest),                 //                .waitrequest
		.m0_writedata            (spi_spi_control_port_agent_m0_writedata),                   //                .writedata
		.m0_write                (spi_spi_control_port_agent_m0_write),                       //                .write
		.rp_endofpacket          (spi_spi_control_port_agent_rp_endofpacket),                 //              rp.endofpacket
		.rp_ready                (spi_spi_control_port_agent_rp_ready),                       //                .ready
		.rp_valid                (spi_spi_control_port_agent_rp_valid),                       //                .valid
		.rp_data                 (spi_spi_control_port_agent_rp_data),                        //                .data
		.rp_startofpacket        (spi_spi_control_port_agent_rp_startofpacket),               //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                     //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                     //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                      //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                             //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                               //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                   //                .channel
		.rf_sink_ready           (spi_spi_control_port_agent_rsp_fifo_out_ready),             //         rf_sink.ready
		.rf_sink_valid           (spi_spi_control_port_agent_rsp_fifo_out_valid),             //                .valid
		.rf_sink_startofpacket   (spi_spi_control_port_agent_rsp_fifo_out_startofpacket),     //                .startofpacket
		.rf_sink_endofpacket     (spi_spi_control_port_agent_rsp_fifo_out_endofpacket),       //                .endofpacket
		.rf_sink_data            (spi_spi_control_port_agent_rsp_fifo_out_data),              //                .data
		.rf_source_ready         (spi_spi_control_port_agent_rf_source_ready),                //       rf_source.ready
		.rf_source_valid         (spi_spi_control_port_agent_rf_source_valid),                //                .valid
		.rf_source_startofpacket (spi_spi_control_port_agent_rf_source_startofpacket),        //                .startofpacket
		.rf_source_endofpacket   (spi_spi_control_port_agent_rf_source_endofpacket),          //                .endofpacket
		.rf_source_data          (spi_spi_control_port_agent_rf_source_data),                 //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                         //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                          //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                         //                .error
		.rdata_fifo_src_ready    (spi_spi_control_port_agent_rdata_fifo_src_ready),           //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_spi_control_port_agent_rdata_fifo_src_valid),           //                .valid
		.rdata_fifo_src_data     (spi_spi_control_port_agent_rdata_fifo_src_data),            //                .data
		.m0_response             (2'b00),                                                     //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                       //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (109),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_spi_control_port_agent_rsp_fifo (
		.clk               (clk_source_clk_clk),                                        //       clk.clk
		.reset             (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (spi_spi_control_port_agent_rf_source_data),                 //        in.data
		.in_valid          (spi_spi_control_port_agent_rf_source_valid),                //          .valid
		.in_ready          (spi_spi_control_port_agent_rf_source_ready),                //          .ready
		.in_startofpacket  (spi_spi_control_port_agent_rf_source_startofpacket),        //          .startofpacket
		.in_endofpacket    (spi_spi_control_port_agent_rf_source_endofpacket),          //          .endofpacket
		.out_data          (spi_spi_control_port_agent_rsp_fifo_out_data),              //       out.data
		.out_valid         (spi_spi_control_port_agent_rsp_fifo_out_valid),             //          .valid
		.out_ready         (spi_spi_control_port_agent_rsp_fifo_out_ready),             //          .ready
		.out_startofpacket (spi_spi_control_port_agent_rsp_fifo_out_startofpacket),     //          .startofpacket
		.out_endofpacket   (spi_spi_control_port_agent_rsp_fifo_out_endofpacket),       //          .endofpacket
		.csr_address       (2'b00),                                                     // (terminated)
		.csr_read          (1'b0),                                                      // (terminated)
		.csr_write         (1'b0),                                                      // (terminated)
		.csr_readdata      (),                                                          // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                      // (terminated)
		.almost_full_data  (),                                                          // (terminated)
		.almost_empty_data (),                                                          // (terminated)
		.in_empty          (1'b0),                                                      // (terminated)
		.out_empty         (),                                                          // (terminated)
		.in_error          (1'b0),                                                      // (terminated)
		.out_error         (),                                                          // (terminated)
		.in_channel        (1'b0),                                                      // (terminated)
		.out_channel       ()                                                           // (terminated)
	);

	p4_parte1_mm_interconnect_0_router router (
		.sink_ready         (packets_to_master_0_avalon_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (packets_to_master_0_avalon_master_agent_cp_valid),          //          .valid
		.sink_data          (packets_to_master_0_avalon_master_agent_cp_data),           //          .data
		.sink_startofpacket (packets_to_master_0_avalon_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (packets_to_master_0_avalon_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                          //       src.ready
		.src_valid          (router_src_valid),                                          //          .valid
		.src_data           (router_src_data),                                           //          .data
		.src_channel        (router_src_channel),                                        //          .channel
		.src_startofpacket  (router_src_startofpacket),                                  //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                                     //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router router_001 (
		.sink_ready         (packets_to_master_1_avalon_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (packets_to_master_1_avalon_master_agent_cp_valid),          //          .valid
		.sink_data          (packets_to_master_1_avalon_master_agent_cp_data),           //          .data
		.sink_startofpacket (packets_to_master_1_avalon_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (packets_to_master_1_avalon_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                                      //       src.ready
		.src_valid          (router_001_src_valid),                                      //          .valid
		.src_data           (router_001_src_data),                                       //          .data
		.src_channel        (router_001_src_channel),                                    //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (nios_ii_processor_data_master_agent_cp_ready),              //      sink.ready
		.sink_valid         (nios_ii_processor_data_master_agent_cp_valid),              //          .valid
		.sink_data          (nios_ii_processor_data_master_agent_cp_data),               //          .data
		.sink_startofpacket (nios_ii_processor_data_master_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (nios_ii_processor_data_master_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                                      //       src.ready
		.src_valid          (router_002_src_valid),                                      //          .valid
		.src_data           (router_002_src_data),                                       //          .data
		.src_channel        (router_002_src_channel),                                    //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (nios_ii_processor_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios_ii_processor_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios_ii_processor_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios_ii_processor_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios_ii_processor_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_source_clk_clk),                                          //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_003_src_ready),                                        //       src.ready
		.src_valid          (router_003_src_valid),                                        //          .valid
		.src_data           (router_003_src_data),                                         //          .data
		.src_channel        (router_003_src_channel),                                      //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                                //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                                   //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (i2c_avalon_master_agent_cp_ready),                          //      sink.ready
		.sink_valid         (i2c_avalon_master_agent_cp_valid),                          //          .valid
		.sink_data          (i2c_avalon_master_agent_cp_data),                           //          .data
		.sink_startofpacket (i2c_avalon_master_agent_cp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (i2c_avalon_master_agent_cp_endofpacket),                    //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                                      //       src.ready
		.src_valid          (router_004_src_valid),                                      //          .valid
		.src_data           (router_004_src_data),                                       //          .data
		.src_channel        (router_004_src_channel),                                    //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (pll_reconfig_0_mgmt_avalon_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (pll_reconfig_0_mgmt_avalon_slave_agent_rp_valid),           //          .valid
		.sink_data          (pll_reconfig_0_mgmt_avalon_slave_agent_rp_data),            //          .data
		.sink_startofpacket (pll_reconfig_0_mgmt_avalon_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (pll_reconfig_0_mgmt_avalon_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                                      //       src.ready
		.src_valid          (router_005_src_valid),                                      //          .valid
		.src_data           (router_005_src_data),                                       //          .data
		.src_channel        (router_005_src_channel),                                    //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (nios_ii_processor_debug_mem_slave_agent_rp_ready),          //      sink.ready
		.sink_valid         (nios_ii_processor_debug_mem_slave_agent_rp_valid),          //          .valid
		.sink_data          (nios_ii_processor_debug_mem_slave_agent_rp_data),           //          .data
		.sink_startofpacket (nios_ii_processor_debug_mem_slave_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios_ii_processor_debug_mem_slave_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                                      //       src.ready
		.src_valid          (router_006_src_valid),                                      //          .valid
		.src_data           (router_006_src_data),                                       //          .data
		.src_channel        (router_006_src_channel),                                    //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_006 router_007 (
		.sink_ready         (wdt_s1_agent_rp_ready),                                     //      sink.ready
		.sink_valid         (wdt_s1_agent_rp_valid),                                     //          .valid
		.sink_data          (wdt_s1_agent_rp_data),                                      //          .data
		.sink_startofpacket (wdt_s1_agent_rp_startofpacket),                             //          .startofpacket
		.sink_endofpacket   (wdt_s1_agent_rp_endofpacket),                               //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                                      //       src.ready
		.src_valid          (router_007_src_valid),                                      //          .valid
		.src_data           (router_007_src_data),                                       //          .data
		.src_channel        (router_007_src_channel),                                    //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_008 router_008 (
		.sink_ready         (on_chip_memory_s1_agent_rp_ready),                          //      sink.ready
		.sink_valid         (on_chip_memory_s1_agent_rp_valid),                          //          .valid
		.sink_data          (on_chip_memory_s1_agent_rp_data),                           //          .data
		.sink_startofpacket (on_chip_memory_s1_agent_rp_startofpacket),                  //          .startofpacket
		.sink_endofpacket   (on_chip_memory_s1_agent_rp_endofpacket),                    //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                                      //       src.ready
		.src_valid          (router_008_src_valid),                                      //          .valid
		.src_data           (router_008_src_data),                                       //          .data
		.src_channel        (router_008_src_channel),                                    //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (spi_spi_control_port_agent_rp_ready),                       //      sink.ready
		.sink_valid         (spi_spi_control_port_agent_rp_valid),                       //          .valid
		.sink_data          (spi_spi_control_port_agent_rp_data),                        //          .data
		.sink_startofpacket (spi_spi_control_port_agent_rp_startofpacket),               //          .startofpacket
		.sink_endofpacket   (spi_spi_control_port_agent_rp_endofpacket),                 //          .endofpacket
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                                      //       src.ready
		.src_valid          (router_009_src_valid),                                      //          .valid
		.src_data           (router_009_src_data),                                       //          .data
		.src_channel        (router_009_src_channel),                                    //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                              //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                                 //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (49),
		.PKT_ADDR_L                (18),
		.PKT_BEGIN_BURST           (69),
		.PKT_BYTE_CNT_H            (58),
		.PKT_BYTE_CNT_L            (56),
		.PKT_BYTEEN_H              (17),
		.PKT_BYTEEN_L              (16),
		.PKT_BURST_SIZE_H          (64),
		.PKT_BURST_SIZE_L          (62),
		.PKT_BURST_TYPE_H          (66),
		.PKT_BURST_TYPE_L          (65),
		.PKT_BURSTWRAP_H           (61),
		.PKT_BURSTWRAP_L           (59),
		.PKT_TRANS_COMPRESSED_READ (50),
		.PKT_TRANS_WRITE           (52),
		.PKT_TRANS_READ            (53),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (90),
		.ST_CHANNEL_W              (5),
		.OUT_BYTE_CNT_H            (57),
		.OUT_BURSTWRAP_H           (61),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (3),
		.BURSTWRAP_CONST_VALUE     (3),
		.ADAPTER_VERSION           ("13.1")
	) on_chip_memory_s1_burst_adapter (
		.clk                   (clk_source_clk_clk),                                        //       cr0.clk
		.reset                 (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // cr0_reset.reset
		.sink0_valid           (on_chip_memory_s1_cmd_width_adapter_src_valid),             //     sink0.valid
		.sink0_data            (on_chip_memory_s1_cmd_width_adapter_src_data),              //          .data
		.sink0_channel         (on_chip_memory_s1_cmd_width_adapter_src_channel),           //          .channel
		.sink0_startofpacket   (on_chip_memory_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket     (on_chip_memory_s1_cmd_width_adapter_src_endofpacket),       //          .endofpacket
		.sink0_ready           (on_chip_memory_s1_cmd_width_adapter_src_ready),             //          .ready
		.source0_valid         (on_chip_memory_s1_burst_adapter_source0_valid),             //   source0.valid
		.source0_data          (on_chip_memory_s1_burst_adapter_source0_data),              //          .data
		.source0_channel       (on_chip_memory_s1_burst_adapter_source0_channel),           //          .channel
		.source0_startofpacket (on_chip_memory_s1_burst_adapter_source0_startofpacket),     //          .startofpacket
		.source0_endofpacket   (on_chip_memory_s1_burst_adapter_source0_endofpacket),       //          .endofpacket
		.source0_ready         (on_chip_memory_s1_burst_adapter_source0_ready)              //          .ready
	);

	p4_parte1_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_src_ready),                                          //      sink.ready
		.sink_channel       (router_src_channel),                                        //          .channel
		.sink_data          (router_src_data),                                           //          .data
		.sink_startofpacket (router_src_startofpacket),                                  //          .startofpacket
		.sink_endofpacket   (router_src_endofpacket),                                    //          .endofpacket
		.sink_valid         (router_src_valid),                                          //          .valid
		.src0_ready         (cmd_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (cmd_demux_src0_valid),                                      //          .valid
		.src0_data          (cmd_demux_src0_data),                                       //          .data
		.src0_channel       (cmd_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (cmd_demux_src0_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_demux cmd_demux_001 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                                      //      sink.ready
		.sink_channel       (router_001_src_channel),                                    //          .channel
		.sink_data          (router_001_src_data),                                       //          .data
		.sink_startofpacket (router_001_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_001_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_001_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                                      //      sink.ready
		.sink_channel       (router_002_src_channel),                                    //          .channel
		.sink_data          (router_002_src_data),                                       //          .data
		.sink_startofpacket (router_002_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_002_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_002_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (cmd_demux_002_src1_ready),                                  //      src1.ready
		.src1_valid         (cmd_demux_002_src1_valid),                                  //          .valid
		.src1_data          (cmd_demux_002_src1_data),                                   //          .data
		.src1_channel       (cmd_demux_002_src1_channel),                                //          .channel
		.src1_startofpacket (cmd_demux_002_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (cmd_demux_002_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (cmd_demux_002_src2_ready),                                  //      src2.ready
		.src2_valid         (cmd_demux_002_src2_valid),                                  //          .valid
		.src2_data          (cmd_demux_002_src2_data),                                   //          .data
		.src2_channel       (cmd_demux_002_src2_channel),                                //          .channel
		.src2_startofpacket (cmd_demux_002_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (cmd_demux_002_src2_endofpacket),                            //          .endofpacket
		.src3_ready         (cmd_demux_002_src3_ready),                                  //      src3.ready
		.src3_valid         (cmd_demux_002_src3_valid),                                  //          .valid
		.src3_data          (cmd_demux_002_src3_data),                                   //          .data
		.src3_channel       (cmd_demux_002_src3_channel),                                //          .channel
		.src3_startofpacket (cmd_demux_002_src3_startofpacket),                          //          .startofpacket
		.src3_endofpacket   (cmd_demux_002_src3_endofpacket),                            //          .endofpacket
		.src4_ready         (cmd_demux_002_src4_ready),                                  //      src4.ready
		.src4_valid         (cmd_demux_002_src4_valid),                                  //          .valid
		.src4_data          (cmd_demux_002_src4_data),                                   //          .data
		.src4_channel       (cmd_demux_002_src4_channel),                                //          .channel
		.src4_startofpacket (cmd_demux_002_src4_startofpacket),                          //          .startofpacket
		.src4_endofpacket   (cmd_demux_002_src4_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                                      //      sink.ready
		.sink_channel       (router_003_src_channel),                                    //          .channel
		.sink_data          (router_003_src_data),                                       //          .data
		.sink_startofpacket (router_003_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_003_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_003_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (cmd_demux_003_src1_ready),                                  //      src1.ready
		.src1_valid         (cmd_demux_003_src1_valid),                                  //          .valid
		.src1_data          (cmd_demux_003_src1_data),                                   //          .data
		.src1_channel       (cmd_demux_003_src1_channel),                                //          .channel
		.src1_startofpacket (cmd_demux_003_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (cmd_demux_003_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (cmd_demux_003_src2_ready),                                  //      src2.ready
		.src2_valid         (cmd_demux_003_src2_valid),                                  //          .valid
		.src2_data          (cmd_demux_003_src2_data),                                   //          .data
		.src2_channel       (cmd_demux_003_src2_channel),                                //          .channel
		.src2_startofpacket (cmd_demux_003_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (cmd_demux_003_src2_endofpacket),                            //          .endofpacket
		.src3_ready         (cmd_demux_003_src3_ready),                                  //      src3.ready
		.src3_valid         (cmd_demux_003_src3_valid),                                  //          .valid
		.src3_data          (cmd_demux_003_src3_data),                                   //          .data
		.src3_channel       (cmd_demux_003_src3_channel),                                //          .channel
		.src3_startofpacket (cmd_demux_003_src3_startofpacket),                          //          .startofpacket
		.src3_endofpacket   (cmd_demux_003_src3_endofpacket),                            //          .endofpacket
		.src4_ready         (cmd_demux_003_src4_ready),                                  //      src4.ready
		.src4_valid         (cmd_demux_003_src4_valid),                                  //          .valid
		.src4_data          (cmd_demux_003_src4_data),                                   //          .data
		.src4_channel       (cmd_demux_003_src4_channel),                                //          .channel
		.src4_startofpacket (cmd_demux_003_src4_startofpacket),                          //          .startofpacket
		.src4_endofpacket   (cmd_demux_003_src4_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_demux cmd_demux_004 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                                      //      sink.ready
		.sink_channel       (router_004_src_channel),                                    //          .channel
		.sink_data          (router_004_src_data),                                       //          .data
		.sink_startofpacket (router_004_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_004_src_valid),                                      //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                                  //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                                  //          .valid
		.src0_data          (cmd_demux_004_src0_data),                                   //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                                //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                         //       src.ready
		.src_valid           (cmd_mux_src_valid),                                         //          .valid
		.src_data            (cmd_mux_src_data),                                          //          .data
		.src_channel         (cmd_mux_src_channel),                                       //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                                      //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                                    //          .channel
		.sink0_data          (cmd_demux_src0_data),                                       //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket),                                //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                            //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                  //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                  //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                   //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                            //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                  //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                  //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                   //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                          //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                     //          .valid
		.src_data            (cmd_mux_001_src_data),                                      //          .data
		.src_channel         (cmd_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_002_src1_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_002_src1_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_002_src1_channel),                                //          .channel
		.sink0_data          (cmd_demux_002_src1_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_002_src1_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src1_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_003_src1_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_003_src1_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_003_src1_channel),                                //          .channel
		.sink1_data          (cmd_demux_003_src1_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_003_src1_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src1_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_mux_001 cmd_mux_002 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                                     //          .valid
		.src_data            (cmd_mux_002_src_data),                                      //          .data
		.src_channel         (cmd_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_002_src2_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_002_src2_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_002_src2_channel),                                //          .channel
		.sink0_data          (cmd_demux_002_src2_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_002_src2_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src2_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_003_src2_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_003_src2_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_003_src2_channel),                                //          .channel
		.sink1_data          (cmd_demux_003_src2_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_003_src2_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src2_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_mux_001 cmd_mux_003 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                                     //          .valid
		.src_data            (cmd_mux_003_src_data),                                      //          .data
		.src_channel         (cmd_mux_003_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_002_src3_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_002_src3_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_002_src3_channel),                                //          .channel
		.sink0_data          (cmd_demux_002_src3_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_002_src3_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src3_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_003_src3_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_003_src3_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_003_src3_channel),                                //          .channel
		.sink1_data          (cmd_demux_003_src3_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_003_src3_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src3_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_cmd_mux_004 cmd_mux_004 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                     //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                     //          .valid
		.src_data            (cmd_mux_004_src_data),                                      //          .data
		.src_channel         (cmd_mux_004_src_channel),                                   //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (cmd_demux_002_src4_ready),                                  //     sink0.ready
		.sink0_valid         (cmd_demux_002_src4_valid),                                  //          .valid
		.sink0_channel       (cmd_demux_002_src4_channel),                                //          .channel
		.sink0_data          (cmd_demux_002_src4_data),                                   //          .data
		.sink0_startofpacket (cmd_demux_002_src4_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_002_src4_endofpacket),                            //          .endofpacket
		.sink1_ready         (cmd_demux_003_src4_ready),                                  //     sink1.ready
		.sink1_valid         (cmd_demux_003_src4_valid),                                  //          .valid
		.sink1_channel       (cmd_demux_003_src4_channel),                                //          .channel
		.sink1_data          (cmd_demux_003_src4_data),                                   //          .data
		.sink1_startofpacket (cmd_demux_003_src4_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (cmd_demux_003_src4_endofpacket),                            //          .endofpacket
		.sink2_ready         (cmd_demux_004_src0_ready),                                  //     sink2.ready
		.sink2_valid         (cmd_demux_004_src0_valid),                                  //          .valid
		.sink2_channel       (cmd_demux_004_src0_channel),                                //          .channel
		.sink2_data          (cmd_demux_004_src0_data),                                   //          .data
		.sink2_startofpacket (cmd_demux_004_src0_startofpacket),                          //          .startofpacket
		.sink2_endofpacket   (cmd_demux_004_src0_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_demux rsp_demux (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                                      //      sink.ready
		.sink_channel       (router_005_src_channel),                                    //          .channel
		.sink_data          (router_005_src_data),                                       //          .data
		.sink_startofpacket (router_005_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_005_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_src0_ready),                                      //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.src0_data          (rsp_demux_src0_data),                                       //          .data
		.src0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket),                                //          .endofpacket
		.src1_ready         (rsp_demux_src1_ready),                                      //      src1.ready
		.src1_valid         (rsp_demux_src1_valid),                                      //          .valid
		.src1_data          (rsp_demux_src1_data),                                       //          .data
		.src1_channel       (rsp_demux_src1_channel),                                    //          .channel
		.src1_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.src1_endofpacket   (rsp_demux_src1_endofpacket),                                //          .endofpacket
		.src2_ready         (rsp_demux_src2_ready),                                      //      src2.ready
		.src2_valid         (rsp_demux_src2_valid),                                      //          .valid
		.src2_data          (rsp_demux_src2_data),                                       //          .data
		.src2_channel       (rsp_demux_src2_channel),                                    //          .channel
		.src2_startofpacket (rsp_demux_src2_startofpacket),                              //          .startofpacket
		.src2_endofpacket   (rsp_demux_src2_endofpacket),                                //          .endofpacket
		.src3_ready         (rsp_demux_src3_ready),                                      //      src3.ready
		.src3_valid         (rsp_demux_src3_valid),                                      //          .valid
		.src3_data          (rsp_demux_src3_data),                                       //          .data
		.src3_channel       (rsp_demux_src3_channel),                                    //          .channel
		.src3_startofpacket (rsp_demux_src3_startofpacket),                              //          .startofpacket
		.src3_endofpacket   (rsp_demux_src3_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                                      //      sink.ready
		.sink_channel       (router_006_src_channel),                                    //          .channel
		.sink_data          (router_006_src_data),                                       //          .data
		.sink_startofpacket (router_006_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_006_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_001_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_demux_001 rsp_demux_002 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                                      //      sink.ready
		.sink_channel       (router_007_src_channel),                                    //          .channel
		.sink_data          (router_007_src_data),                                       //          .data
		.sink_startofpacket (router_007_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_007_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_002_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_002_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_002_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_002_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_002_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_002_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_002_src1_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_demux_001 rsp_demux_003 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (on_chip_memory_s1_rsp_width_adapter_src_ready),             //      sink.ready
		.sink_channel       (on_chip_memory_s1_rsp_width_adapter_src_channel),           //          .channel
		.sink_data          (on_chip_memory_s1_rsp_width_adapter_src_data),              //          .data
		.sink_startofpacket (on_chip_memory_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink_endofpacket   (on_chip_memory_s1_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink_valid         (on_chip_memory_s1_rsp_width_adapter_src_valid),             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_003_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_003_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_003_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_003_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_003_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_003_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_003_src1_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_demux_004 rsp_demux_004 (
		.clk                (clk_source_clk_clk),                                        //       clk.clk
		.reset              (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                                      //      sink.ready
		.sink_channel       (router_009_src_channel),                                    //          .channel
		.sink_data          (router_009_src_data),                                       //          .data
		.sink_startofpacket (router_009_src_startofpacket),                              //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                                //          .endofpacket
		.sink_valid         (router_009_src_valid),                                      //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                                  //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.src0_data          (rsp_demux_004_src0_data),                                   //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket),                            //          .endofpacket
		.src1_ready         (rsp_demux_004_src1_ready),                                  //      src1.ready
		.src1_valid         (rsp_demux_004_src1_valid),                                  //          .valid
		.src1_data          (rsp_demux_004_src1_data),                                   //          .data
		.src1_channel       (rsp_demux_004_src1_channel),                                //          .channel
		.src1_startofpacket (rsp_demux_004_src1_startofpacket),                          //          .startofpacket
		.src1_endofpacket   (rsp_demux_004_src1_endofpacket),                            //          .endofpacket
		.src2_ready         (rsp_demux_004_src2_ready),                                  //      src2.ready
		.src2_valid         (rsp_demux_004_src2_valid),                                  //          .valid
		.src2_data          (rsp_demux_004_src2_data),                                   //          .data
		.src2_channel       (rsp_demux_004_src2_channel),                                //          .channel
		.src2_startofpacket (rsp_demux_004_src2_startofpacket),                          //          .startofpacket
		.src2_endofpacket   (rsp_demux_004_src2_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_src_ready),                                         //       src.ready
		.src_valid           (rsp_mux_src_valid),                                         //          .valid
		.src_data            (rsp_mux_src_data),                                          //          .data
		.src_channel         (rsp_mux_src_channel),                                       //          .channel
		.src_startofpacket   (rsp_mux_src_startofpacket),                                 //          .startofpacket
		.src_endofpacket     (rsp_mux_src_endofpacket),                                   //          .endofpacket
		.sink0_ready         (rsp_demux_src0_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src0_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src0_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src0_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src0_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src0_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_mux rsp_mux_001 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                                     //          .valid
		.src_data            (rsp_mux_001_src_data),                                      //          .data
		.src_channel         (rsp_mux_001_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_src1_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src1_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src1_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src1_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src1_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src1_endofpacket)                                 //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                                     //          .valid
		.src_data            (rsp_mux_002_src_data),                                      //          .data
		.src_channel         (rsp_mux_002_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_src2_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src2_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src2_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src2_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src2_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src2_endofpacket),                                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src0_ready),                                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src0_valid),                                  //          .valid
		.sink1_channel       (rsp_demux_001_src0_channel),                                //          .channel
		.sink1_data          (rsp_demux_001_src0_data),                                   //          .data
		.sink1_startofpacket (rsp_demux_001_src0_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src0_endofpacket),                            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src0_ready),                                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src0_valid),                                  //          .valid
		.sink2_channel       (rsp_demux_002_src0_channel),                                //          .channel
		.sink2_data          (rsp_demux_002_src0_data),                                   //          .data
		.sink2_startofpacket (rsp_demux_002_src0_startofpacket),                          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src0_endofpacket),                            //          .endofpacket
		.sink3_ready         (rsp_demux_003_src0_ready),                                  //     sink3.ready
		.sink3_valid         (rsp_demux_003_src0_valid),                                  //          .valid
		.sink3_channel       (rsp_demux_003_src0_channel),                                //          .channel
		.sink3_data          (rsp_demux_003_src0_data),                                   //          .data
		.sink3_startofpacket (rsp_demux_003_src0_startofpacket),                          //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src0_endofpacket),                            //          .endofpacket
		.sink4_ready         (rsp_demux_004_src0_ready),                                  //     sink4.ready
		.sink4_valid         (rsp_demux_004_src0_valid),                                  //          .valid
		.sink4_channel       (rsp_demux_004_src0_channel),                                //          .channel
		.sink4_data          (rsp_demux_004_src0_data),                                   //          .data
		.sink4_startofpacket (rsp_demux_004_src0_startofpacket),                          //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src0_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                                     //          .valid
		.src_data            (rsp_mux_003_src_data),                                      //          .data
		.src_channel         (rsp_mux_003_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_src3_ready),                                      //     sink0.ready
		.sink0_valid         (rsp_demux_src3_valid),                                      //          .valid
		.sink0_channel       (rsp_demux_src3_channel),                                    //          .channel
		.sink0_data          (rsp_demux_src3_data),                                       //          .data
		.sink0_startofpacket (rsp_demux_src3_startofpacket),                              //          .startofpacket
		.sink0_endofpacket   (rsp_demux_src3_endofpacket),                                //          .endofpacket
		.sink1_ready         (rsp_demux_001_src1_ready),                                  //     sink1.ready
		.sink1_valid         (rsp_demux_001_src1_valid),                                  //          .valid
		.sink1_channel       (rsp_demux_001_src1_channel),                                //          .channel
		.sink1_data          (rsp_demux_001_src1_data),                                   //          .data
		.sink1_startofpacket (rsp_demux_001_src1_startofpacket),                          //          .startofpacket
		.sink1_endofpacket   (rsp_demux_001_src1_endofpacket),                            //          .endofpacket
		.sink2_ready         (rsp_demux_002_src1_ready),                                  //     sink2.ready
		.sink2_valid         (rsp_demux_002_src1_valid),                                  //          .valid
		.sink2_channel       (rsp_demux_002_src1_channel),                                //          .channel
		.sink2_data          (rsp_demux_002_src1_data),                                   //          .data
		.sink2_startofpacket (rsp_demux_002_src1_startofpacket),                          //          .startofpacket
		.sink2_endofpacket   (rsp_demux_002_src1_endofpacket),                            //          .endofpacket
		.sink3_ready         (rsp_demux_003_src1_ready),                                  //     sink3.ready
		.sink3_valid         (rsp_demux_003_src1_valid),                                  //          .valid
		.sink3_channel       (rsp_demux_003_src1_channel),                                //          .channel
		.sink3_data          (rsp_demux_003_src1_data),                                   //          .data
		.sink3_startofpacket (rsp_demux_003_src1_startofpacket),                          //          .startofpacket
		.sink3_endofpacket   (rsp_demux_003_src1_endofpacket),                            //          .endofpacket
		.sink4_ready         (rsp_demux_004_src1_ready),                                  //     sink4.ready
		.sink4_valid         (rsp_demux_004_src1_valid),                                  //          .valid
		.sink4_channel       (rsp_demux_004_src1_channel),                                //          .channel
		.sink4_data          (rsp_demux_004_src1_data),                                   //          .data
		.sink4_startofpacket (rsp_demux_004_src1_startofpacket),                          //          .startofpacket
		.sink4_endofpacket   (rsp_demux_004_src1_endofpacket)                             //          .endofpacket
	);

	p4_parte1_mm_interconnect_0_rsp_mux rsp_mux_004 (
		.clk                 (clk_source_clk_clk),                                        //       clk.clk
		.reset               (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                     //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                     //          .valid
		.src_data            (rsp_mux_004_src_data),                                      //          .data
		.src_channel         (rsp_mux_004_src_channel),                                   //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                             //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                               //          .endofpacket
		.sink0_ready         (rsp_demux_004_src2_ready),                                  //     sink0.ready
		.sink0_valid         (rsp_demux_004_src2_valid),                                  //          .valid
		.sink0_channel       (rsp_demux_004_src2_channel),                                //          .channel
		.sink0_data          (rsp_demux_004_src2_data),                                   //          .data
		.sink0_startofpacket (rsp_demux_004_src2_startofpacket),                          //          .startofpacket
		.sink0_endofpacket   (rsp_demux_004_src2_endofpacket)                             //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (49),
		.IN_PKT_ADDR_L                 (18),
		.IN_PKT_DATA_H                 (15),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (17),
		.IN_PKT_BYTEEN_L               (16),
		.IN_PKT_BYTE_CNT_H             (58),
		.IN_PKT_BYTE_CNT_L             (56),
		.IN_PKT_TRANS_COMPRESSED_READ  (50),
		.IN_PKT_TRANS_WRITE            (52),
		.IN_PKT_BURSTWRAP_H            (61),
		.IN_PKT_BURSTWRAP_L            (59),
		.IN_PKT_BURST_SIZE_H           (64),
		.IN_PKT_BURST_SIZE_L           (62),
		.IN_PKT_RESPONSE_STATUS_H      (86),
		.IN_PKT_RESPONSE_STATUS_L      (85),
		.IN_PKT_TRANS_EXCLUSIVE        (55),
		.IN_PKT_BURST_TYPE_H           (66),
		.IN_PKT_BURST_TYPE_L           (65),
		.IN_PKT_ORI_BURST_SIZE_L       (87),
		.IN_PKT_ORI_BURST_SIZE_H       (89),
		.IN_ST_DATA_W                  (90),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (104),
		.OUT_PKT_RESPONSE_STATUS_L     (103),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (105),
		.OUT_PKT_ORI_BURST_SIZE_H      (107),
		.OUT_ST_DATA_W                 (108),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) on_chip_memory_s1_rsp_width_adapter (
		.clk                  (clk_source_clk_clk),                                        //       clk.clk
		.reset                (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (router_008_src_valid),                                      //      sink.valid
		.in_channel           (router_008_src_channel),                                    //          .channel
		.in_startofpacket     (router_008_src_startofpacket),                              //          .startofpacket
		.in_endofpacket       (router_008_src_endofpacket),                                //          .endofpacket
		.in_ready             (router_008_src_ready),                                      //          .ready
		.in_data              (router_008_src_data),                                       //          .data
		.out_endofpacket      (on_chip_memory_s1_rsp_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (on_chip_memory_s1_rsp_width_adapter_src_data),              //          .data
		.out_channel          (on_chip_memory_s1_rsp_width_adapter_src_channel),           //          .channel
		.out_valid            (on_chip_memory_s1_rsp_width_adapter_src_valid),             //          .valid
		.out_ready            (on_chip_memory_s1_rsp_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (on_chip_memory_s1_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (104),
		.IN_PKT_RESPONSE_STATUS_L      (103),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (105),
		.IN_PKT_ORI_BURST_SIZE_H       (107),
		.IN_ST_DATA_W                  (108),
		.OUT_PKT_ADDR_H                (49),
		.OUT_PKT_ADDR_L                (18),
		.OUT_PKT_DATA_H                (15),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (17),
		.OUT_PKT_BYTEEN_L              (16),
		.OUT_PKT_BYTE_CNT_H            (58),
		.OUT_PKT_BYTE_CNT_L            (56),
		.OUT_PKT_TRANS_COMPRESSED_READ (50),
		.OUT_PKT_BURST_SIZE_H          (64),
		.OUT_PKT_BURST_SIZE_L          (62),
		.OUT_PKT_RESPONSE_STATUS_H     (86),
		.OUT_PKT_RESPONSE_STATUS_L     (85),
		.OUT_PKT_TRANS_EXCLUSIVE       (55),
		.OUT_PKT_BURST_TYPE_H          (66),
		.OUT_PKT_BURST_TYPE_L          (65),
		.OUT_PKT_ORI_BURST_SIZE_L      (87),
		.OUT_PKT_ORI_BURST_SIZE_H      (89),
		.OUT_ST_DATA_W                 (90),
		.ST_CHANNEL_W                  (5),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) on_chip_memory_s1_cmd_width_adapter (
		.clk                  (clk_source_clk_clk),                                        //       clk.clk
		.reset                (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_valid             (cmd_mux_003_src_valid),                                     //      sink.valid
		.in_channel           (cmd_mux_003_src_channel),                                   //          .channel
		.in_startofpacket     (cmd_mux_003_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (cmd_mux_003_src_endofpacket),                               //          .endofpacket
		.in_ready             (cmd_mux_003_src_ready),                                     //          .ready
		.in_data              (cmd_mux_003_src_data),                                      //          .data
		.out_endofpacket      (on_chip_memory_s1_cmd_width_adapter_src_endofpacket),       //       src.endofpacket
		.out_data             (on_chip_memory_s1_cmd_width_adapter_src_data),              //          .data
		.out_channel          (on_chip_memory_s1_cmd_width_adapter_src_channel),           //          .channel
		.out_valid            (on_chip_memory_s1_cmd_width_adapter_src_valid),             //          .valid
		.out_ready            (on_chip_memory_s1_cmd_width_adapter_src_ready),             //          .ready
		.out_startofpacket    (on_chip_memory_s1_cmd_width_adapter_src_startofpacket),     //          .startofpacket
		.in_command_size_data (3'b000)                                                     // (terminated)
	);

	p4_parte1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_source_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (pll_reconfig_0_mgmt_avalon_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                                //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                               //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                               //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                                //         .error
	);

	p4_parte1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_source_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios_ii_processor_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                             //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                            //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                            //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                             //         .error
	);

	p4_parte1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_source_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (wdt_s1_agent_rdata_fifo_src_data),                          //     in_0.data
		.in_0_valid     (wdt_s1_agent_rdata_fifo_src_valid),                         //         .valid
		.in_0_ready     (wdt_s1_agent_rdata_fifo_src_ready),                         //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                          //         .error
	);

	p4_parte1_mm_interconnect_0_avalon_st_adapter_003 #(
		.inBitsPerSymbol (18),
		.inUsePackets    (0),
		.inDataWidth     (18),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (18),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_source_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (on_chip_memory_s1_agent_rdata_fifo_src_data),               //     in_0.data
		.in_0_valid     (on_chip_memory_s1_agent_rdata_fifo_src_valid),              //         .valid
		.in_0_ready     (on_chip_memory_s1_agent_rdata_fifo_src_ready),              //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                          //         .error
	);

	p4_parte1_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_source_clk_clk),                                        // in_clk_0.clk
		.in_rst_0_reset (packets_to_master_0_clk_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (spi_spi_control_port_agent_rdata_fifo_src_data),            //     in_0.data
		.in_0_valid     (spi_spi_control_port_agent_rdata_fifo_src_valid),           //         .valid
		.in_0_ready     (spi_spi_control_port_agent_rdata_fifo_src_ready),           //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                          //         .error
	);

endmodule
