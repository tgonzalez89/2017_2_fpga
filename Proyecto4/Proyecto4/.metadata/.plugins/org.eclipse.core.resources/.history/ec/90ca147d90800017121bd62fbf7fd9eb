#include <stdio.h>

#define TIMER_0_BASE (unsigned int*)0x11000
#define CLK_PERIOD 20 //in nanoseconds - 50 MHz

//--- Matrices data ---//
// Each byte is composed as: [repeated sign bit][7-bit 2's complement data (1 sign bit, 6 magnitude bits)]
// Examples: 0x19 = 0_0011001 = +25, 0xdd = 1_1011101 = -35
signed char RANDA[68] = {
	0x2e, 0xc2, 0x37, 0x20,
	0xc9, 0xea, 0xe7, 0x25,
	0x32, 0xc0, 0x38, 0x00,
	0xd6, 0xc8, 0xde, 0x34,
	0xe6, 0x0c, 0xf4, 0xd0,
	0xc6, 0x04, 0xda, 0x22,
	0xd7, 0xe2, 0xdf, 0xcf,
	0xdc, 0x15, 0xf1, 0x32,
	0xc1, 0x04, 0xeb, 0x37,
	0xc2, 0x34, 0xeb, 0xe2,
	0x12, 0xf9, 0x1a, 0xdb,
	0xc2, 0xf7, 0xcb, 0xca,
	0xfe, 0xc3, 0xd8, 0x0e,
	0x37, 0xd1, 0xd8, 0xe5,
	0x35, 0xd0, 0xed, 0xd8,
	0x13, 0x2e, 0x2f, 0x13,
	0x00, 0x00, 0x00, 0x00
};
signed char RANDB[68] = {
	0xf7, 0xc4, 0x33, 0x0e,
	0xd3, 0x11, 0x30, 0x1b,
	0xdc, 0xf9, 0x2a, 0xe7,
	0x25, 0x21, 0x18, 0xf1,
	0xf6, 0xcb, 0xd8, 0xc8,
	0x11, 0x0d, 0x20, 0x2a,
	0xc6, 0x3e, 0xfe, 0xde,
	0x1a, 0xfc, 0xc7, 0xc6,
	0xc0, 0x36, 0x04, 0x0d,
	0x2a, 0xc2, 0xe0, 0x0c,
	0x0a, 0xde, 0x0f, 0x18,
	0xdc, 0xeb, 0xcb, 0x1f,
	0xf4, 0x35, 0x38, 0x1f,
	0x1f, 0xc6, 0x0e, 0xe0,
	0x3a, 0xc3, 0xef, 0x0a,
	0xf3, 0xf8, 0xe2, 0xc9,
	0x00, 0x00, 0x00, 0x00
};

//--- Matrix type ---//
typedef union  {
	unsigned char cd[2][2];
	signed char cds[2][2];
	unsigned int id; //cuatro valores concatenados en un dato de 32 bits, "cuál es el orden?"
} matrixClass;

//--- Main ---//
int main() {
	// Matrices for the calculations
	matrixClass* matA;
	matrixClass* matB;
	// Counter
	unsigned char i;
	// Timer data
	unsigned int* timer;
	unsigned int timer_data[2];
	unsigned int timer_data_joined;
	int cycles_elapsed;
	int time_elapsed;
	int determinants[16];

	//--- Run a 2x2 matrix multiplication 16 times using C code and measure the time.
	// Initialize the matrices
	matA = (matrixClass*)RANDA;
	matB = (matrixClass*)RANDB;
	// Set up the timer
	timer = TIMER_0_BASE;
	*(timer + 1) = 0x0008; //Stop timer
	*(timer + 2) = 0xffff; //Set periodl register to max value
	*(timer + 3) = 0xffff; //Set periodh register to max value
	*(timer + 1) = 0x0004; //Start timer
	// Run the multiplications
	for (i = 0; i < 16; i++) {
		short c00 = (*matA).cds[0][0] * (*matB).cds[0][0] + (*matA).cds[0][1] * (*matB).cds[1][0];
		short c01 = (*matA).cds[0][0] * (*matB).cds[0][1] + (*matA).cds[0][1] * (*matB).cds[1][1];
		short c10 = (*matA).cds[1][0] * (*matB).cds[0][0] + (*matA).cds[1][1] * (*matB).cds[1][0];
		short c11 = (*matA).cds[1][0] * (*matB).cds[0][1] + (*matA).cds[1][1] * (*matB).cds[1][1];
		determinants[i] = c00*c11 - c01*c10;
		matA++;
		matB++;
	}
	// Get the elapsed time during the test
	*(timer + 4) = 0x0000; //Indicate timer to take a snapshot
	timer_data[0] = *(timer + 4); //Get snapl register value
	timer_data[1] = *(timer + 5); //Get snaph register value
	timer_data[1] = timer_data[1] << 16; //snaph is now {snaph,0x0000}
	timer_data_joined = timer_data[1] | timer_data[0]; //{snaph,snapl}
	cycles_elapsed = 0xffffffff - timer_data_joined; //Cycles elapsed
	time_elapsed = cycles_elapsed * CLK_PERIOD; //Time elapsed
	printf("Time elapsed during C code test = %d ns\n", time_elapsed);
	for (i = 0; i < 16; i++) {
		printf("Iter #%d: %d", i, determinants[i]);
	}

	//--- Run a 2x2 matrix multiplication 16 times using dedicated hardware and measure the time.
	// Initialize the matrices
	matA = (matrixClass*)RANDA;
	matB = (matrixClass*)RANDB;
	// Set up the timer
	timer = TIMER_0_BASE;
	*(timer + 1) = 0x0008; //Stop timer
	*(timer + 2) = 0xffff; //Set periodl register to max value
	*(timer + 3) = 0xffff; //Set periodh register to max value
	*(timer + 1) = 0x0004; //Start timer
	// Run the multiplications
	for (i = 0; i < 16; i++) {
		//*** HW CODE ***//
		matA++;
		matB++;
	}
	// Get the elapsed time during the test
	*(timer + 4) = 0x0000; //Indicate timer to take a snapshot
	timer_data[0] = *(timer + 4); //Get snapl register value
	timer_data[1] = *(timer + 5); //Get snaph register value
	timer_data[1] = timer_data[1] << 16; //snaph is now {snaph,0x0000}
	timer_data_joined = timer_data[1] | timer_data[0]; //{snaph,snapl}
	cycles_elapsed = 0xffffffff - timer_data_joined; //Cycles elapsed
	time_elapsed = cycles_elapsed * CLK_PERIOD; //Time elapsed
	printf("Time elapsed during hardware test = %d ns\n", time_elapsed);
	for (i = 0; i < 16; i++) {
		printf("Iter #%d: %d", i, determinants[i]);
	}

	return 0;
}
