
Proyecto4_app.elf:     file format elf32-littlenios2
Proyecto4_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000184

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00001ff4 memsz 0x00001ff4 flags r-x
    LOAD off    0x00003014 vaddr 0x00002014 paddr 0x0000237c align 2**12
         filesz 0x00000368 memsz 0x00000368 flags rw-
    LOAD off    0x000036e4 vaddr 0x000026e4 paddr 0x000026e4 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000164  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001dfc  00000184  00000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000094  00001f80  00001f80  00002f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000368  00002014  0000237c  00003014  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000026e4  000026e4  000036e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00002804  00002804  0000337c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000337c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000258  00000000  00000000  000033a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000362b  00000000  00000000  000035f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001009  00000000  00000000  00006c23  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000167b  00000000  00000000  00007c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000002f4  00000000  00000000  000092a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000e46  00000000  00000000  0000959c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000146c  00000000  00000000  0000a3e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0000b850  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000258  00000000  00000000  0000b860  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000d321  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000d324  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0000d330  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000d331  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000d332  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0000d33d  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0000d348  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000e  00000000  00000000  0000d353  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  0000d361  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000367d9  00000000  00000000  0000d3a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000184 l    d  .text	00000000 .text
00001f80 l    d  .rodata	00000000 .rodata
00002014 l    d  .rwdata	00000000 .rwdata
000026e4 l    d  .bss	00000000 .bss
00002804 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Proyecto4_app_bsp//obj/HAL/src/crt0.o
000001bc l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000007bc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000209c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000217c l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
000013dc l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
00001544 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00002700 g     O .bss	00000004 alt_instruction_exception_handler
0000111c g     F .text	00000050 alt_main
00002704 g     O .bss	00000100 alt_irq
0000237c g       *ABS*	00000000 __flash_rwdata_start
00000770 g     F .text	0000004c printf
00001b30 g     F .text	00000008 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
000026e4 g     O .bss	00000004 errno
000026ec g     O .bss	00000004 alt_argv
0000a350 g       *ABS*	00000000 _gp
000021a8 g     O .rwdata	00000180 alt_fd_list
00001b38 g     F .text	00000078 alt_find_dev
00001db4 g     F .text	00000028 memcpy
000016cc g     F .text	00000140 alt_io_redirect
00001cf0 g     F .text	00000074 alt_exception_cause_generated_bad_addr
0000131c g     F .text	0000008c altera_avalon_jtag_uart_read
00000734 g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000f94 g     F .text	00000064 .hidden __udivsi3
00002358 g     O .rwdata	00000004 alt_max_fd
00002350 g     O .rwdata	00000004 _global_impure_ptr
00002804 g       *ABS*	00000000 __bss_end
00001664 g     F .text	00000068 alt_iic_isr_register
00001a3c g     F .text	000000f4 alt_tick
0000164c g     F .text	00000018 alt_ic_irq_enabled
00001a08 g     F .text	00000034 alt_alarm_stop
000026f4 g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	00000064 alt_irq_handler
00002328 g     O .rwdata	00000028 alt_dev_null
00001540 g     F .text	00000004 alt_dcache_flush_all
0000237c g       *ABS*	00000000 __ram_rwdata_end
0000235c g     O .rwdata	00000008 alt_dev_list
0000116c g     F .text	00000134 write
00002014 g       *ABS*	00000000 __ram_rodata_end
00000ff8 g     F .text	00000058 .hidden __umodsi3
00002804 g       *ABS*	00000000 end
00000160 g     F .exceptions	00000024 alt_instruction_exception_entry
00010000 g       *ABS*	00000000 __alt_stack_pointer
00001418 g     F .text	00000050 alt_avalon_timer_sc_init
000013a8 g     F .text	00000034 altera_avalon_jtag_uart_write
00000828 g     F .text	0000052c ___vfprintf_internal_r
00001ddc g     F .text	00000190 __call_exitprocs
00000184 g     F .text	0000003c _start
000026fc g     O .bss	00000004 _alt_tick_rate
000026f8 g     O .bss	00000004 _alt_nticks
000012c0 g     F .text	0000003c alt_sys_init
0000070c g     F .text	00000028 .hidden __mulsi3
00002014 g       *ABS*	00000000 __ram_rwdata_start
00001f80 g       *ABS*	00000000 __ram_rodata_start
000012fc g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00001c60 g     F .text	00000090 alt_get_fd
00001d84 g     F .text	00000030 memcmp
00002804 g       *ABS*	00000000 __alt_stack_base
00001bb0 g     F .text	000000b0 alt_find_file
0000154c g     F .text	00000078 alt_dev_llist_insert
00000d70 g     F .text	000000b8 __sfvwrite_small_dev
000026e4 g       *ABS*	00000000 __bss_start
000001c0 g     F .text	0000054c main
000026e8 g     O .bss	00000004 alt_envp
0000130c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0000236c g     O .rwdata	00000004 alt_errno
00000e9c g     F .text	00000084 .hidden __divsi3
00001f80 g       *ABS*	00000000 __flash_rodata_start
00002058 g     O .rwdata	00000044 RANDB
000012a0 g     F .text	00000020 alt_irq_init
000019ac g     F .text	0000005c alt_release_fd
00000e44 g     F .text	00000058 _write_r
00002354 g     O .rwdata	00000004 _impure_ptr
000026f0 g     O .bss	00000004 alt_argc
00000020 g       .exceptions	00000000 alt_irq_entry
00002364 g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
000015c8 g     F .text	00000004 alt_ic_isr_register
0000237c g       *ABS*	00000000 _edata
00002804 g       *ABS*	00000000 _end
00000184 g       *ABS*	00000000 __ram_exceptions_end
0000160c g     F .text	00000040 alt_ic_irq_disable
00001d64 g     F .text	00000020 exit
00000f20 g     F .text	00000074 .hidden __modsi3
00010000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
00001f6c g     F .text	00000014 _exit
00002014 g     O .rwdata	00000044 RANDA
00000e28 g     F .text	0000001c strlen
0000180c g     F .text	000001a0 open
000015c4 g     F .text	00000004 alt_icache_flush_all
00002370 g     O .rwdata	00000004 alt_priority_mask
000015cc g     F .text	00000040 alt_ic_irq_enable
00000d54 g     F .text	0000001c __vfprintf_internal
00002374 g     O .rwdata	00000008 alt_alarm_list
00001468 g     F .text	000000d8 close
00001050 g     F .text	000000cc alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08406114 	ori	at,at,388
    jmp r1
   8:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001600 	call	160 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
  fc:	defffe04 	addi	sp,sp,-8
 100:	dfc00115 	stw	ra,4(sp)
 104:	dc000015 	stw	r16,0(sp)
 108:	000b313a 	rdctl	r5,ipending
 10c:	04000034 	movhi	r16,0
 110:	8409c104 	addi	r16,r16,9988
 114:	2880004c 	andi	r2,r5,1
 118:	0007883a 	mov	r3,zero
 11c:	1000051e 	bne	r2,zero,134 <alt_irq_handler+0x38>
 120:	00800044 	movi	r2,1
 124:	1085883a 	add	r2,r2,r2
 128:	2888703a 	and	r4,r5,r2
 12c:	18c00044 	addi	r3,r3,1
 130:	203ffc26 	beq	r4,zero,124 <__alt_data_end+0xffff0124>
 134:	180690fa 	slli	r3,r3,3
 138:	80c7883a 	add	r3,r16,r3
 13c:	18800017 	ldw	r2,0(r3)
 140:	19000117 	ldw	r4,4(r3)
 144:	103ee83a 	callr	r2
 148:	000b313a 	rdctl	r5,ipending
 14c:	283ff11e 	bne	r5,zero,114 <__alt_data_end+0xffff0114>
 150:	dfc00117 	ldw	ra,4(sp)
 154:	dc000017 	ldw	r16,0(sp)
 158:	dec00204 	addi	sp,sp,8
 15c:	f800283a 	ret

00000160 <alt_instruction_exception_entry>:
 160:	d0a0ec17 	ldw	r2,-31824(gp)
 164:	10000426 	beq	r2,zero,178 <alt_instruction_exception_entry+0x18>
 168:	200b883a 	mov	r5,r4
 16c:	000d883a 	mov	r6,zero
 170:	013fffc4 	movi	r4,-1
 174:	1000683a 	jmp	r2
 178:	003da03a 	break	0
 17c:	0005883a 	mov	r2,zero
 180:	f800283a 	ret

Disassembly of section .text:

00000184 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     184:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
     188:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     18c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
     190:	d6a8d414 	ori	gp,gp,41808
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     194:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
     198:	1089b914 	ori	r2,r2,9956

    movhi r3, %hi(__bss_end)
     19c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
     1a0:	18ca0114 	ori	r3,r3,10244

    beq r2, r3, 1f
     1a4:	10c00326 	beq	r2,r3,1b4 <_start+0x30>

0:
    stw zero, (r2)
     1a8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     1ac:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     1b0:	10fffd36 	bltu	r2,r3,1a8 <__alt_data_end+0xffff01a8>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     1b4:	00010500 	call	1050 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     1b8:	000111c0 	call	111c <alt_main>

000001bc <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     1bc:	003fff06 	br	1bc <__alt_data_end+0xffff01bc>

000001c0 <main>:
	signed char cds[2][2];
	unsigned int id; // 4 concatenated values in 32 bits
} matrixClass;

//--- Main ---//
int main() {
     1c0:	deffd004 	addi	sp,sp,-192
     1c4:	dfc02f15 	stw	ra,188(sp)
     1c8:	df002e15 	stw	fp,184(sp)
     1cc:	dc402d15 	stw	r17,180(sp)
     1d0:	dc002c15 	stw	r16,176(sp)
     1d4:	df002e04 	addi	fp,sp,184
	int determinantsSW[16];
	int determinantsHW[16];

	//--- Run a 2x2 matrix multiplication 16 times using software and measure the time.
	// Initialize the matrices
	matA = (matrixClass*)RANDA;
     1d8:	00800034 	movhi	r2,0
     1dc:	10880504 	addi	r2,r2,8212
     1e0:	e0bfd215 	stw	r2,-184(fp)
	matB = (matrixClass*)RANDB;
     1e4:	00800034 	movhi	r2,0
     1e8:	10881604 	addi	r2,r2,8280
     1ec:	e0bfd315 	stw	r2,-180(fp)
	// Set up the timer
	timer = TIMER_0_BASE;
     1f0:	00800074 	movhi	r2,1
     1f4:	10840004 	addi	r2,r2,4096
     1f8:	e0bfd515 	stw	r2,-172(fp)
	*(timer + 1) = 0x0008; //Stop timer
     1fc:	e0bfd517 	ldw	r2,-172(fp)
     200:	10800104 	addi	r2,r2,4
     204:	00c00204 	movi	r3,8
     208:	10c00015 	stw	r3,0(r2)
	*(timer + 2) = 0xffff; //Set periodl register to max value
     20c:	e0bfd517 	ldw	r2,-172(fp)
     210:	10800204 	addi	r2,r2,8
     214:	00ffffd4 	movui	r3,65535
     218:	10c00015 	stw	r3,0(r2)
	*(timer + 3) = 0xffff; //Set periodh register to max value
     21c:	e0bfd517 	ldw	r2,-172(fp)
     220:	10800304 	addi	r2,r2,12
     224:	00ffffd4 	movui	r3,65535
     228:	10c00015 	stw	r3,0(r2)
	*(timer + 1) = 0x0004; //Start timer
     22c:	e0bfd517 	ldw	r2,-172(fp)
     230:	10800104 	addi	r2,r2,4
     234:	00c00104 	movi	r3,4
     238:	10c00015 	stw	r3,0(r2)
	// Run the multiplications
	for (i = 0; i < 16; i++) {
     23c:	e03fd405 	stb	zero,-176(fp)
     240:	00009006 	br	484 <main+0x2c4>
		//C = A*B = | C00 C01 | = | A00 A01 | * | B00 B01 | = | A00*B00+A01*B10 A00*B01+A01*B11 |
		//          | C10 C11 |   | A10 A11 |   | B10 B11 |   | A10*B00+A11*B10 A10*B01+A11*B11 |
		short c00 = (*matA).cds[0][0] * (*matB).cds[0][0] + (*matA).cds[0][1] * (*matB).cds[1][0];
     244:	e0bfd217 	ldw	r2,-184(fp)
     248:	10800003 	ldbu	r2,0(r2)
     24c:	10c03fcc 	andi	r3,r2,255
     250:	18c0201c 	xori	r3,r3,128
     254:	18ffe004 	addi	r3,r3,-128
     258:	e0bfd317 	ldw	r2,-180(fp)
     25c:	10800003 	ldbu	r2,0(r2)
     260:	10803fcc 	andi	r2,r2,255
     264:	1080201c 	xori	r2,r2,128
     268:	10bfe004 	addi	r2,r2,-128
     26c:	100b883a 	mov	r5,r2
     270:	1809883a 	mov	r4,r3
     274:	000070c0 	call	70c <__mulsi3>
     278:	1021883a 	mov	r16,r2
     27c:	e0bfd217 	ldw	r2,-184(fp)
     280:	10800043 	ldbu	r2,1(r2)
     284:	10c03fcc 	andi	r3,r2,255
     288:	18c0201c 	xori	r3,r3,128
     28c:	18ffe004 	addi	r3,r3,-128
     290:	e0bfd317 	ldw	r2,-180(fp)
     294:	10800083 	ldbu	r2,2(r2)
     298:	10803fcc 	andi	r2,r2,255
     29c:	1080201c 	xori	r2,r2,128
     2a0:	10bfe004 	addi	r2,r2,-128
     2a4:	100b883a 	mov	r5,r2
     2a8:	1809883a 	mov	r4,r3
     2ac:	000070c0 	call	70c <__mulsi3>
     2b0:	8085883a 	add	r2,r16,r2
     2b4:	e0bfd60d 	sth	r2,-168(fp)
		short c01 = (*matA).cds[0][0] * (*matB).cds[0][1] + (*matA).cds[0][1] * (*matB).cds[1][1];
     2b8:	e0bfd217 	ldw	r2,-184(fp)
     2bc:	10800003 	ldbu	r2,0(r2)
     2c0:	10c03fcc 	andi	r3,r2,255
     2c4:	18c0201c 	xori	r3,r3,128
     2c8:	18ffe004 	addi	r3,r3,-128
     2cc:	e0bfd317 	ldw	r2,-180(fp)
     2d0:	10800043 	ldbu	r2,1(r2)
     2d4:	10803fcc 	andi	r2,r2,255
     2d8:	1080201c 	xori	r2,r2,128
     2dc:	10bfe004 	addi	r2,r2,-128
     2e0:	100b883a 	mov	r5,r2
     2e4:	1809883a 	mov	r4,r3
     2e8:	000070c0 	call	70c <__mulsi3>
     2ec:	1021883a 	mov	r16,r2
     2f0:	e0bfd217 	ldw	r2,-184(fp)
     2f4:	10800043 	ldbu	r2,1(r2)
     2f8:	10c03fcc 	andi	r3,r2,255
     2fc:	18c0201c 	xori	r3,r3,128
     300:	18ffe004 	addi	r3,r3,-128
     304:	e0bfd317 	ldw	r2,-180(fp)
     308:	108000c3 	ldbu	r2,3(r2)
     30c:	10803fcc 	andi	r2,r2,255
     310:	1080201c 	xori	r2,r2,128
     314:	10bfe004 	addi	r2,r2,-128
     318:	100b883a 	mov	r5,r2
     31c:	1809883a 	mov	r4,r3
     320:	000070c0 	call	70c <__mulsi3>
     324:	8085883a 	add	r2,r16,r2
     328:	e0bfd68d 	sth	r2,-166(fp)
		short c10 = (*matA).cds[1][0] * (*matB).cds[0][0] + (*matA).cds[1][1] * (*matB).cds[1][0];
     32c:	e0bfd217 	ldw	r2,-184(fp)
     330:	10800083 	ldbu	r2,2(r2)
     334:	10c03fcc 	andi	r3,r2,255
     338:	18c0201c 	xori	r3,r3,128
     33c:	18ffe004 	addi	r3,r3,-128
     340:	e0bfd317 	ldw	r2,-180(fp)
     344:	10800003 	ldbu	r2,0(r2)
     348:	10803fcc 	andi	r2,r2,255
     34c:	1080201c 	xori	r2,r2,128
     350:	10bfe004 	addi	r2,r2,-128
     354:	100b883a 	mov	r5,r2
     358:	1809883a 	mov	r4,r3
     35c:	000070c0 	call	70c <__mulsi3>
     360:	1021883a 	mov	r16,r2
     364:	e0bfd217 	ldw	r2,-184(fp)
     368:	108000c3 	ldbu	r2,3(r2)
     36c:	10c03fcc 	andi	r3,r2,255
     370:	18c0201c 	xori	r3,r3,128
     374:	18ffe004 	addi	r3,r3,-128
     378:	e0bfd317 	ldw	r2,-180(fp)
     37c:	10800083 	ldbu	r2,2(r2)
     380:	10803fcc 	andi	r2,r2,255
     384:	1080201c 	xori	r2,r2,128
     388:	10bfe004 	addi	r2,r2,-128
     38c:	100b883a 	mov	r5,r2
     390:	1809883a 	mov	r4,r3
     394:	000070c0 	call	70c <__mulsi3>
     398:	8085883a 	add	r2,r16,r2
     39c:	e0bfd70d 	sth	r2,-164(fp)
		short c11 = (*matA).cds[1][0] * (*matB).cds[0][1] + (*matA).cds[1][1] * (*matB).cds[1][1];
     3a0:	e0bfd217 	ldw	r2,-184(fp)
     3a4:	10800083 	ldbu	r2,2(r2)
     3a8:	10c03fcc 	andi	r3,r2,255
     3ac:	18c0201c 	xori	r3,r3,128
     3b0:	18ffe004 	addi	r3,r3,-128
     3b4:	e0bfd317 	ldw	r2,-180(fp)
     3b8:	10800043 	ldbu	r2,1(r2)
     3bc:	10803fcc 	andi	r2,r2,255
     3c0:	1080201c 	xori	r2,r2,128
     3c4:	10bfe004 	addi	r2,r2,-128
     3c8:	100b883a 	mov	r5,r2
     3cc:	1809883a 	mov	r4,r3
     3d0:	000070c0 	call	70c <__mulsi3>
     3d4:	1021883a 	mov	r16,r2
     3d8:	e0bfd217 	ldw	r2,-184(fp)
     3dc:	108000c3 	ldbu	r2,3(r2)
     3e0:	10c03fcc 	andi	r3,r2,255
     3e4:	18c0201c 	xori	r3,r3,128
     3e8:	18ffe004 	addi	r3,r3,-128
     3ec:	e0bfd317 	ldw	r2,-180(fp)
     3f0:	108000c3 	ldbu	r2,3(r2)
     3f4:	10803fcc 	andi	r2,r2,255
     3f8:	1080201c 	xori	r2,r2,128
     3fc:	10bfe004 	addi	r2,r2,-128
     400:	100b883a 	mov	r5,r2
     404:	1809883a 	mov	r4,r3
     408:	000070c0 	call	70c <__mulsi3>
     40c:	8085883a 	add	r2,r16,r2
     410:	e0bfd78d 	sth	r2,-162(fp)
		determinantsSW[i] = c00*c11 - c01*c10;
     414:	e43fd403 	ldbu	r16,-176(fp)
     418:	e0bfd60f 	ldh	r2,-168(fp)
     41c:	e0ffd78f 	ldh	r3,-162(fp)
     420:	180b883a 	mov	r5,r3
     424:	1009883a 	mov	r4,r2
     428:	000070c0 	call	70c <__mulsi3>
     42c:	1023883a 	mov	r17,r2
     430:	e0bfd68f 	ldh	r2,-166(fp)
     434:	e0ffd70f 	ldh	r3,-164(fp)
     438:	180b883a 	mov	r5,r3
     43c:	1009883a 	mov	r4,r2
     440:	000070c0 	call	70c <__mulsi3>
     444:	8887c83a 	sub	r3,r17,r2
     448:	8405883a 	add	r2,r16,r16
     44c:	1085883a 	add	r2,r2,r2
     450:	e13fd204 	addi	r4,fp,-184
     454:	2085883a 	add	r2,r4,r2
     458:	10800c04 	addi	r2,r2,48
     45c:	10c00015 	stw	r3,0(r2)
		matA++;
     460:	e0bfd217 	ldw	r2,-184(fp)
     464:	10800104 	addi	r2,r2,4
     468:	e0bfd215 	stw	r2,-184(fp)
		matB++;
     46c:	e0bfd317 	ldw	r2,-180(fp)
     470:	10800104 	addi	r2,r2,4
     474:	e0bfd315 	stw	r2,-180(fp)
	*(timer + 1) = 0x0008; //Stop timer
	*(timer + 2) = 0xffff; //Set periodl register to max value
	*(timer + 3) = 0xffff; //Set periodh register to max value
	*(timer + 1) = 0x0004; //Start timer
	// Run the multiplications
	for (i = 0; i < 16; i++) {
     478:	e0bfd403 	ldbu	r2,-176(fp)
     47c:	10800044 	addi	r2,r2,1
     480:	e0bfd405 	stb	r2,-176(fp)
     484:	e0bfd403 	ldbu	r2,-176(fp)
     488:	10800430 	cmpltui	r2,r2,16
     48c:	103f6d1e 	bne	r2,zero,244 <__alt_data_end+0xffff0244>
		determinantsSW[i] = c00*c11 - c01*c10;
		matA++;
		matB++;
	}
	// Get the elapsed time during the test
	*(timer + 4) = 0x0000; //Indicate timer to take a snapshot
     490:	e0bfd517 	ldw	r2,-172(fp)
     494:	10800404 	addi	r2,r2,16
     498:	10000015 	stw	zero,0(r2)
	timer_data[0] = *(timer + 4); //Get snapl register value
     49c:	e0bfd517 	ldw	r2,-172(fp)
     4a0:	10800417 	ldw	r2,16(r2)
     4a4:	e0bfdc15 	stw	r2,-144(fp)
	timer_data[1] = *(timer + 5); //Get snaph register value
     4a8:	e0bfd517 	ldw	r2,-172(fp)
     4ac:	10800517 	ldw	r2,20(r2)
     4b0:	e0bfdd15 	stw	r2,-140(fp)
	timer_data[1] = timer_data[1] << 16; //snaph is now {snaph,0x0000}
     4b4:	e0bfdd17 	ldw	r2,-140(fp)
     4b8:	1004943a 	slli	r2,r2,16
     4bc:	e0bfdd15 	stw	r2,-140(fp)
	timer_data_joined = timer_data[1] | timer_data[0]; //{snaph,snapl}
     4c0:	e0ffdd17 	ldw	r3,-140(fp)
     4c4:	e0bfdc17 	ldw	r2,-144(fp)
     4c8:	1884b03a 	or	r2,r3,r2
     4cc:	e0bfd815 	stw	r2,-160(fp)
	cycles_elapsed = 0xffffffff - timer_data_joined; //Cycles elapsed
     4d0:	e0bfd817 	ldw	r2,-160(fp)
     4d4:	0084303a 	nor	r2,zero,r2
     4d8:	e0bfd915 	stw	r2,-156(fp)
	time_elapsed = cycles_elapsed * CLK_PERIOD; //Time elapsed
     4dc:	01400504 	movi	r5,20
     4e0:	e13fd917 	ldw	r4,-156(fp)
     4e4:	000070c0 	call	70c <__mulsi3>
     4e8:	e0bfda15 	stw	r2,-152(fp)
	printf("Time elapsed during software test = %d ns\n", time_elapsed);
     4ec:	e17fda17 	ldw	r5,-152(fp)
     4f0:	01000034 	movhi	r4,0
     4f4:	2107e004 	addi	r4,r4,8064
     4f8:	00007700 	call	770 <printf>

	//--- Run a 2x2 matrix multiplication 16 times using hardware and measure the time.
	// Initialize the matrices
	matA = (matrixClass*)RANDA;
     4fc:	00800034 	movhi	r2,0
     500:	10880504 	addi	r2,r2,8212
     504:	e0bfd215 	stw	r2,-184(fp)
	matB = (matrixClass*)RANDB;
     508:	00800034 	movhi	r2,0
     50c:	10881604 	addi	r2,r2,8280
     510:	e0bfd315 	stw	r2,-180(fp)
	// Set up the timer
	timer = TIMER_0_BASE;
     514:	00800074 	movhi	r2,1
     518:	10840004 	addi	r2,r2,4096
     51c:	e0bfd515 	stw	r2,-172(fp)
	*(timer + 1) = 0x0008; //Stop timer
     520:	e0bfd517 	ldw	r2,-172(fp)
     524:	10800104 	addi	r2,r2,4
     528:	00c00204 	movi	r3,8
     52c:	10c00015 	stw	r3,0(r2)
	*(timer + 2) = 0xffff; //Set periodl register to max value
     530:	e0bfd517 	ldw	r2,-172(fp)
     534:	10800204 	addi	r2,r2,8
     538:	00ffffd4 	movui	r3,65535
     53c:	10c00015 	stw	r3,0(r2)
	*(timer + 3) = 0xffff; //Set periodh register to max value
     540:	e0bfd517 	ldw	r2,-172(fp)
     544:	10800304 	addi	r2,r2,12
     548:	00ffffd4 	movui	r3,65535
     54c:	10c00015 	stw	r3,0(r2)
	*(timer + 1) = 0x0004; //Start timer
     550:	e0bfd517 	ldw	r2,-172(fp)
     554:	10800104 	addi	r2,r2,4
     558:	00c00104 	movi	r3,4
     55c:	10c00015 	stw	r3,0(r2)
	// Run the multiplications
	for (i = 0; i < 16; i++) {
     560:	e03fd405 	stb	zero,-176(fp)
     564:	00002606 	br	600 <main+0x440>
		unsigned int* matrixp = MATRIX_MULT_DET_0_BASE;
     568:	00800074 	movhi	r2,1
     56c:	10840804 	addi	r2,r2,4128
     570:	e0bfdb15 	stw	r2,-148(fp)
		*(matrixp + 0) = (*matA).id; //Set matA
     574:	e0bfd217 	ldw	r2,-184(fp)
     578:	10c00017 	ldw	r3,0(r2)
     57c:	e0bfdb17 	ldw	r2,-148(fp)
     580:	10c00015 	stw	r3,0(r2)
		*(matrixp + 1) = (*matB).id; //Set matB
     584:	e0bfdb17 	ldw	r2,-148(fp)
     588:	10800104 	addi	r2,r2,4
     58c:	e0ffd317 	ldw	r3,-180(fp)
     590:	18c00017 	ldw	r3,0(r3)
     594:	10c00015 	stw	r3,0(r2)
		*(matrixp + 2) = 1; //Enable
     598:	e0bfdb17 	ldw	r2,-148(fp)
     59c:	10800204 	addi	r2,r2,8
     5a0:	00c00044 	movi	r3,1
     5a4:	10c00015 	stw	r3,0(r2)
		determinantsHW[i] = (int)*(matrixp + 3); //Get the result
     5a8:	e0bfd403 	ldbu	r2,-176(fp)
     5ac:	e0ffdb17 	ldw	r3,-148(fp)
     5b0:	18c00304 	addi	r3,r3,12
     5b4:	18c00017 	ldw	r3,0(r3)
     5b8:	1085883a 	add	r2,r2,r2
     5bc:	1085883a 	add	r2,r2,r2
     5c0:	e17fd204 	addi	r5,fp,-184
     5c4:	2885883a 	add	r2,r5,r2
     5c8:	10801c04 	addi	r2,r2,112
     5cc:	10c00015 	stw	r3,0(r2)
		*(matrixp + 2) = 0; //Disable
     5d0:	e0bfdb17 	ldw	r2,-148(fp)
     5d4:	10800204 	addi	r2,r2,8
     5d8:	10000015 	stw	zero,0(r2)
		matA++;
     5dc:	e0bfd217 	ldw	r2,-184(fp)
     5e0:	10800104 	addi	r2,r2,4
     5e4:	e0bfd215 	stw	r2,-184(fp)
		matB++;
     5e8:	e0bfd317 	ldw	r2,-180(fp)
     5ec:	10800104 	addi	r2,r2,4
     5f0:	e0bfd315 	stw	r2,-180(fp)
	*(timer + 1) = 0x0008; //Stop timer
	*(timer + 2) = 0xffff; //Set periodl register to max value
	*(timer + 3) = 0xffff; //Set periodh register to max value
	*(timer + 1) = 0x0004; //Start timer
	// Run the multiplications
	for (i = 0; i < 16; i++) {
     5f4:	e0bfd403 	ldbu	r2,-176(fp)
     5f8:	10800044 	addi	r2,r2,1
     5fc:	e0bfd405 	stb	r2,-176(fp)
     600:	e0bfd403 	ldbu	r2,-176(fp)
     604:	10800430 	cmpltui	r2,r2,16
     608:	103fd71e 	bne	r2,zero,568 <__alt_data_end+0xffff0568>
		*(matrixp + 2) = 0; //Disable
		matA++;
		matB++;
	}
	// Get the elapsed time during the test
	*(timer + 4) = 0x0000; //Indicate timer to take a snapshot
     60c:	e0bfd517 	ldw	r2,-172(fp)
     610:	10800404 	addi	r2,r2,16
     614:	10000015 	stw	zero,0(r2)
	timer_data[0] = *(timer + 4); //Get snapl register value
     618:	e0bfd517 	ldw	r2,-172(fp)
     61c:	10800417 	ldw	r2,16(r2)
     620:	e0bfdc15 	stw	r2,-144(fp)
	timer_data[1] = *(timer + 5); //Get snaph register value
     624:	e0bfd517 	ldw	r2,-172(fp)
     628:	10800517 	ldw	r2,20(r2)
     62c:	e0bfdd15 	stw	r2,-140(fp)
	timer_data[1] = timer_data[1] << 16; //snaph is now {snaph,0x0000}
     630:	e0bfdd17 	ldw	r2,-140(fp)
     634:	1004943a 	slli	r2,r2,16
     638:	e0bfdd15 	stw	r2,-140(fp)
	timer_data_joined = timer_data[1] | timer_data[0]; //{snaph,snapl}
     63c:	e0ffdd17 	ldw	r3,-140(fp)
     640:	e0bfdc17 	ldw	r2,-144(fp)
     644:	1884b03a 	or	r2,r3,r2
     648:	e0bfd815 	stw	r2,-160(fp)
	cycles_elapsed = 0xffffffff - timer_data_joined; //Cycles elapsed
     64c:	e0bfd817 	ldw	r2,-160(fp)
     650:	0084303a 	nor	r2,zero,r2
     654:	e0bfd915 	stw	r2,-156(fp)
	time_elapsed = cycles_elapsed * CLK_PERIOD; //Time elapsed
     658:	01400504 	movi	r5,20
     65c:	e13fd917 	ldw	r4,-156(fp)
     660:	000070c0 	call	70c <__mulsi3>
     664:	e0bfda15 	stw	r2,-152(fp)
	printf("Time elapsed during hardware test = %d ns\n", time_elapsed);
     668:	e17fda17 	ldw	r5,-152(fp)
     66c:	01000034 	movhi	r4,0
     670:	2107eb04 	addi	r4,r4,8108
     674:	00007700 	call	770 <printf>

	// Print the results
	for (i = 0; i < 16; i++) {
     678:	e03fd405 	stb	zero,-176(fp)
     67c:	00001806 	br	6e0 <main+0x520>
		printf("Iter #%d: SW: %d HW: %d\n", i, determinantsSW[i], determinantsHW[i]);
     680:	e0ffd403 	ldbu	r3,-176(fp)
     684:	e0bfd403 	ldbu	r2,-176(fp)
     688:	1085883a 	add	r2,r2,r2
     68c:	1085883a 	add	r2,r2,r2
     690:	e13fd204 	addi	r4,fp,-184
     694:	2085883a 	add	r2,r4,r2
     698:	10800c04 	addi	r2,r2,48
     69c:	11000017 	ldw	r4,0(r2)
     6a0:	e0bfd403 	ldbu	r2,-176(fp)
     6a4:	1085883a 	add	r2,r2,r2
     6a8:	1085883a 	add	r2,r2,r2
     6ac:	e17fd204 	addi	r5,fp,-184
     6b0:	2885883a 	add	r2,r5,r2
     6b4:	10801c04 	addi	r2,r2,112
     6b8:	10800017 	ldw	r2,0(r2)
     6bc:	100f883a 	mov	r7,r2
     6c0:	200d883a 	mov	r6,r4
     6c4:	180b883a 	mov	r5,r3
     6c8:	01000034 	movhi	r4,0
     6cc:	2107f604 	addi	r4,r4,8152
     6d0:	00007700 	call	770 <printf>
	cycles_elapsed = 0xffffffff - timer_data_joined; //Cycles elapsed
	time_elapsed = cycles_elapsed * CLK_PERIOD; //Time elapsed
	printf("Time elapsed during hardware test = %d ns\n", time_elapsed);

	// Print the results
	for (i = 0; i < 16; i++) {
     6d4:	e0bfd403 	ldbu	r2,-176(fp)
     6d8:	10800044 	addi	r2,r2,1
     6dc:	e0bfd405 	stb	r2,-176(fp)
     6e0:	e0bfd403 	ldbu	r2,-176(fp)
     6e4:	10800430 	cmpltui	r2,r2,16
     6e8:	103fe51e 	bne	r2,zero,680 <__alt_data_end+0xffff0680>
		printf("Iter #%d: SW: %d HW: %d\n", i, determinantsSW[i], determinantsHW[i]);
	}

	return 0;
     6ec:	0005883a 	mov	r2,zero
}
     6f0:	e6fffe04 	addi	sp,fp,-8
     6f4:	dfc00317 	ldw	ra,12(sp)
     6f8:	df000217 	ldw	fp,8(sp)
     6fc:	dc400117 	ldw	r17,4(sp)
     700:	dc000017 	ldw	r16,0(sp)
     704:	dec00404 	addi	sp,sp,16
     708:	f800283a 	ret

0000070c <__mulsi3>:
     70c:	0005883a 	mov	r2,zero
     710:	20000726 	beq	r4,zero,730 <__mulsi3+0x24>
     714:	20c0004c 	andi	r3,r4,1
     718:	2008d07a 	srli	r4,r4,1
     71c:	18000126 	beq	r3,zero,724 <__mulsi3+0x18>
     720:	1145883a 	add	r2,r2,r5
     724:	294b883a 	add	r5,r5,r5
     728:	203ffa1e 	bne	r4,zero,714 <__alt_data_end+0xffff0714>
     72c:	f800283a 	ret
     730:	f800283a 	ret

00000734 <_printf_r>:
     734:	defffd04 	addi	sp,sp,-12
     738:	dfc00015 	stw	ra,0(sp)
     73c:	d9800115 	stw	r6,4(sp)
     740:	d9c00215 	stw	r7,8(sp)
     744:	20c00217 	ldw	r3,8(r4)
     748:	01800034 	movhi	r6,0
     74c:	31835c04 	addi	r6,r6,3440
     750:	19800115 	stw	r6,4(r3)
     754:	280d883a 	mov	r6,r5
     758:	21400217 	ldw	r5,8(r4)
     75c:	d9c00104 	addi	r7,sp,4
     760:	00008280 	call	828 <___vfprintf_internal_r>
     764:	dfc00017 	ldw	ra,0(sp)
     768:	dec00304 	addi	sp,sp,12
     76c:	f800283a 	ret

00000770 <printf>:
     770:	defffc04 	addi	sp,sp,-16
     774:	dfc00015 	stw	ra,0(sp)
     778:	d9400115 	stw	r5,4(sp)
     77c:	d9800215 	stw	r6,8(sp)
     780:	d9c00315 	stw	r7,12(sp)
     784:	00800034 	movhi	r2,0
     788:	1088d504 	addi	r2,r2,9044
     78c:	10800017 	ldw	r2,0(r2)
     790:	01400034 	movhi	r5,0
     794:	29435c04 	addi	r5,r5,3440
     798:	10c00217 	ldw	r3,8(r2)
     79c:	d9800104 	addi	r6,sp,4
     7a0:	19400115 	stw	r5,4(r3)
     7a4:	200b883a 	mov	r5,r4
     7a8:	11000217 	ldw	r4,8(r2)
     7ac:	0000d540 	call	d54 <__vfprintf_internal>
     7b0:	dfc00017 	ldw	ra,0(sp)
     7b4:	dec00404 	addi	sp,sp,16
     7b8:	f800283a 	ret

000007bc <print_repeat>:
     7bc:	defffb04 	addi	sp,sp,-20
     7c0:	dc800315 	stw	r18,12(sp)
     7c4:	dc400215 	stw	r17,8(sp)
     7c8:	dc000115 	stw	r16,4(sp)
     7cc:	dfc00415 	stw	ra,16(sp)
     7d0:	2025883a 	mov	r18,r4
     7d4:	2823883a 	mov	r17,r5
     7d8:	d9800005 	stb	r6,0(sp)
     7dc:	3821883a 	mov	r16,r7
     7e0:	04000a0e 	bge	zero,r16,80c <print_repeat+0x50>
     7e4:	88800117 	ldw	r2,4(r17)
     7e8:	01c00044 	movi	r7,1
     7ec:	d80d883a 	mov	r6,sp
     7f0:	880b883a 	mov	r5,r17
     7f4:	9009883a 	mov	r4,r18
     7f8:	103ee83a 	callr	r2
     7fc:	843fffc4 	addi	r16,r16,-1
     800:	103ff726 	beq	r2,zero,7e0 <__alt_data_end+0xffff07e0>
     804:	00bfffc4 	movi	r2,-1
     808:	00000106 	br	810 <print_repeat+0x54>
     80c:	0005883a 	mov	r2,zero
     810:	dfc00417 	ldw	ra,16(sp)
     814:	dc800317 	ldw	r18,12(sp)
     818:	dc400217 	ldw	r17,8(sp)
     81c:	dc000117 	ldw	r16,4(sp)
     820:	dec00504 	addi	sp,sp,20
     824:	f800283a 	ret

00000828 <___vfprintf_internal_r>:
     828:	deffe504 	addi	sp,sp,-108
     82c:	d8c00804 	addi	r3,sp,32
     830:	ddc01815 	stw	r23,96(sp)
     834:	dd801715 	stw	r22,92(sp)
     838:	dd401615 	stw	r21,88(sp)
     83c:	dd001515 	stw	r20,84(sp)
     840:	dcc01415 	stw	r19,80(sp)
     844:	dc801315 	stw	r18,76(sp)
     848:	dc401215 	stw	r17,72(sp)
     84c:	dc001115 	stw	r16,68(sp)
     850:	dfc01a15 	stw	ra,104(sp)
     854:	df001915 	stw	fp,100(sp)
     858:	2029883a 	mov	r20,r4
     85c:	2823883a 	mov	r17,r5
     860:	382d883a 	mov	r22,r7
     864:	d9800f15 	stw	r6,60(sp)
     868:	0021883a 	mov	r16,zero
     86c:	d8000e15 	stw	zero,56(sp)
     870:	d8000a15 	stw	zero,40(sp)
     874:	002b883a 	mov	r21,zero
     878:	0027883a 	mov	r19,zero
     87c:	0025883a 	mov	r18,zero
     880:	d8000c15 	stw	zero,48(sp)
     884:	d8000b15 	stw	zero,44(sp)
     888:	002f883a 	mov	r23,zero
     88c:	d8c00915 	stw	r3,36(sp)
     890:	d8c00f17 	ldw	r3,60(sp)
     894:	19000003 	ldbu	r4,0(r3)
     898:	20803fcc 	andi	r2,r4,255
     89c:	1080201c 	xori	r2,r2,128
     8a0:	10bfe004 	addi	r2,r2,-128
     8a4:	10011e26 	beq	r2,zero,d20 <___vfprintf_internal_r+0x4f8>
     8a8:	00c00044 	movi	r3,1
     8ac:	b8c01426 	beq	r23,r3,900 <___vfprintf_internal_r+0xd8>
     8b0:	1dc00216 	blt	r3,r23,8bc <___vfprintf_internal_r+0x94>
     8b4:	b8000626 	beq	r23,zero,8d0 <___vfprintf_internal_r+0xa8>
     8b8:	00011506 	br	d10 <___vfprintf_internal_r+0x4e8>
     8bc:	01400084 	movi	r5,2
     8c0:	b9401d26 	beq	r23,r5,938 <___vfprintf_internal_r+0x110>
     8c4:	014000c4 	movi	r5,3
     8c8:	b9402b26 	beq	r23,r5,978 <___vfprintf_internal_r+0x150>
     8cc:	00011006 	br	d10 <___vfprintf_internal_r+0x4e8>
     8d0:	01400944 	movi	r5,37
     8d4:	1140fc26 	beq	r2,r5,cc8 <___vfprintf_internal_r+0x4a0>
     8d8:	88800117 	ldw	r2,4(r17)
     8dc:	d9000005 	stb	r4,0(sp)
     8e0:	01c00044 	movi	r7,1
     8e4:	d80d883a 	mov	r6,sp
     8e8:	880b883a 	mov	r5,r17
     8ec:	a009883a 	mov	r4,r20
     8f0:	103ee83a 	callr	r2
     8f4:	1000d81e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     8f8:	84000044 	addi	r16,r16,1
     8fc:	00010406 	br	d10 <___vfprintf_internal_r+0x4e8>
     900:	01400c04 	movi	r5,48
     904:	1140fa26 	beq	r2,r5,cf0 <___vfprintf_internal_r+0x4c8>
     908:	01400944 	movi	r5,37
     90c:	11400a1e 	bne	r2,r5,938 <___vfprintf_internal_r+0x110>
     910:	d8800005 	stb	r2,0(sp)
     914:	88800117 	ldw	r2,4(r17)
     918:	b80f883a 	mov	r7,r23
     91c:	d80d883a 	mov	r6,sp
     920:	880b883a 	mov	r5,r17
     924:	a009883a 	mov	r4,r20
     928:	103ee83a 	callr	r2
     92c:	1000ca1e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     930:	84000044 	addi	r16,r16,1
     934:	0000f506 	br	d0c <___vfprintf_internal_r+0x4e4>
     938:	25fff404 	addi	r23,r4,-48
     93c:	bdc03fcc 	andi	r23,r23,255
     940:	00c00244 	movi	r3,9
     944:	1dc00936 	bltu	r3,r23,96c <___vfprintf_internal_r+0x144>
     948:	00bfffc4 	movi	r2,-1
     94c:	90800426 	beq	r18,r2,960 <___vfprintf_internal_r+0x138>
     950:	01400284 	movi	r5,10
     954:	9009883a 	mov	r4,r18
     958:	000070c0 	call	70c <__mulsi3>
     95c:	00000106 	br	964 <___vfprintf_internal_r+0x13c>
     960:	0005883a 	mov	r2,zero
     964:	b8a5883a 	add	r18,r23,r2
     968:	0000e206 	br	cf4 <___vfprintf_internal_r+0x4cc>
     96c:	01400b84 	movi	r5,46
     970:	1140e426 	beq	r2,r5,d04 <___vfprintf_internal_r+0x4dc>
     974:	05c00084 	movi	r23,2
     978:	213ff404 	addi	r4,r4,-48
     97c:	27003fcc 	andi	fp,r4,255
     980:	00c00244 	movi	r3,9
     984:	1f000936 	bltu	r3,fp,9ac <___vfprintf_internal_r+0x184>
     988:	00bfffc4 	movi	r2,-1
     98c:	98800426 	beq	r19,r2,9a0 <___vfprintf_internal_r+0x178>
     990:	01400284 	movi	r5,10
     994:	9809883a 	mov	r4,r19
     998:	000070c0 	call	70c <__mulsi3>
     99c:	00000106 	br	9a4 <___vfprintf_internal_r+0x17c>
     9a0:	0005883a 	mov	r2,zero
     9a4:	e0a7883a 	add	r19,fp,r2
     9a8:	0000d906 	br	d10 <___vfprintf_internal_r+0x4e8>
     9ac:	00c01b04 	movi	r3,108
     9b0:	10c0d226 	beq	r2,r3,cfc <___vfprintf_internal_r+0x4d4>
     9b4:	013fffc4 	movi	r4,-1
     9b8:	99000226 	beq	r19,r4,9c4 <___vfprintf_internal_r+0x19c>
     9bc:	d8000b15 	stw	zero,44(sp)
     9c0:	00000106 	br	9c8 <___vfprintf_internal_r+0x1a0>
     9c4:	04c00044 	movi	r19,1
     9c8:	01001a44 	movi	r4,105
     9cc:	11001626 	beq	r2,r4,a28 <___vfprintf_internal_r+0x200>
     9d0:	20800916 	blt	r4,r2,9f8 <___vfprintf_internal_r+0x1d0>
     9d4:	010018c4 	movi	r4,99
     9d8:	11008826 	beq	r2,r4,bfc <___vfprintf_internal_r+0x3d4>
     9dc:	01001904 	movi	r4,100
     9e0:	11001126 	beq	r2,r4,a28 <___vfprintf_internal_r+0x200>
     9e4:	01001604 	movi	r4,88
     9e8:	1100c81e 	bne	r2,r4,d0c <___vfprintf_internal_r+0x4e4>
     9ec:	00c00044 	movi	r3,1
     9f0:	d8c00e15 	stw	r3,56(sp)
     9f4:	00001506 	br	a4c <___vfprintf_internal_r+0x224>
     9f8:	01001cc4 	movi	r4,115
     9fc:	11009826 	beq	r2,r4,c60 <___vfprintf_internal_r+0x438>
     a00:	20800416 	blt	r4,r2,a14 <___vfprintf_internal_r+0x1ec>
     a04:	01001bc4 	movi	r4,111
     a08:	1100c01e 	bne	r2,r4,d0c <___vfprintf_internal_r+0x4e4>
     a0c:	05400204 	movi	r21,8
     a10:	00000f06 	br	a50 <___vfprintf_internal_r+0x228>
     a14:	01001d44 	movi	r4,117
     a18:	11000d26 	beq	r2,r4,a50 <___vfprintf_internal_r+0x228>
     a1c:	01001e04 	movi	r4,120
     a20:	11000a26 	beq	r2,r4,a4c <___vfprintf_internal_r+0x224>
     a24:	0000b906 	br	d0c <___vfprintf_internal_r+0x4e4>
     a28:	d8c00a17 	ldw	r3,40(sp)
     a2c:	b7000104 	addi	fp,r22,4
     a30:	18000726 	beq	r3,zero,a50 <___vfprintf_internal_r+0x228>
     a34:	df000d15 	stw	fp,52(sp)
     a38:	b5c00017 	ldw	r23,0(r22)
     a3c:	b800080e 	bge	r23,zero,a60 <___vfprintf_internal_r+0x238>
     a40:	05efc83a 	sub	r23,zero,r23
     a44:	02400044 	movi	r9,1
     a48:	00000606 	br	a64 <___vfprintf_internal_r+0x23c>
     a4c:	05400404 	movi	r21,16
     a50:	b0c00104 	addi	r3,r22,4
     a54:	d8c00d15 	stw	r3,52(sp)
     a58:	b5c00017 	ldw	r23,0(r22)
     a5c:	d8000a15 	stw	zero,40(sp)
     a60:	0013883a 	mov	r9,zero
     a64:	d839883a 	mov	fp,sp
     a68:	b8001726 	beq	r23,zero,ac8 <___vfprintf_internal_r+0x2a0>
     a6c:	a80b883a 	mov	r5,r21
     a70:	b809883a 	mov	r4,r23
     a74:	da401015 	stw	r9,64(sp)
     a78:	0000f940 	call	f94 <__udivsi3>
     a7c:	a80b883a 	mov	r5,r21
     a80:	1009883a 	mov	r4,r2
     a84:	102d883a 	mov	r22,r2
     a88:	000070c0 	call	70c <__mulsi3>
     a8c:	b885c83a 	sub	r2,r23,r2
     a90:	00c00244 	movi	r3,9
     a94:	da401017 	ldw	r9,64(sp)
     a98:	18800216 	blt	r3,r2,aa4 <___vfprintf_internal_r+0x27c>
     a9c:	10800c04 	addi	r2,r2,48
     aa0:	00000506 	br	ab8 <___vfprintf_internal_r+0x290>
     aa4:	d8c00e17 	ldw	r3,56(sp)
     aa8:	18000226 	beq	r3,zero,ab4 <___vfprintf_internal_r+0x28c>
     aac:	10800dc4 	addi	r2,r2,55
     ab0:	00000106 	br	ab8 <___vfprintf_internal_r+0x290>
     ab4:	108015c4 	addi	r2,r2,87
     ab8:	e0800005 	stb	r2,0(fp)
     abc:	b02f883a 	mov	r23,r22
     ac0:	e7000044 	addi	fp,fp,1
     ac4:	003fe806 	br	a68 <__alt_data_end+0xffff0a68>
     ac8:	e6efc83a 	sub	r23,fp,sp
     acc:	9dc5c83a 	sub	r2,r19,r23
     ad0:	0080090e 	bge	zero,r2,af8 <___vfprintf_internal_r+0x2d0>
     ad4:	e085883a 	add	r2,fp,r2
     ad8:	01400c04 	movi	r5,48
     adc:	d8c00917 	ldw	r3,36(sp)
     ae0:	e009883a 	mov	r4,fp
     ae4:	e0c0032e 	bgeu	fp,r3,af4 <___vfprintf_internal_r+0x2cc>
     ae8:	e7000044 	addi	fp,fp,1
     aec:	21400005 	stb	r5,0(r4)
     af0:	e0bffa1e 	bne	fp,r2,adc <__alt_data_end+0xffff0adc>
     af4:	e6efc83a 	sub	r23,fp,sp
     af8:	d8c00b17 	ldw	r3,44(sp)
     afc:	4dd1883a 	add	r8,r9,r23
     b00:	922dc83a 	sub	r22,r18,r8
     b04:	18001626 	beq	r3,zero,b60 <___vfprintf_internal_r+0x338>
     b08:	48000a26 	beq	r9,zero,b34 <___vfprintf_internal_r+0x30c>
     b0c:	00800b44 	movi	r2,45
     b10:	d8800805 	stb	r2,32(sp)
     b14:	88800117 	ldw	r2,4(r17)
     b18:	01c00044 	movi	r7,1
     b1c:	d9800804 	addi	r6,sp,32
     b20:	880b883a 	mov	r5,r17
     b24:	a009883a 	mov	r4,r20
     b28:	103ee83a 	callr	r2
     b2c:	10004a1e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     b30:	84000044 	addi	r16,r16,1
     b34:	0580070e 	bge	zero,r22,b54 <___vfprintf_internal_r+0x32c>
     b38:	b00f883a 	mov	r7,r22
     b3c:	01800c04 	movi	r6,48
     b40:	880b883a 	mov	r5,r17
     b44:	a009883a 	mov	r4,r20
     b48:	00007bc0 	call	7bc <print_repeat>
     b4c:	1000421e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     b50:	85a1883a 	add	r16,r16,r22
     b54:	e02d883a 	mov	r22,fp
     b58:	bf2fc83a 	sub	r23,r23,fp
     b5c:	00002006 	br	be0 <___vfprintf_internal_r+0x3b8>
     b60:	0580090e 	bge	zero,r22,b88 <___vfprintf_internal_r+0x360>
     b64:	b00f883a 	mov	r7,r22
     b68:	01800804 	movi	r6,32
     b6c:	880b883a 	mov	r5,r17
     b70:	a009883a 	mov	r4,r20
     b74:	da401015 	stw	r9,64(sp)
     b78:	00007bc0 	call	7bc <print_repeat>
     b7c:	da401017 	ldw	r9,64(sp)
     b80:	1000351e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     b84:	85a1883a 	add	r16,r16,r22
     b88:	483ff226 	beq	r9,zero,b54 <__alt_data_end+0xffff0b54>
     b8c:	00800b44 	movi	r2,45
     b90:	d8800805 	stb	r2,32(sp)
     b94:	88800117 	ldw	r2,4(r17)
     b98:	01c00044 	movi	r7,1
     b9c:	d9800804 	addi	r6,sp,32
     ba0:	880b883a 	mov	r5,r17
     ba4:	a009883a 	mov	r4,r20
     ba8:	103ee83a 	callr	r2
     bac:	10002a1e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     bb0:	84000044 	addi	r16,r16,1
     bb4:	003fe706 	br	b54 <__alt_data_end+0xffff0b54>
     bb8:	b5bfffc4 	addi	r22,r22,-1
     bbc:	b0800003 	ldbu	r2,0(r22)
     bc0:	01c00044 	movi	r7,1
     bc4:	d9800804 	addi	r6,sp,32
     bc8:	d8800805 	stb	r2,32(sp)
     bcc:	88800117 	ldw	r2,4(r17)
     bd0:	880b883a 	mov	r5,r17
     bd4:	a009883a 	mov	r4,r20
     bd8:	103ee83a 	callr	r2
     bdc:	10001e1e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     be0:	8585c83a 	sub	r2,r16,r22
     be4:	b5c9883a 	add	r4,r22,r23
     be8:	e085883a 	add	r2,fp,r2
     bec:	013ff216 	blt	zero,r4,bb8 <__alt_data_end+0xffff0bb8>
     bf0:	1021883a 	mov	r16,r2
     bf4:	dd800d17 	ldw	r22,52(sp)
     bf8:	00004406 	br	d0c <___vfprintf_internal_r+0x4e4>
     bfc:	00800044 	movi	r2,1
     c00:	1480080e 	bge	r2,r18,c24 <___vfprintf_internal_r+0x3fc>
     c04:	95ffffc4 	addi	r23,r18,-1
     c08:	b80f883a 	mov	r7,r23
     c0c:	01800804 	movi	r6,32
     c10:	880b883a 	mov	r5,r17
     c14:	a009883a 	mov	r4,r20
     c18:	00007bc0 	call	7bc <print_repeat>
     c1c:	10000e1e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     c20:	85e1883a 	add	r16,r16,r23
     c24:	b0800017 	ldw	r2,0(r22)
     c28:	01c00044 	movi	r7,1
     c2c:	d80d883a 	mov	r6,sp
     c30:	d8800005 	stb	r2,0(sp)
     c34:	88800117 	ldw	r2,4(r17)
     c38:	880b883a 	mov	r5,r17
     c3c:	a009883a 	mov	r4,r20
     c40:	b5c00104 	addi	r23,r22,4
     c44:	103ee83a 	callr	r2
     c48:	1000031e 	bne	r2,zero,c58 <___vfprintf_internal_r+0x430>
     c4c:	84000044 	addi	r16,r16,1
     c50:	b82d883a 	mov	r22,r23
     c54:	00002d06 	br	d0c <___vfprintf_internal_r+0x4e4>
     c58:	00bfffc4 	movi	r2,-1
     c5c:	00003106 	br	d24 <___vfprintf_internal_r+0x4fc>
     c60:	b5c00017 	ldw	r23,0(r22)
     c64:	b7000104 	addi	fp,r22,4
     c68:	b809883a 	mov	r4,r23
     c6c:	0000e280 	call	e28 <strlen>
     c70:	9091c83a 	sub	r8,r18,r2
     c74:	102d883a 	mov	r22,r2
     c78:	0200090e 	bge	zero,r8,ca0 <___vfprintf_internal_r+0x478>
     c7c:	400f883a 	mov	r7,r8
     c80:	01800804 	movi	r6,32
     c84:	880b883a 	mov	r5,r17
     c88:	a009883a 	mov	r4,r20
     c8c:	da001015 	stw	r8,64(sp)
     c90:	00007bc0 	call	7bc <print_repeat>
     c94:	da001017 	ldw	r8,64(sp)
     c98:	103fef1e 	bne	r2,zero,c58 <__alt_data_end+0xffff0c58>
     c9c:	8221883a 	add	r16,r16,r8
     ca0:	88800117 	ldw	r2,4(r17)
     ca4:	b00f883a 	mov	r7,r22
     ca8:	b80d883a 	mov	r6,r23
     cac:	880b883a 	mov	r5,r17
     cb0:	a009883a 	mov	r4,r20
     cb4:	103ee83a 	callr	r2
     cb8:	103fe71e 	bne	r2,zero,c58 <__alt_data_end+0xffff0c58>
     cbc:	85a1883a 	add	r16,r16,r22
     cc0:	e02d883a 	mov	r22,fp
     cc4:	00001106 	br	d0c <___vfprintf_internal_r+0x4e4>
     cc8:	00c00044 	movi	r3,1
     ccc:	04ffffc4 	movi	r19,-1
     cd0:	d8000e15 	stw	zero,56(sp)
     cd4:	d8c00a15 	stw	r3,40(sp)
     cd8:	05400284 	movi	r21,10
     cdc:	9825883a 	mov	r18,r19
     ce0:	d8000c15 	stw	zero,48(sp)
     ce4:	d8000b15 	stw	zero,44(sp)
     ce8:	182f883a 	mov	r23,r3
     cec:	00000806 	br	d10 <___vfprintf_internal_r+0x4e8>
     cf0:	ddc00b15 	stw	r23,44(sp)
     cf4:	05c00084 	movi	r23,2
     cf8:	00000506 	br	d10 <___vfprintf_internal_r+0x4e8>
     cfc:	00c00044 	movi	r3,1
     d00:	d8c00c15 	stw	r3,48(sp)
     d04:	05c000c4 	movi	r23,3
     d08:	00000106 	br	d10 <___vfprintf_internal_r+0x4e8>
     d0c:	002f883a 	mov	r23,zero
     d10:	d8c00f17 	ldw	r3,60(sp)
     d14:	18c00044 	addi	r3,r3,1
     d18:	d8c00f15 	stw	r3,60(sp)
     d1c:	003edc06 	br	890 <__alt_data_end+0xffff0890>
     d20:	8005883a 	mov	r2,r16
     d24:	dfc01a17 	ldw	ra,104(sp)
     d28:	df001917 	ldw	fp,100(sp)
     d2c:	ddc01817 	ldw	r23,96(sp)
     d30:	dd801717 	ldw	r22,92(sp)
     d34:	dd401617 	ldw	r21,88(sp)
     d38:	dd001517 	ldw	r20,84(sp)
     d3c:	dcc01417 	ldw	r19,80(sp)
     d40:	dc801317 	ldw	r18,76(sp)
     d44:	dc401217 	ldw	r17,72(sp)
     d48:	dc001117 	ldw	r16,68(sp)
     d4c:	dec01b04 	addi	sp,sp,108
     d50:	f800283a 	ret

00000d54 <__vfprintf_internal>:
     d54:	00800034 	movhi	r2,0
     d58:	1088d504 	addi	r2,r2,9044
     d5c:	300f883a 	mov	r7,r6
     d60:	280d883a 	mov	r6,r5
     d64:	200b883a 	mov	r5,r4
     d68:	11000017 	ldw	r4,0(r2)
     d6c:	00008281 	jmpi	828 <___vfprintf_internal_r>

00000d70 <__sfvwrite_small_dev>:
     d70:	2880000b 	ldhu	r2,0(r5)
     d74:	1080020c 	andi	r2,r2,8
     d78:	10002126 	beq	r2,zero,e00 <__sfvwrite_small_dev+0x90>
     d7c:	2880008f 	ldh	r2,2(r5)
     d80:	defffa04 	addi	sp,sp,-24
     d84:	dc000015 	stw	r16,0(sp)
     d88:	dfc00515 	stw	ra,20(sp)
     d8c:	dd000415 	stw	r20,16(sp)
     d90:	dcc00315 	stw	r19,12(sp)
     d94:	dc800215 	stw	r18,8(sp)
     d98:	dc400115 	stw	r17,4(sp)
     d9c:	2821883a 	mov	r16,r5
     da0:	10001216 	blt	r2,zero,dec <__sfvwrite_small_dev+0x7c>
     da4:	2027883a 	mov	r19,r4
     da8:	3025883a 	mov	r18,r6
     dac:	3823883a 	mov	r17,r7
     db0:	05010004 	movi	r20,1024
     db4:	04400b0e 	bge	zero,r17,de4 <__sfvwrite_small_dev+0x74>
     db8:	880f883a 	mov	r7,r17
     dbc:	a440010e 	bge	r20,r17,dc4 <__sfvwrite_small_dev+0x54>
     dc0:	01c10004 	movi	r7,1024
     dc4:	8140008f 	ldh	r5,2(r16)
     dc8:	900d883a 	mov	r6,r18
     dcc:	9809883a 	mov	r4,r19
     dd0:	0000e440 	call	e44 <_write_r>
     dd4:	0080050e 	bge	zero,r2,dec <__sfvwrite_small_dev+0x7c>
     dd8:	88a3c83a 	sub	r17,r17,r2
     ddc:	90a5883a 	add	r18,r18,r2
     de0:	003ff406 	br	db4 <__alt_data_end+0xffff0db4>
     de4:	0005883a 	mov	r2,zero
     de8:	00000706 	br	e08 <__sfvwrite_small_dev+0x98>
     dec:	8080000b 	ldhu	r2,0(r16)
     df0:	10801014 	ori	r2,r2,64
     df4:	8080000d 	sth	r2,0(r16)
     df8:	00bfffc4 	movi	r2,-1
     dfc:	00000206 	br	e08 <__sfvwrite_small_dev+0x98>
     e00:	00bfffc4 	movi	r2,-1
     e04:	f800283a 	ret
     e08:	dfc00517 	ldw	ra,20(sp)
     e0c:	dd000417 	ldw	r20,16(sp)
     e10:	dcc00317 	ldw	r19,12(sp)
     e14:	dc800217 	ldw	r18,8(sp)
     e18:	dc400117 	ldw	r17,4(sp)
     e1c:	dc000017 	ldw	r16,0(sp)
     e20:	dec00604 	addi	sp,sp,24
     e24:	f800283a 	ret

00000e28 <strlen>:
     e28:	2005883a 	mov	r2,r4
     e2c:	10c00007 	ldb	r3,0(r2)
     e30:	18000226 	beq	r3,zero,e3c <strlen+0x14>
     e34:	10800044 	addi	r2,r2,1
     e38:	003ffc06 	br	e2c <__alt_data_end+0xffff0e2c>
     e3c:	1105c83a 	sub	r2,r2,r4
     e40:	f800283a 	ret

00000e44 <_write_r>:
     e44:	defffd04 	addi	sp,sp,-12
     e48:	dc000015 	stw	r16,0(sp)
     e4c:	04000034 	movhi	r16,0
     e50:	dc400115 	stw	r17,4(sp)
     e54:	8409b904 	addi	r16,r16,9956
     e58:	2023883a 	mov	r17,r4
     e5c:	2809883a 	mov	r4,r5
     e60:	300b883a 	mov	r5,r6
     e64:	380d883a 	mov	r6,r7
     e68:	dfc00215 	stw	ra,8(sp)
     e6c:	80000015 	stw	zero,0(r16)
     e70:	000116c0 	call	116c <write>
     e74:	00ffffc4 	movi	r3,-1
     e78:	10c0031e 	bne	r2,r3,e88 <_write_r+0x44>
     e7c:	80c00017 	ldw	r3,0(r16)
     e80:	18000126 	beq	r3,zero,e88 <_write_r+0x44>
     e84:	88c00015 	stw	r3,0(r17)
     e88:	dfc00217 	ldw	ra,8(sp)
     e8c:	dc400117 	ldw	r17,4(sp)
     e90:	dc000017 	ldw	r16,0(sp)
     e94:	dec00304 	addi	sp,sp,12
     e98:	f800283a 	ret

00000e9c <__divsi3>:
     e9c:	20001b16 	blt	r4,zero,f0c <__divsi3+0x70>
     ea0:	000f883a 	mov	r7,zero
     ea4:	28001616 	blt	r5,zero,f00 <__divsi3+0x64>
     ea8:	200d883a 	mov	r6,r4
     eac:	29001a2e 	bgeu	r5,r4,f18 <__divsi3+0x7c>
     eb0:	00800804 	movi	r2,32
     eb4:	00c00044 	movi	r3,1
     eb8:	00000106 	br	ec0 <__divsi3+0x24>
     ebc:	10000d26 	beq	r2,zero,ef4 <__divsi3+0x58>
     ec0:	294b883a 	add	r5,r5,r5
     ec4:	10bfffc4 	addi	r2,r2,-1
     ec8:	18c7883a 	add	r3,r3,r3
     ecc:	293ffb36 	bltu	r5,r4,ebc <__alt_data_end+0xffff0ebc>
     ed0:	0005883a 	mov	r2,zero
     ed4:	18000726 	beq	r3,zero,ef4 <__divsi3+0x58>
     ed8:	0005883a 	mov	r2,zero
     edc:	31400236 	bltu	r6,r5,ee8 <__divsi3+0x4c>
     ee0:	314dc83a 	sub	r6,r6,r5
     ee4:	10c4b03a 	or	r2,r2,r3
     ee8:	1806d07a 	srli	r3,r3,1
     eec:	280ad07a 	srli	r5,r5,1
     ef0:	183ffa1e 	bne	r3,zero,edc <__alt_data_end+0xffff0edc>
     ef4:	38000126 	beq	r7,zero,efc <__divsi3+0x60>
     ef8:	0085c83a 	sub	r2,zero,r2
     efc:	f800283a 	ret
     f00:	014bc83a 	sub	r5,zero,r5
     f04:	39c0005c 	xori	r7,r7,1
     f08:	003fe706 	br	ea8 <__alt_data_end+0xffff0ea8>
     f0c:	0109c83a 	sub	r4,zero,r4
     f10:	01c00044 	movi	r7,1
     f14:	003fe306 	br	ea4 <__alt_data_end+0xffff0ea4>
     f18:	00c00044 	movi	r3,1
     f1c:	003fee06 	br	ed8 <__alt_data_end+0xffff0ed8>

00000f20 <__modsi3>:
     f20:	20001716 	blt	r4,zero,f80 <__modsi3+0x60>
     f24:	000f883a 	mov	r7,zero
     f28:	2005883a 	mov	r2,r4
     f2c:	28001216 	blt	r5,zero,f78 <__modsi3+0x58>
     f30:	2900162e 	bgeu	r5,r4,f8c <__modsi3+0x6c>
     f34:	01800804 	movi	r6,32
     f38:	00c00044 	movi	r3,1
     f3c:	00000106 	br	f44 <__modsi3+0x24>
     f40:	30000a26 	beq	r6,zero,f6c <__modsi3+0x4c>
     f44:	294b883a 	add	r5,r5,r5
     f48:	31bfffc4 	addi	r6,r6,-1
     f4c:	18c7883a 	add	r3,r3,r3
     f50:	293ffb36 	bltu	r5,r4,f40 <__alt_data_end+0xffff0f40>
     f54:	18000526 	beq	r3,zero,f6c <__modsi3+0x4c>
     f58:	1806d07a 	srli	r3,r3,1
     f5c:	11400136 	bltu	r2,r5,f64 <__modsi3+0x44>
     f60:	1145c83a 	sub	r2,r2,r5
     f64:	280ad07a 	srli	r5,r5,1
     f68:	183ffb1e 	bne	r3,zero,f58 <__alt_data_end+0xffff0f58>
     f6c:	38000126 	beq	r7,zero,f74 <__modsi3+0x54>
     f70:	0085c83a 	sub	r2,zero,r2
     f74:	f800283a 	ret
     f78:	014bc83a 	sub	r5,zero,r5
     f7c:	003fec06 	br	f30 <__alt_data_end+0xffff0f30>
     f80:	0109c83a 	sub	r4,zero,r4
     f84:	01c00044 	movi	r7,1
     f88:	003fe706 	br	f28 <__alt_data_end+0xffff0f28>
     f8c:	00c00044 	movi	r3,1
     f90:	003ff106 	br	f58 <__alt_data_end+0xffff0f58>

00000f94 <__udivsi3>:
     f94:	200d883a 	mov	r6,r4
     f98:	2900152e 	bgeu	r5,r4,ff0 <__udivsi3+0x5c>
     f9c:	28001416 	blt	r5,zero,ff0 <__udivsi3+0x5c>
     fa0:	00800804 	movi	r2,32
     fa4:	00c00044 	movi	r3,1
     fa8:	00000206 	br	fb4 <__udivsi3+0x20>
     fac:	10000e26 	beq	r2,zero,fe8 <__udivsi3+0x54>
     fb0:	28000516 	blt	r5,zero,fc8 <__udivsi3+0x34>
     fb4:	294b883a 	add	r5,r5,r5
     fb8:	10bfffc4 	addi	r2,r2,-1
     fbc:	18c7883a 	add	r3,r3,r3
     fc0:	293ffa36 	bltu	r5,r4,fac <__alt_data_end+0xffff0fac>
     fc4:	18000826 	beq	r3,zero,fe8 <__udivsi3+0x54>
     fc8:	0005883a 	mov	r2,zero
     fcc:	31400236 	bltu	r6,r5,fd8 <__udivsi3+0x44>
     fd0:	314dc83a 	sub	r6,r6,r5
     fd4:	10c4b03a 	or	r2,r2,r3
     fd8:	1806d07a 	srli	r3,r3,1
     fdc:	280ad07a 	srli	r5,r5,1
     fe0:	183ffa1e 	bne	r3,zero,fcc <__alt_data_end+0xffff0fcc>
     fe4:	f800283a 	ret
     fe8:	0005883a 	mov	r2,zero
     fec:	f800283a 	ret
     ff0:	00c00044 	movi	r3,1
     ff4:	003ff406 	br	fc8 <__alt_data_end+0xffff0fc8>

00000ff8 <__umodsi3>:
     ff8:	2005883a 	mov	r2,r4
     ffc:	2900122e 	bgeu	r5,r4,1048 <__umodsi3+0x50>
    1000:	28001116 	blt	r5,zero,1048 <__umodsi3+0x50>
    1004:	01800804 	movi	r6,32
    1008:	00c00044 	movi	r3,1
    100c:	00000206 	br	1018 <__umodsi3+0x20>
    1010:	30000c26 	beq	r6,zero,1044 <__umodsi3+0x4c>
    1014:	28000516 	blt	r5,zero,102c <__umodsi3+0x34>
    1018:	294b883a 	add	r5,r5,r5
    101c:	31bfffc4 	addi	r6,r6,-1
    1020:	18c7883a 	add	r3,r3,r3
    1024:	293ffa36 	bltu	r5,r4,1010 <__alt_data_end+0xffff1010>
    1028:	18000626 	beq	r3,zero,1044 <__umodsi3+0x4c>
    102c:	1806d07a 	srli	r3,r3,1
    1030:	11400136 	bltu	r2,r5,1038 <__umodsi3+0x40>
    1034:	1145c83a 	sub	r2,r2,r5
    1038:	280ad07a 	srli	r5,r5,1
    103c:	183ffb1e 	bne	r3,zero,102c <__alt_data_end+0xffff102c>
    1040:	f800283a 	ret
    1044:	f800283a 	ret
    1048:	00c00044 	movi	r3,1
    104c:	003ff706 	br	102c <__alt_data_end+0xffff102c>

00001050 <alt_load>:
    1050:	deffff04 	addi	sp,sp,-4
    1054:	01000034 	movhi	r4,0
    1058:	01400034 	movhi	r5,0
    105c:	dfc00015 	stw	ra,0(sp)
    1060:	21080504 	addi	r4,r4,8212
    1064:	2948df04 	addi	r5,r5,9084
    1068:	21400a26 	beq	r4,r5,1094 <alt_load+0x44>
    106c:	00800034 	movhi	r2,0
    1070:	1088df04 	addi	r2,r2,9084
    1074:	20800726 	beq	r4,r2,1094 <alt_load+0x44>
    1078:	21800104 	addi	r6,r4,4
    107c:	118dc83a 	sub	r6,r2,r6
    1080:	300cd0ba 	srli	r6,r6,2
    1084:	31800044 	addi	r6,r6,1
    1088:	318d883a 	add	r6,r6,r6
    108c:	318d883a 	add	r6,r6,r6
    1090:	0001db40 	call	1db4 <memcpy>
    1094:	01000034 	movhi	r4,0
    1098:	01400034 	movhi	r5,0
    109c:	21000804 	addi	r4,r4,32
    10a0:	29400804 	addi	r5,r5,32
    10a4:	21400a26 	beq	r4,r5,10d0 <alt_load+0x80>
    10a8:	00800034 	movhi	r2,0
    10ac:	10806104 	addi	r2,r2,388
    10b0:	20800726 	beq	r4,r2,10d0 <alt_load+0x80>
    10b4:	21800104 	addi	r6,r4,4
    10b8:	118dc83a 	sub	r6,r2,r6
    10bc:	300cd0ba 	srli	r6,r6,2
    10c0:	31800044 	addi	r6,r6,1
    10c4:	318d883a 	add	r6,r6,r6
    10c8:	318d883a 	add	r6,r6,r6
    10cc:	0001db40 	call	1db4 <memcpy>
    10d0:	01000034 	movhi	r4,0
    10d4:	01400034 	movhi	r5,0
    10d8:	2107e004 	addi	r4,r4,8064
    10dc:	2947e004 	addi	r5,r5,8064
    10e0:	21400a26 	beq	r4,r5,110c <alt_load+0xbc>
    10e4:	00800034 	movhi	r2,0
    10e8:	10880504 	addi	r2,r2,8212
    10ec:	20800726 	beq	r4,r2,110c <alt_load+0xbc>
    10f0:	21800104 	addi	r6,r4,4
    10f4:	118dc83a 	sub	r6,r2,r6
    10f8:	300cd0ba 	srli	r6,r6,2
    10fc:	31800044 	addi	r6,r6,1
    1100:	318d883a 	add	r6,r6,r6
    1104:	318d883a 	add	r6,r6,r6
    1108:	0001db40 	call	1db4 <memcpy>
    110c:	00015400 	call	1540 <alt_dcache_flush_all>
    1110:	dfc00017 	ldw	ra,0(sp)
    1114:	dec00104 	addi	sp,sp,4
    1118:	00015c41 	jmpi	15c4 <alt_icache_flush_all>

0000111c <alt_main>:
    111c:	defffe04 	addi	sp,sp,-8
    1120:	0009883a 	mov	r4,zero
    1124:	dfc00115 	stw	ra,4(sp)
    1128:	dc000015 	stw	r16,0(sp)
    112c:	00012a00 	call	12a0 <alt_irq_init>
    1130:	00012c00 	call	12c0 <alt_sys_init>
    1134:	01800034 	movhi	r6,0
    1138:	3187fd04 	addi	r6,r6,8180
    113c:	300b883a 	mov	r5,r6
    1140:	3009883a 	mov	r4,r6
    1144:	00016cc0 	call	16cc <alt_io_redirect>
    1148:	d1a0e617 	ldw	r6,-31848(gp)
    114c:	d160e717 	ldw	r5,-31844(gp)
    1150:	d120e817 	ldw	r4,-31840(gp)
    1154:	00001c00 	call	1c0 <main>
    1158:	01000044 	movi	r4,1
    115c:	1021883a 	mov	r16,r2
    1160:	00014680 	call	1468 <close>
    1164:	8009883a 	mov	r4,r16
    1168:	0001d640 	call	1d64 <exit>

0000116c <write>:
    116c:	defffa04 	addi	sp,sp,-24
    1170:	dfc00515 	stw	ra,20(sp)
    1174:	dd000415 	stw	r20,16(sp)
    1178:	dcc00315 	stw	r19,12(sp)
    117c:	dc800215 	stw	r18,8(sp)
    1180:	dc400115 	stw	r17,4(sp)
    1184:	dc000015 	stw	r16,0(sp)
    1188:	20003616 	blt	r4,zero,1264 <write+0xf8>
    118c:	2827883a 	mov	r19,r5
    1190:	04000034 	movhi	r16,0
    1194:	01400304 	movi	r5,12
    1198:	2025883a 	mov	r18,r4
    119c:	3029883a 	mov	r20,r6
    11a0:	84086a04 	addi	r16,r16,8616
    11a4:	000070c0 	call	70c <__mulsi3>
    11a8:	80a3883a 	add	r17,r16,r2
    11ac:	88002d26 	beq	r17,zero,1264 <write+0xf8>
    11b0:	88800217 	ldw	r2,8(r17)
    11b4:	108000cc 	andi	r2,r2,3
    11b8:	10001526 	beq	r2,zero,1210 <write+0xa4>
    11bc:	01400304 	movi	r5,12
    11c0:	9009883a 	mov	r4,r18
    11c4:	000070c0 	call	70c <__mulsi3>
    11c8:	8085883a 	add	r2,r16,r2
    11cc:	10800017 	ldw	r2,0(r2)
    11d0:	10800617 	ldw	r2,24(r2)
    11d4:	10000e26 	beq	r2,zero,1210 <write+0xa4>
    11d8:	a00d883a 	mov	r6,r20
    11dc:	980b883a 	mov	r5,r19
    11e0:	8809883a 	mov	r4,r17
    11e4:	103ee83a 	callr	r2
    11e8:	1021883a 	mov	r16,r2
    11ec:	10001416 	blt	r2,zero,1240 <write+0xd4>
    11f0:	dfc00517 	ldw	ra,20(sp)
    11f4:	dd000417 	ldw	r20,16(sp)
    11f8:	dcc00317 	ldw	r19,12(sp)
    11fc:	dc800217 	ldw	r18,8(sp)
    1200:	dc400117 	ldw	r17,4(sp)
    1204:	dc000017 	ldw	r16,0(sp)
    1208:	dec00604 	addi	sp,sp,24
    120c:	f800283a 	ret
    1210:	00800034 	movhi	r2,0
    1214:	1088db04 	addi	r2,r2,9068
    1218:	10800017 	ldw	r2,0(r2)
    121c:	10000526 	beq	r2,zero,1234 <write+0xc8>
    1220:	103ee83a 	callr	r2
    1224:	00c00344 	movi	r3,13
    1228:	10c00015 	stw	r3,0(r2)
    122c:	00bfffc4 	movi	r2,-1
    1230:	003fef06 	br	11f0 <__alt_data_end+0xffff11f0>
    1234:	00800034 	movhi	r2,0
    1238:	1089b904 	addi	r2,r2,9956
    123c:	003ff906 	br	1224 <__alt_data_end+0xffff1224>
    1240:	00800034 	movhi	r2,0
    1244:	1088db04 	addi	r2,r2,9068
    1248:	10800017 	ldw	r2,0(r2)
    124c:	10000e26 	beq	r2,zero,1288 <write+0x11c>
    1250:	103ee83a 	callr	r2
    1254:	0421c83a 	sub	r16,zero,r16
    1258:	14000015 	stw	r16,0(r2)
    125c:	00bfffc4 	movi	r2,-1
    1260:	003fe306 	br	11f0 <__alt_data_end+0xffff11f0>
    1264:	00800034 	movhi	r2,0
    1268:	1088db04 	addi	r2,r2,9068
    126c:	10800017 	ldw	r2,0(r2)
    1270:	10000826 	beq	r2,zero,1294 <write+0x128>
    1274:	103ee83a 	callr	r2
    1278:	00c01444 	movi	r3,81
    127c:	10c00015 	stw	r3,0(r2)
    1280:	00bfffc4 	movi	r2,-1
    1284:	003fda06 	br	11f0 <__alt_data_end+0xffff11f0>
    1288:	00800034 	movhi	r2,0
    128c:	1089b904 	addi	r2,r2,9956
    1290:	003ff006 	br	1254 <__alt_data_end+0xffff1254>
    1294:	00800034 	movhi	r2,0
    1298:	1089b904 	addi	r2,r2,9956
    129c:	003ff606 	br	1278 <__alt_data_end+0xffff1278>

000012a0 <alt_irq_init>:
    12a0:	deffff04 	addi	sp,sp,-4
    12a4:	dfc00015 	stw	ra,0(sp)
    12a8:	0001b300 	call	1b30 <altera_nios2_gen2_irq_init>
    12ac:	00800044 	movi	r2,1
    12b0:	1001703a 	wrctl	status,r2
    12b4:	dfc00017 	ldw	ra,0(sp)
    12b8:	dec00104 	addi	sp,sp,4
    12bc:	f800283a 	ret

000012c0 <alt_sys_init>:
    12c0:	01000074 	movhi	r4,1
    12c4:	deffff04 	addi	sp,sp,-4
    12c8:	21040004 	addi	r4,r4,4096
    12cc:	000b883a 	mov	r5,zero
    12d0:	01c0fa04 	movi	r7,1000
    12d4:	01800044 	movi	r6,1
    12d8:	dfc00015 	stw	ra,0(sp)
    12dc:	00014180 	call	1418 <alt_avalon_timer_sc_init>
    12e0:	01400034 	movhi	r5,0
    12e4:	01000034 	movhi	r4,0
    12e8:	2948d704 	addi	r5,r5,9052
    12ec:	21085f04 	addi	r4,r4,8572
    12f0:	dfc00017 	ldw	ra,0(sp)
    12f4:	dec00104 	addi	sp,sp,4
    12f8:	000154c1 	jmpi	154c <alt_dev_llist_insert>

000012fc <altera_avalon_jtag_uart_read_fd>:
    12fc:	20800017 	ldw	r2,0(r4)
    1300:	21c00217 	ldw	r7,8(r4)
    1304:	11000a04 	addi	r4,r2,40
    1308:	000131c1 	jmpi	131c <altera_avalon_jtag_uart_read>

0000130c <altera_avalon_jtag_uart_write_fd>:
    130c:	20800017 	ldw	r2,0(r4)
    1310:	21c00217 	ldw	r7,8(r4)
    1314:	11000a04 	addi	r4,r2,40
    1318:	00013a81 	jmpi	13a8 <altera_avalon_jtag_uart_write>

0000131c <altera_avalon_jtag_uart_read>:
    131c:	298d883a 	add	r6,r5,r6
    1320:	22000017 	ldw	r8,0(r4)
    1324:	39d0000c 	andi	r7,r7,16384
    1328:	29801d2e 	bgeu	r5,r6,13a0 <altera_avalon_jtag_uart_read+0x84>
    132c:	2807883a 	mov	r3,r5
    1330:	38000c1e 	bne	r7,zero,1364 <altera_avalon_jtag_uart_read+0x48>
    1334:	41000037 	ldwio	r4,0(r8)
    1338:	21e0000c 	andi	r7,r4,32768
    133c:	18800044 	addi	r2,r3,1
    1340:	3800041e 	bne	r7,zero,1354 <altera_avalon_jtag_uart_read+0x38>
    1344:	28fffb26 	beq	r5,r3,1334 <__alt_data_end+0xffff1334>
    1348:	1805883a 	mov	r2,r3
    134c:	1145c83a 	sub	r2,r2,r5
    1350:	f800283a 	ret
    1354:	19000005 	stb	r4,0(r3)
    1358:	11800b2e 	bgeu	r2,r6,1388 <altera_avalon_jtag_uart_read+0x6c>
    135c:	1007883a 	mov	r3,r2
    1360:	003ff406 	br	1334 <__alt_data_end+0xffff1334>
    1364:	41000037 	ldwio	r4,0(r8)
    1368:	21e0000c 	andi	r7,r4,32768
    136c:	18800044 	addi	r2,r3,1
    1370:	38000826 	beq	r7,zero,1394 <altera_avalon_jtag_uart_read+0x78>
    1374:	19000005 	stb	r4,0(r3)
    1378:	1007883a 	mov	r3,r2
    137c:	11bff91e 	bne	r2,r6,1364 <__alt_data_end+0xffff1364>
    1380:	29bff21e 	bne	r5,r6,134c <__alt_data_end+0xffff134c>
    1384:	00000406 	br	1398 <altera_avalon_jtag_uart_read+0x7c>
    1388:	28bff01e 	bne	r5,r2,134c <__alt_data_end+0xffff134c>
    138c:	00bffec4 	movi	r2,-5
    1390:	f800283a 	ret
    1394:	28ffec1e 	bne	r5,r3,1348 <__alt_data_end+0xffff1348>
    1398:	00bffd44 	movi	r2,-11
    139c:	f800283a 	ret
    13a0:	383ffa26 	beq	r7,zero,138c <__alt_data_end+0xffff138c>
    13a4:	003ffc06 	br	1398 <__alt_data_end+0xffff1398>

000013a8 <altera_avalon_jtag_uart_write>:
    13a8:	21c00017 	ldw	r7,0(r4)
    13ac:	3005883a 	mov	r2,r6
    13b0:	298d883a 	add	r6,r5,r6
    13b4:	39000104 	addi	r4,r7,4
    13b8:	2980072e 	bgeu	r5,r6,13d8 <altera_avalon_jtag_uart_write+0x30>
    13bc:	20c00037 	ldwio	r3,0(r4)
    13c0:	18ffffec 	andhi	r3,r3,65535
    13c4:	183ffd26 	beq	r3,zero,13bc <__alt_data_end+0xffff13bc>
    13c8:	28c00007 	ldb	r3,0(r5)
    13cc:	38c00035 	stwio	r3,0(r7)
    13d0:	29400044 	addi	r5,r5,1
    13d4:	003ff806 	br	13b8 <__alt_data_end+0xffff13b8>
    13d8:	f800283a 	ret

000013dc <alt_avalon_timer_sc_irq>:
    13dc:	defffe04 	addi	sp,sp,-8
    13e0:	dfc00115 	stw	ra,4(sp)
    13e4:	dc000015 	stw	r16,0(sp)
    13e8:	20000035 	stwio	zero,0(r4)
    13ec:	20800137 	ldwio	r2,4(r4)
    13f0:	0021303a 	rdctl	r16,status
    13f4:	00bfff84 	movi	r2,-2
    13f8:	8084703a 	and	r2,r16,r2
    13fc:	1001703a 	wrctl	status,r2
    1400:	0001a3c0 	call	1a3c <alt_tick>
    1404:	8001703a 	wrctl	status,r16
    1408:	dfc00117 	ldw	ra,4(sp)
    140c:	dc000017 	ldw	r16,0(sp)
    1410:	dec00204 	addi	sp,sp,8
    1414:	f800283a 	ret

00001418 <alt_avalon_timer_sc_init>:
    1418:	00c00034 	movhi	r3,0
    141c:	18c9bf04 	addi	r3,r3,9980
    1420:	1a000017 	ldw	r8,0(r3)
    1424:	defffe04 	addi	sp,sp,-8
    1428:	dfc00115 	stw	ra,4(sp)
    142c:	2005883a 	mov	r2,r4
    1430:	2809883a 	mov	r4,r5
    1434:	300b883a 	mov	r5,r6
    1438:	4000011e 	bne	r8,zero,1440 <alt_avalon_timer_sc_init+0x28>
    143c:	19c00015 	stw	r7,0(r3)
    1440:	00c001c4 	movi	r3,7
    1444:	10c00135 	stwio	r3,4(r2)
    1448:	01800034 	movhi	r6,0
    144c:	3184f704 	addi	r6,r6,5084
    1450:	d8000015 	stw	zero,0(sp)
    1454:	100f883a 	mov	r7,r2
    1458:	00015c80 	call	15c8 <alt_ic_isr_register>
    145c:	dfc00117 	ldw	ra,4(sp)
    1460:	dec00204 	addi	sp,sp,8
    1464:	f800283a 	ret

00001468 <close>:
    1468:	defffd04 	addi	sp,sp,-12
    146c:	dfc00215 	stw	ra,8(sp)
    1470:	dc400115 	stw	r17,4(sp)
    1474:	dc000015 	stw	r16,0(sp)
    1478:	20002216 	blt	r4,zero,1504 <close+0x9c>
    147c:	01400304 	movi	r5,12
    1480:	2021883a 	mov	r16,r4
    1484:	000070c0 	call	70c <__mulsi3>
    1488:	01000034 	movhi	r4,0
    148c:	21086a04 	addi	r4,r4,8616
    1490:	2089883a 	add	r4,r4,r2
    1494:	20001b26 	beq	r4,zero,1504 <close+0x9c>
    1498:	20800017 	ldw	r2,0(r4)
    149c:	10800417 	ldw	r2,16(r2)
    14a0:	10000b26 	beq	r2,zero,14d0 <close+0x68>
    14a4:	103ee83a 	callr	r2
    14a8:	8009883a 	mov	r4,r16
    14ac:	1023883a 	mov	r17,r2
    14b0:	00019ac0 	call	19ac <alt_release_fd>
    14b4:	0005883a 	mov	r2,zero
    14b8:	88000916 	blt	r17,zero,14e0 <close+0x78>
    14bc:	dfc00217 	ldw	ra,8(sp)
    14c0:	dc400117 	ldw	r17,4(sp)
    14c4:	dc000017 	ldw	r16,0(sp)
    14c8:	dec00304 	addi	sp,sp,12
    14cc:	f800283a 	ret
    14d0:	8009883a 	mov	r4,r16
    14d4:	00019ac0 	call	19ac <alt_release_fd>
    14d8:	0005883a 	mov	r2,zero
    14dc:	003ff706 	br	14bc <__alt_data_end+0xffff14bc>
    14e0:	00800034 	movhi	r2,0
    14e4:	1088db04 	addi	r2,r2,9068
    14e8:	10800017 	ldw	r2,0(r2)
    14ec:	10000e26 	beq	r2,zero,1528 <close+0xc0>
    14f0:	103ee83a 	callr	r2
    14f4:	0463c83a 	sub	r17,zero,r17
    14f8:	14400015 	stw	r17,0(r2)
    14fc:	00bfffc4 	movi	r2,-1
    1500:	003fee06 	br	14bc <__alt_data_end+0xffff14bc>
    1504:	00800034 	movhi	r2,0
    1508:	1088db04 	addi	r2,r2,9068
    150c:	10800017 	ldw	r2,0(r2)
    1510:	10000826 	beq	r2,zero,1534 <close+0xcc>
    1514:	103ee83a 	callr	r2
    1518:	00c01444 	movi	r3,81
    151c:	10c00015 	stw	r3,0(r2)
    1520:	00bfffc4 	movi	r2,-1
    1524:	003fe506 	br	14bc <__alt_data_end+0xffff14bc>
    1528:	00800034 	movhi	r2,0
    152c:	1089b904 	addi	r2,r2,9956
    1530:	003ff006 	br	14f4 <__alt_data_end+0xffff14f4>
    1534:	00800034 	movhi	r2,0
    1538:	1089b904 	addi	r2,r2,9956
    153c:	003ff606 	br	1518 <__alt_data_end+0xffff1518>

00001540 <alt_dcache_flush_all>:
    1540:	f800283a 	ret

00001544 <alt_dev_null_write>:
    1544:	3005883a 	mov	r2,r6
    1548:	f800283a 	ret

0000154c <alt_dev_llist_insert>:
    154c:	20000a26 	beq	r4,zero,1578 <alt_dev_llist_insert+0x2c>
    1550:	20800217 	ldw	r2,8(r4)
    1554:	10000826 	beq	r2,zero,1578 <alt_dev_llist_insert+0x2c>
    1558:	28c00017 	ldw	r3,0(r5)
    155c:	21400115 	stw	r5,4(r4)
    1560:	0005883a 	mov	r2,zero
    1564:	20c00015 	stw	r3,0(r4)
    1568:	28c00017 	ldw	r3,0(r5)
    156c:	19000115 	stw	r4,4(r3)
    1570:	29000015 	stw	r4,0(r5)
    1574:	f800283a 	ret
    1578:	00800034 	movhi	r2,0
    157c:	1088db04 	addi	r2,r2,9068
    1580:	10800017 	ldw	r2,0(r2)
    1584:	10000926 	beq	r2,zero,15ac <alt_dev_llist_insert+0x60>
    1588:	deffff04 	addi	sp,sp,-4
    158c:	dfc00015 	stw	ra,0(sp)
    1590:	103ee83a 	callr	r2
    1594:	00c00584 	movi	r3,22
    1598:	10c00015 	stw	r3,0(r2)
    159c:	00bffa84 	movi	r2,-22
    15a0:	dfc00017 	ldw	ra,0(sp)
    15a4:	dec00104 	addi	sp,sp,4
    15a8:	f800283a 	ret
    15ac:	00800034 	movhi	r2,0
    15b0:	1089b904 	addi	r2,r2,9956
    15b4:	00c00584 	movi	r3,22
    15b8:	10c00015 	stw	r3,0(r2)
    15bc:	00bffa84 	movi	r2,-22
    15c0:	f800283a 	ret

000015c4 <alt_icache_flush_all>:
    15c4:	f800283a 	ret

000015c8 <alt_ic_isr_register>:
    15c8:	00016641 	jmpi	1664 <alt_iic_isr_register>

000015cc <alt_ic_irq_enable>:
    15cc:	0009303a 	rdctl	r4,status
    15d0:	00bfff84 	movi	r2,-2
    15d4:	2084703a 	and	r2,r4,r2
    15d8:	1001703a 	wrctl	status,r2
    15dc:	00800034 	movhi	r2,0
    15e0:	1089bd04 	addi	r2,r2,9972
    15e4:	00c00044 	movi	r3,1
    15e8:	194a983a 	sll	r5,r3,r5
    15ec:	10c00017 	ldw	r3,0(r2)
    15f0:	28cab03a 	or	r5,r5,r3
    15f4:	11400015 	stw	r5,0(r2)
    15f8:	10800017 	ldw	r2,0(r2)
    15fc:	100170fa 	wrctl	ienable,r2
    1600:	2001703a 	wrctl	status,r4
    1604:	0005883a 	mov	r2,zero
    1608:	f800283a 	ret

0000160c <alt_ic_irq_disable>:
    160c:	0009303a 	rdctl	r4,status
    1610:	00bfff84 	movi	r2,-2
    1614:	2084703a 	and	r2,r4,r2
    1618:	1001703a 	wrctl	status,r2
    161c:	00800034 	movhi	r2,0
    1620:	1089bd04 	addi	r2,r2,9972
    1624:	00ffff84 	movi	r3,-2
    1628:	194a183a 	rol	r5,r3,r5
    162c:	10c00017 	ldw	r3,0(r2)
    1630:	28ca703a 	and	r5,r5,r3
    1634:	11400015 	stw	r5,0(r2)
    1638:	10800017 	ldw	r2,0(r2)
    163c:	100170fa 	wrctl	ienable,r2
    1640:	2001703a 	wrctl	status,r4
    1644:	0005883a 	mov	r2,zero
    1648:	f800283a 	ret

0000164c <alt_ic_irq_enabled>:
    164c:	000730fa 	rdctl	r3,ienable
    1650:	00800044 	movi	r2,1
    1654:	1144983a 	sll	r2,r2,r5
    1658:	10c4703a 	and	r2,r2,r3
    165c:	1004c03a 	cmpne	r2,r2,zero
    1660:	f800283a 	ret

00001664 <alt_iic_isr_register>:
    1664:	00c007c4 	movi	r3,31
    1668:	19401616 	blt	r3,r5,16c4 <alt_iic_isr_register+0x60>
    166c:	defffe04 	addi	sp,sp,-8
    1670:	dfc00115 	stw	ra,4(sp)
    1674:	dc000015 	stw	r16,0(sp)
    1678:	0021303a 	rdctl	r16,status
    167c:	00ffff84 	movi	r3,-2
    1680:	80c6703a 	and	r3,r16,r3
    1684:	1801703a 	wrctl	status,r3
    1688:	280490fa 	slli	r2,r5,3
    168c:	00c00034 	movhi	r3,0
    1690:	18c9c104 	addi	r3,r3,9988
    1694:	1885883a 	add	r2,r3,r2
    1698:	11800015 	stw	r6,0(r2)
    169c:	11c00115 	stw	r7,4(r2)
    16a0:	30000626 	beq	r6,zero,16bc <alt_iic_isr_register+0x58>
    16a4:	00015cc0 	call	15cc <alt_ic_irq_enable>
    16a8:	8001703a 	wrctl	status,r16
    16ac:	dfc00117 	ldw	ra,4(sp)
    16b0:	dc000017 	ldw	r16,0(sp)
    16b4:	dec00204 	addi	sp,sp,8
    16b8:	f800283a 	ret
    16bc:	000160c0 	call	160c <alt_ic_irq_disable>
    16c0:	003ff906 	br	16a8 <__alt_data_end+0xffff16a8>
    16c4:	00bffa84 	movi	r2,-22
    16c8:	f800283a 	ret

000016cc <alt_io_redirect>:
    16cc:	defffb04 	addi	sp,sp,-20
    16d0:	dcc00315 	stw	r19,12(sp)
    16d4:	dc800215 	stw	r18,8(sp)
    16d8:	2827883a 	mov	r19,r5
    16dc:	3025883a 	mov	r18,r6
    16e0:	01400044 	movi	r5,1
    16e4:	01807fc4 	movi	r6,511
    16e8:	dfc00415 	stw	ra,16(sp)
    16ec:	dc400115 	stw	r17,4(sp)
    16f0:	dc000015 	stw	r16,0(sp)
    16f4:	000180c0 	call	180c <open>
    16f8:	10000f16 	blt	r2,zero,1738 <alt_io_redirect+0x6c>
    16fc:	1009883a 	mov	r4,r2
    1700:	01400304 	movi	r5,12
    1704:	04400034 	movhi	r17,0
    1708:	8c486a04 	addi	r17,r17,8616
    170c:	1021883a 	mov	r16,r2
    1710:	000070c0 	call	70c <__mulsi3>
    1714:	8885883a 	add	r2,r17,r2
    1718:	11400017 	ldw	r5,0(r2)
    171c:	10c00217 	ldw	r3,8(r2)
    1720:	8009883a 	mov	r4,r16
    1724:	89400315 	stw	r5,12(r17)
    1728:	10800117 	ldw	r2,4(r2)
    172c:	88c00515 	stw	r3,20(r17)
    1730:	88800415 	stw	r2,16(r17)
    1734:	00019ac0 	call	19ac <alt_release_fd>
    1738:	01807fc4 	movi	r6,511
    173c:	000b883a 	mov	r5,zero
    1740:	9809883a 	mov	r4,r19
    1744:	000180c0 	call	180c <open>
    1748:	1021883a 	mov	r16,r2
    174c:	10000e16 	blt	r2,zero,1788 <alt_io_redirect+0xbc>
    1750:	1009883a 	mov	r4,r2
    1754:	01400304 	movi	r5,12
    1758:	04400034 	movhi	r17,0
    175c:	000070c0 	call	70c <__mulsi3>
    1760:	8c486a04 	addi	r17,r17,8616
    1764:	8885883a 	add	r2,r17,r2
    1768:	11400017 	ldw	r5,0(r2)
    176c:	10c00217 	ldw	r3,8(r2)
    1770:	8009883a 	mov	r4,r16
    1774:	89400015 	stw	r5,0(r17)
    1778:	10800117 	ldw	r2,4(r2)
    177c:	88c00215 	stw	r3,8(r17)
    1780:	88800115 	stw	r2,4(r17)
    1784:	00019ac0 	call	19ac <alt_release_fd>
    1788:	01807fc4 	movi	r6,511
    178c:	01400044 	movi	r5,1
    1790:	9009883a 	mov	r4,r18
    1794:	000180c0 	call	180c <open>
    1798:	1021883a 	mov	r16,r2
    179c:	10001416 	blt	r2,zero,17f0 <alt_io_redirect+0x124>
    17a0:	1009883a 	mov	r4,r2
    17a4:	01400304 	movi	r5,12
    17a8:	04400034 	movhi	r17,0
    17ac:	000070c0 	call	70c <__mulsi3>
    17b0:	8c486a04 	addi	r17,r17,8616
    17b4:	8885883a 	add	r2,r17,r2
    17b8:	11400017 	ldw	r5,0(r2)
    17bc:	10c00217 	ldw	r3,8(r2)
    17c0:	8009883a 	mov	r4,r16
    17c4:	89400615 	stw	r5,24(r17)
    17c8:	10800117 	ldw	r2,4(r2)
    17cc:	88c00815 	stw	r3,32(r17)
    17d0:	88800715 	stw	r2,28(r17)
    17d4:	dfc00417 	ldw	ra,16(sp)
    17d8:	dcc00317 	ldw	r19,12(sp)
    17dc:	dc800217 	ldw	r18,8(sp)
    17e0:	dc400117 	ldw	r17,4(sp)
    17e4:	dc000017 	ldw	r16,0(sp)
    17e8:	dec00504 	addi	sp,sp,20
    17ec:	00019ac1 	jmpi	19ac <alt_release_fd>
    17f0:	dfc00417 	ldw	ra,16(sp)
    17f4:	dcc00317 	ldw	r19,12(sp)
    17f8:	dc800217 	ldw	r18,8(sp)
    17fc:	dc400117 	ldw	r17,4(sp)
    1800:	dc000017 	ldw	r16,0(sp)
    1804:	dec00504 	addi	sp,sp,20
    1808:	f800283a 	ret

0000180c <open>:
    180c:	defffa04 	addi	sp,sp,-24
    1810:	dc000015 	stw	r16,0(sp)
    1814:	2821883a 	mov	r16,r5
    1818:	01400034 	movhi	r5,0
    181c:	2948d704 	addi	r5,r5,9052
    1820:	dc800215 	stw	r18,8(sp)
    1824:	dc400115 	stw	r17,4(sp)
    1828:	dfc00515 	stw	ra,20(sp)
    182c:	dd000415 	stw	r20,16(sp)
    1830:	dcc00315 	stw	r19,12(sp)
    1834:	2023883a 	mov	r17,r4
    1838:	3025883a 	mov	r18,r6
    183c:	0001b380 	call	1b38 <alt_find_dev>
    1840:	10004e26 	beq	r2,zero,197c <open+0x170>
    1844:	1009883a 	mov	r4,r2
    1848:	1029883a 	mov	r20,r2
    184c:	0001c600 	call	1c60 <alt_get_fd>
    1850:	1027883a 	mov	r19,r2
    1854:	10000b0e 	bge	r2,zero,1884 <open+0x78>
    1858:	04e1c83a 	sub	r16,zero,r19
    185c:	9809883a 	mov	r4,r19
    1860:	00019ac0 	call	19ac <alt_release_fd>
    1864:	00800034 	movhi	r2,0
    1868:	1088db04 	addi	r2,r2,9068
    186c:	10800017 	ldw	r2,0(r2)
    1870:	10004926 	beq	r2,zero,1998 <open+0x18c>
    1874:	103ee83a 	callr	r2
    1878:	14000015 	stw	r16,0(r2)
    187c:	00bfffc4 	movi	r2,-1
    1880:	00003406 	br	1954 <open+0x148>
    1884:	01400304 	movi	r5,12
    1888:	9809883a 	mov	r4,r19
    188c:	000070c0 	call	70c <__mulsi3>
    1890:	00c00034 	movhi	r3,0
    1894:	01500034 	movhi	r5,16384
    1898:	18c86a04 	addi	r3,r3,8616
    189c:	297fffc4 	addi	r5,r5,-1
    18a0:	1889883a 	add	r4,r3,r2
    18a4:	814a703a 	and	r5,r16,r5
    18a8:	00800034 	movhi	r2,0
    18ac:	29500034 	orhi	r5,r5,16384
    18b0:	1088d604 	addi	r2,r2,9048
    18b4:	21400215 	stw	r5,8(r4)
    18b8:	12400017 	ldw	r9,0(r2)
    18bc:	22000017 	ldw	r8,0(r4)
    18c0:	19800204 	addi	r6,r3,8
    18c4:	000b883a 	mov	r5,zero
    18c8:	00000306 	br	18d8 <open+0xcc>
    18cc:	18c00304 	addi	r3,r3,12
    18d0:	31800304 	addi	r6,r6,12
    18d4:	49401636 	bltu	r9,r5,1930 <open+0x124>
    18d8:	19c00017 	ldw	r7,0(r3)
    18dc:	29400044 	addi	r5,r5,1
    18e0:	3a3ffa1e 	bne	r7,r8,18cc <__alt_data_end+0xffff18cc>
    18e4:	30800017 	ldw	r2,0(r6)
    18e8:	103ff80e 	bge	r2,zero,18cc <__alt_data_end+0xffff18cc>
    18ec:	20fff726 	beq	r4,r3,18cc <__alt_data_end+0xffff18cc>
    18f0:	04000344 	movi	r16,13
    18f4:	003fd906 	br	185c <__alt_data_end+0xffff185c>
    18f8:	1009883a 	mov	r4,r2
    18fc:	0001c600 	call	1c60 <alt_get_fd>
    1900:	1027883a 	mov	r19,r2
    1904:	103fd416 	blt	r2,zero,1858 <__alt_data_end+0xffff1858>
    1908:	9809883a 	mov	r4,r19
    190c:	01400304 	movi	r5,12
    1910:	000070c0 	call	70c <__mulsi3>
    1914:	01000034 	movhi	r4,0
    1918:	21086a04 	addi	r4,r4,8616
    191c:	2089883a 	add	r4,r4,r2
    1920:	00900034 	movhi	r2,16384
    1924:	10bfffc4 	addi	r2,r2,-1
    1928:	8084703a 	and	r2,r16,r2
    192c:	20800215 	stw	r2,8(r4)
    1930:	a0800317 	ldw	r2,12(r20)
    1934:	10000f26 	beq	r2,zero,1974 <open+0x168>
    1938:	900f883a 	mov	r7,r18
    193c:	800d883a 	mov	r6,r16
    1940:	880b883a 	mov	r5,r17
    1944:	103ee83a 	callr	r2
    1948:	1007883a 	mov	r3,r2
    194c:	9805883a 	mov	r2,r19
    1950:	18001416 	blt	r3,zero,19a4 <open+0x198>
    1954:	dfc00517 	ldw	ra,20(sp)
    1958:	dd000417 	ldw	r20,16(sp)
    195c:	dcc00317 	ldw	r19,12(sp)
    1960:	dc800217 	ldw	r18,8(sp)
    1964:	dc400117 	ldw	r17,4(sp)
    1968:	dc000017 	ldw	r16,0(sp)
    196c:	dec00604 	addi	sp,sp,24
    1970:	f800283a 	ret
    1974:	9805883a 	mov	r2,r19
    1978:	003ff606 	br	1954 <__alt_data_end+0xffff1954>
    197c:	8809883a 	mov	r4,r17
    1980:	0001bb00 	call	1bb0 <alt_find_file>
    1984:	1029883a 	mov	r20,r2
    1988:	103fdb1e 	bne	r2,zero,18f8 <__alt_data_end+0xffff18f8>
    198c:	040004c4 	movi	r16,19
    1990:	04ffffc4 	movi	r19,-1
    1994:	003fb106 	br	185c <__alt_data_end+0xffff185c>
    1998:	00800034 	movhi	r2,0
    199c:	1089b904 	addi	r2,r2,9956
    19a0:	003fb506 	br	1878 <__alt_data_end+0xffff1878>
    19a4:	00e1c83a 	sub	r16,zero,r3
    19a8:	003fac06 	br	185c <__alt_data_end+0xffff185c>

000019ac <alt_release_fd>:
    19ac:	00c00084 	movi	r3,2
    19b0:	1900140e 	bge	r3,r4,1a04 <alt_release_fd+0x58>
    19b4:	defffd04 	addi	sp,sp,-12
    19b8:	dc400115 	stw	r17,4(sp)
    19bc:	01400304 	movi	r5,12
    19c0:	04400034 	movhi	r17,0
    19c4:	dfc00215 	stw	ra,8(sp)
    19c8:	dc000015 	stw	r16,0(sp)
    19cc:	8c486a04 	addi	r17,r17,8616
    19d0:	2021883a 	mov	r16,r4
    19d4:	000070c0 	call	70c <__mulsi3>
    19d8:	8885883a 	add	r2,r17,r2
    19dc:	01400304 	movi	r5,12
    19e0:	8009883a 	mov	r4,r16
    19e4:	10000215 	stw	zero,8(r2)
    19e8:	000070c0 	call	70c <__mulsi3>
    19ec:	8885883a 	add	r2,r17,r2
    19f0:	10000015 	stw	zero,0(r2)
    19f4:	dfc00217 	ldw	ra,8(sp)
    19f8:	dc400117 	ldw	r17,4(sp)
    19fc:	dc000017 	ldw	r16,0(sp)
    1a00:	dec00304 	addi	sp,sp,12
    1a04:	f800283a 	ret

00001a08 <alt_alarm_stop>:
    1a08:	0007303a 	rdctl	r3,status
    1a0c:	00bfff84 	movi	r2,-2
    1a10:	1884703a 	and	r2,r3,r2
    1a14:	1001703a 	wrctl	status,r2
    1a18:	21400117 	ldw	r5,4(r4)
    1a1c:	20800017 	ldw	r2,0(r4)
    1a20:	11400115 	stw	r5,4(r2)
    1a24:	21400117 	ldw	r5,4(r4)
    1a28:	28800015 	stw	r2,0(r5)
    1a2c:	21000115 	stw	r4,4(r4)
    1a30:	21000015 	stw	r4,0(r4)
    1a34:	1801703a 	wrctl	status,r3
    1a38:	f800283a 	ret

00001a3c <alt_tick>:
    1a3c:	d0a0ea17 	ldw	r2,-31832(gp)
    1a40:	defffa04 	addi	sp,sp,-24
    1a44:	dc000015 	stw	r16,0(sp)
    1a48:	d4200917 	ldw	r16,-32732(gp)
    1a4c:	10800044 	addi	r2,r2,1
    1a50:	dc800215 	stw	r18,8(sp)
    1a54:	dfc00515 	stw	ra,20(sp)
    1a58:	dd000415 	stw	r20,16(sp)
    1a5c:	dcc00315 	stw	r19,12(sp)
    1a60:	dc400115 	stw	r17,4(sp)
    1a64:	d4a00904 	addi	r18,gp,-32732
    1a68:	d0a0ea15 	stw	r2,-31832(gp)
    1a6c:	84801126 	beq	r16,r18,1ab4 <alt_tick+0x78>
    1a70:	04c00044 	movi	r19,1
    1a74:	053fff84 	movi	r20,-2
    1a78:	00000606 	br	1a94 <alt_tick+0x58>
    1a7c:	80000405 	stb	zero,16(r16)
    1a80:	d0e0ea17 	ldw	r3,-31832(gp)
    1a84:	80800217 	ldw	r2,8(r16)
    1a88:	1880122e 	bgeu	r3,r2,1ad4 <alt_tick+0x98>
    1a8c:	8821883a 	mov	r16,r17
    1a90:	8c800826 	beq	r17,r18,1ab4 <alt_tick+0x78>
    1a94:	80800403 	ldbu	r2,16(r16)
    1a98:	84400017 	ldw	r17,0(r16)
    1a9c:	103ff826 	beq	r2,zero,1a80 <__alt_data_end+0xffff1a80>
    1aa0:	d0a0ea17 	ldw	r2,-31832(gp)
    1aa4:	103ff526 	beq	r2,zero,1a7c <__alt_data_end+0xffff1a7c>
    1aa8:	d0a0ea17 	ldw	r2,-31832(gp)
    1aac:	8821883a 	mov	r16,r17
    1ab0:	8cbff81e 	bne	r17,r18,1a94 <__alt_data_end+0xffff1a94>
    1ab4:	dfc00517 	ldw	ra,20(sp)
    1ab8:	dd000417 	ldw	r20,16(sp)
    1abc:	dcc00317 	ldw	r19,12(sp)
    1ac0:	dc800217 	ldw	r18,8(sp)
    1ac4:	dc400117 	ldw	r17,4(sp)
    1ac8:	dc000017 	ldw	r16,0(sp)
    1acc:	dec00604 	addi	sp,sp,24
    1ad0:	f800283a 	ret
    1ad4:	80800317 	ldw	r2,12(r16)
    1ad8:	81000517 	ldw	r4,20(r16)
    1adc:	103ee83a 	callr	r2
    1ae0:	10000726 	beq	r2,zero,1b00 <alt_tick+0xc4>
    1ae4:	80c00217 	ldw	r3,8(r16)
    1ae8:	d120ea17 	ldw	r4,-31832(gp)
    1aec:	10c5883a 	add	r2,r2,r3
    1af0:	80800215 	stw	r2,8(r16)
    1af4:	113fe52e 	bgeu	r2,r4,1a8c <__alt_data_end+0xffff1a8c>
    1af8:	84c00405 	stb	r19,16(r16)
    1afc:	003fe306 	br	1a8c <__alt_data_end+0xffff1a8c>
    1b00:	0005303a 	rdctl	r2,status
    1b04:	1506703a 	and	r3,r2,r20
    1b08:	1801703a 	wrctl	status,r3
    1b0c:	81000117 	ldw	r4,4(r16)
    1b10:	80c00017 	ldw	r3,0(r16)
    1b14:	19000115 	stw	r4,4(r3)
    1b18:	81000117 	ldw	r4,4(r16)
    1b1c:	20c00015 	stw	r3,0(r4)
    1b20:	84000115 	stw	r16,4(r16)
    1b24:	84000015 	stw	r16,0(r16)
    1b28:	1001703a 	wrctl	status,r2
    1b2c:	003fd706 	br	1a8c <__alt_data_end+0xffff1a8c>

00001b30 <altera_nios2_gen2_irq_init>:
    1b30:	000170fa 	wrctl	ienable,zero
    1b34:	f800283a 	ret

00001b38 <alt_find_dev>:
    1b38:	defffb04 	addi	sp,sp,-20
    1b3c:	dc000015 	stw	r16,0(sp)
    1b40:	2c000017 	ldw	r16,0(r5)
    1b44:	dc400115 	stw	r17,4(sp)
    1b48:	2823883a 	mov	r17,r5
    1b4c:	dcc00315 	stw	r19,12(sp)
    1b50:	dfc00415 	stw	ra,16(sp)
    1b54:	dc800215 	stw	r18,8(sp)
    1b58:	2027883a 	mov	r19,r4
    1b5c:	0000e280 	call	e28 <strlen>
    1b60:	8c000b26 	beq	r17,r16,1b90 <alt_find_dev+0x58>
    1b64:	14800044 	addi	r18,r2,1
    1b68:	00000206 	br	1b74 <alt_find_dev+0x3c>
    1b6c:	84000017 	ldw	r16,0(r16)
    1b70:	8c000726 	beq	r17,r16,1b90 <alt_find_dev+0x58>
    1b74:	81000217 	ldw	r4,8(r16)
    1b78:	900d883a 	mov	r6,r18
    1b7c:	980b883a 	mov	r5,r19
    1b80:	0001d840 	call	1d84 <memcmp>
    1b84:	103ff91e 	bne	r2,zero,1b6c <__alt_data_end+0xffff1b6c>
    1b88:	8005883a 	mov	r2,r16
    1b8c:	00000106 	br	1b94 <alt_find_dev+0x5c>
    1b90:	0005883a 	mov	r2,zero
    1b94:	dfc00417 	ldw	ra,16(sp)
    1b98:	dcc00317 	ldw	r19,12(sp)
    1b9c:	dc800217 	ldw	r18,8(sp)
    1ba0:	dc400117 	ldw	r17,4(sp)
    1ba4:	dc000017 	ldw	r16,0(sp)
    1ba8:	dec00504 	addi	sp,sp,20
    1bac:	f800283a 	ret

00001bb0 <alt_find_file>:
    1bb0:	defffa04 	addi	sp,sp,-24
    1bb4:	dd000415 	stw	r20,16(sp)
    1bb8:	05000034 	movhi	r20,0
    1bbc:	a508d904 	addi	r20,r20,9060
    1bc0:	dc000015 	stw	r16,0(sp)
    1bc4:	a4000017 	ldw	r16,0(r20)
    1bc8:	dfc00515 	stw	ra,20(sp)
    1bcc:	dcc00315 	stw	r19,12(sp)
    1bd0:	dc800215 	stw	r18,8(sp)
    1bd4:	dc400115 	stw	r17,4(sp)
    1bd8:	85001626 	beq	r16,r20,1c34 <alt_find_file+0x84>
    1bdc:	2025883a 	mov	r18,r4
    1be0:	04c00bc4 	movi	r19,47
    1be4:	00000806 	br	1c08 <alt_find_file+0x58>
    1be8:	9185883a 	add	r2,r18,r6
    1bec:	10800007 	ldb	r2,0(r2)
    1bf0:	14c00126 	beq	r2,r19,1bf8 <alt_find_file+0x48>
    1bf4:	1000021e 	bne	r2,zero,1c00 <alt_find_file+0x50>
    1bf8:	0001d840 	call	1d84 <memcmp>
    1bfc:	10001626 	beq	r2,zero,1c58 <alt_find_file+0xa8>
    1c00:	84000017 	ldw	r16,0(r16)
    1c04:	85000b26 	beq	r16,r20,1c34 <alt_find_file+0x84>
    1c08:	84400217 	ldw	r17,8(r16)
    1c0c:	8809883a 	mov	r4,r17
    1c10:	0000e280 	call	e28 <strlen>
    1c14:	100d883a 	mov	r6,r2
    1c18:	8885883a 	add	r2,r17,r2
    1c1c:	10bfffc7 	ldb	r2,-1(r2)
    1c20:	900b883a 	mov	r5,r18
    1c24:	8809883a 	mov	r4,r17
    1c28:	14ffef1e 	bne	r2,r19,1be8 <__alt_data_end+0xffff1be8>
    1c2c:	31bfffc4 	addi	r6,r6,-1
    1c30:	003fed06 	br	1be8 <__alt_data_end+0xffff1be8>
    1c34:	0005883a 	mov	r2,zero
    1c38:	dfc00517 	ldw	ra,20(sp)
    1c3c:	dd000417 	ldw	r20,16(sp)
    1c40:	dcc00317 	ldw	r19,12(sp)
    1c44:	dc800217 	ldw	r18,8(sp)
    1c48:	dc400117 	ldw	r17,4(sp)
    1c4c:	dc000017 	ldw	r16,0(sp)
    1c50:	dec00604 	addi	sp,sp,24
    1c54:	f800283a 	ret
    1c58:	8005883a 	mov	r2,r16
    1c5c:	003ff606 	br	1c38 <__alt_data_end+0xffff1c38>

00001c60 <alt_get_fd>:
    1c60:	defffc04 	addi	sp,sp,-16
    1c64:	dc400115 	stw	r17,4(sp)
    1c68:	04400034 	movhi	r17,0
    1c6c:	8c486a04 	addi	r17,r17,8616
    1c70:	dc000015 	stw	r16,0(sp)
    1c74:	dfc00315 	stw	ra,12(sp)
    1c78:	dc800215 	stw	r18,8(sp)
    1c7c:	0021883a 	mov	r16,zero
    1c80:	8805883a 	mov	r2,r17
    1c84:	01400804 	movi	r5,32
    1c88:	00000206 	br	1c94 <alt_get_fd+0x34>
    1c8c:	84000044 	addi	r16,r16,1
    1c90:	81401526 	beq	r16,r5,1ce8 <alt_get_fd+0x88>
    1c94:	10c00017 	ldw	r3,0(r2)
    1c98:	10800304 	addi	r2,r2,12
    1c9c:	183ffb1e 	bne	r3,zero,1c8c <__alt_data_end+0xffff1c8c>
    1ca0:	2025883a 	mov	r18,r4
    1ca4:	01400304 	movi	r5,12
    1ca8:	8009883a 	mov	r4,r16
    1cac:	000070c0 	call	70c <__mulsi3>
    1cb0:	00c00034 	movhi	r3,0
    1cb4:	8885883a 	add	r2,r17,r2
    1cb8:	18c8d604 	addi	r3,r3,9048
    1cbc:	14800015 	stw	r18,0(r2)
    1cc0:	18800017 	ldw	r2,0(r3)
    1cc4:	1400010e 	bge	r2,r16,1ccc <alt_get_fd+0x6c>
    1cc8:	1c000015 	stw	r16,0(r3)
    1ccc:	8005883a 	mov	r2,r16
    1cd0:	dfc00317 	ldw	ra,12(sp)
    1cd4:	dc800217 	ldw	r18,8(sp)
    1cd8:	dc400117 	ldw	r17,4(sp)
    1cdc:	dc000017 	ldw	r16,0(sp)
    1ce0:	dec00404 	addi	sp,sp,16
    1ce4:	f800283a 	ret
    1ce8:	043ffa04 	movi	r16,-24
    1cec:	003ff706 	br	1ccc <__alt_data_end+0xffff1ccc>

00001cf0 <alt_exception_cause_generated_bad_addr>:
    1cf0:	213ffe84 	addi	r4,r4,-6
    1cf4:	008003c4 	movi	r2,15
    1cf8:	11001636 	bltu	r2,r4,1d54 <alt_exception_cause_generated_bad_addr+0x64>
    1cfc:	200890ba 	slli	r4,r4,2
    1d00:	00800034 	movhi	r2,0
    1d04:	10874504 	addi	r2,r2,7444
    1d08:	2089883a 	add	r4,r4,r2
    1d0c:	20800017 	ldw	r2,0(r4)
    1d10:	1000683a 	jmp	r2
    1d14:	00001d5c 	xori	zero,zero,117
    1d18:	00001d5c 	xori	zero,zero,117
    1d1c:	00001d54 	movui	zero,117
    1d20:	00001d54 	movui	zero,117
    1d24:	00001d54 	movui	zero,117
    1d28:	00001d5c 	xori	zero,zero,117
    1d2c:	00001d54 	movui	zero,117
    1d30:	00001d54 	movui	zero,117
    1d34:	00001d5c 	xori	zero,zero,117
    1d38:	00001d5c 	xori	zero,zero,117
    1d3c:	00001d54 	movui	zero,117
    1d40:	00001d5c 	xori	zero,zero,117
    1d44:	00001d54 	movui	zero,117
    1d48:	00001d54 	movui	zero,117
    1d4c:	00001d54 	movui	zero,117
    1d50:	00001d5c 	xori	zero,zero,117
    1d54:	0005883a 	mov	r2,zero
    1d58:	f800283a 	ret
    1d5c:	00800044 	movi	r2,1
    1d60:	f800283a 	ret

00001d64 <exit>:
    1d64:	defffe04 	addi	sp,sp,-8
    1d68:	000b883a 	mov	r5,zero
    1d6c:	dc000015 	stw	r16,0(sp)
    1d70:	dfc00115 	stw	ra,4(sp)
    1d74:	2021883a 	mov	r16,r4
    1d78:	0001ddc0 	call	1ddc <__call_exitprocs>
    1d7c:	8009883a 	mov	r4,r16
    1d80:	0001f6c0 	call	1f6c <_exit>

00001d84 <memcmp>:
    1d84:	218d883a 	add	r6,r4,r6
    1d88:	21800826 	beq	r4,r6,1dac <memcmp+0x28>
    1d8c:	20800003 	ldbu	r2,0(r4)
    1d90:	28c00003 	ldbu	r3,0(r5)
    1d94:	10c00226 	beq	r2,r3,1da0 <memcmp+0x1c>
    1d98:	10c5c83a 	sub	r2,r2,r3
    1d9c:	f800283a 	ret
    1da0:	21000044 	addi	r4,r4,1
    1da4:	29400044 	addi	r5,r5,1
    1da8:	003ff706 	br	1d88 <__alt_data_end+0xffff1d88>
    1dac:	0005883a 	mov	r2,zero
    1db0:	f800283a 	ret

00001db4 <memcpy>:
    1db4:	2005883a 	mov	r2,r4
    1db8:	2007883a 	mov	r3,r4
    1dbc:	218d883a 	add	r6,r4,r6
    1dc0:	19800526 	beq	r3,r6,1dd8 <memcpy+0x24>
    1dc4:	29000003 	ldbu	r4,0(r5)
    1dc8:	18c00044 	addi	r3,r3,1
    1dcc:	29400044 	addi	r5,r5,1
    1dd0:	193fffc5 	stb	r4,-1(r3)
    1dd4:	003ffa06 	br	1dc0 <__alt_data_end+0xffff1dc0>
    1dd8:	f800283a 	ret

00001ddc <__call_exitprocs>:
    1ddc:	defff504 	addi	sp,sp,-44
    1de0:	dd000515 	stw	r20,20(sp)
    1de4:	05000034 	movhi	r20,0
    1de8:	dc800315 	stw	r18,12(sp)
    1dec:	dfc00a15 	stw	ra,40(sp)
    1df0:	df000915 	stw	fp,36(sp)
    1df4:	ddc00815 	stw	r23,32(sp)
    1df8:	dd800715 	stw	r22,28(sp)
    1dfc:	dd400615 	stw	r21,24(sp)
    1e00:	dcc00415 	stw	r19,16(sp)
    1e04:	dc400215 	stw	r17,8(sp)
    1e08:	dc000115 	stw	r16,4(sp)
    1e0c:	d9000015 	stw	r4,0(sp)
    1e10:	2825883a 	mov	r18,r5
    1e14:	a508d404 	addi	r20,r20,9040
    1e18:	a4400017 	ldw	r17,0(r20)
    1e1c:	8cc00c17 	ldw	r19,48(r17)
    1e20:	8c400c04 	addi	r17,r17,48
    1e24:	98004526 	beq	r19,zero,1f3c <__call_exitprocs+0x160>
    1e28:	9c000117 	ldw	r16,4(r19)
    1e2c:	00900034 	movhi	r2,16384
    1e30:	10bfffc4 	addi	r2,r2,-1
    1e34:	9d402217 	ldw	r21,136(r19)
    1e38:	85bfffc4 	addi	r22,r16,-1
    1e3c:	80a1883a 	add	r16,r16,r2
    1e40:	8421883a 	add	r16,r16,r16
    1e44:	8421883a 	add	r16,r16,r16
    1e48:	ac2f883a 	add	r23,r21,r16
    1e4c:	84000204 	addi	r16,r16,8
    1e50:	9c21883a 	add	r16,r19,r16
    1e54:	b0002716 	blt	r22,zero,1ef4 <__call_exitprocs+0x118>
    1e58:	90000726 	beq	r18,zero,1e78 <__call_exitprocs+0x9c>
    1e5c:	a800041e 	bne	r21,zero,1e70 <__call_exitprocs+0x94>
    1e60:	b5bfffc4 	addi	r22,r22,-1
    1e64:	bdffff04 	addi	r23,r23,-4
    1e68:	843fff04 	addi	r16,r16,-4
    1e6c:	003ff906 	br	1e54 <__alt_data_end+0xffff1e54>
    1e70:	b9002017 	ldw	r4,128(r23)
    1e74:	913ffa1e 	bne	r18,r4,1e60 <__alt_data_end+0xffff1e60>
    1e78:	99000117 	ldw	r4,4(r19)
    1e7c:	82000017 	ldw	r8,0(r16)
    1e80:	213fffc4 	addi	r4,r4,-1
    1e84:	b100021e 	bne	r22,r4,1e90 <__call_exitprocs+0xb4>
    1e88:	9d800115 	stw	r22,4(r19)
    1e8c:	00000106 	br	1e94 <__call_exitprocs+0xb8>
    1e90:	80000015 	stw	zero,0(r16)
    1e94:	403ff226 	beq	r8,zero,1e60 <__alt_data_end+0xffff1e60>
    1e98:	9f000117 	ldw	fp,4(r19)
    1e9c:	a8000526 	beq	r21,zero,1eb4 <__call_exitprocs+0xd8>
    1ea0:	00800044 	movi	r2,1
    1ea4:	1592983a 	sll	r9,r2,r22
    1ea8:	a9404017 	ldw	r5,256(r21)
    1eac:	494a703a 	and	r5,r9,r5
    1eb0:	2800021e 	bne	r5,zero,1ebc <__call_exitprocs+0xe0>
    1eb4:	403ee83a 	callr	r8
    1eb8:	00000906 	br	1ee0 <__call_exitprocs+0x104>
    1ebc:	a9004117 	ldw	r4,260(r21)
    1ec0:	4908703a 	and	r4,r9,r4
    1ec4:	2000041e 	bne	r4,zero,1ed8 <__call_exitprocs+0xfc>
    1ec8:	b9400017 	ldw	r5,0(r23)
    1ecc:	d9000017 	ldw	r4,0(sp)
    1ed0:	403ee83a 	callr	r8
    1ed4:	00000206 	br	1ee0 <__call_exitprocs+0x104>
    1ed8:	b9000017 	ldw	r4,0(r23)
    1edc:	403ee83a 	callr	r8
    1ee0:	99000117 	ldw	r4,4(r19)
    1ee4:	e13fcc1e 	bne	fp,r4,1e18 <__alt_data_end+0xffff1e18>
    1ee8:	89000017 	ldw	r4,0(r17)
    1eec:	993fdc26 	beq	r19,r4,1e60 <__alt_data_end+0xffff1e60>
    1ef0:	003fc906 	br	1e18 <__alt_data_end+0xffff1e18>
    1ef4:	00800034 	movhi	r2,0
    1ef8:	10800004 	addi	r2,r2,0
    1efc:	10000f26 	beq	r2,zero,1f3c <__call_exitprocs+0x160>
    1f00:	99400117 	ldw	r5,4(r19)
    1f04:	99000017 	ldw	r4,0(r19)
    1f08:	2800091e 	bne	r5,zero,1f30 <__call_exitprocs+0x154>
    1f0c:	20000826 	beq	r4,zero,1f30 <__call_exitprocs+0x154>
    1f10:	89000015 	stw	r4,0(r17)
    1f14:	a8000226 	beq	r21,zero,1f20 <__call_exitprocs+0x144>
    1f18:	a809883a 	mov	r4,r21
    1f1c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    1f20:	9809883a 	mov	r4,r19
    1f24:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    1f28:	8cc00017 	ldw	r19,0(r17)
    1f2c:	003fbd06 	br	1e24 <__alt_data_end+0xffff1e24>
    1f30:	9823883a 	mov	r17,r19
    1f34:	2027883a 	mov	r19,r4
    1f38:	003fba06 	br	1e24 <__alt_data_end+0xffff1e24>
    1f3c:	dfc00a17 	ldw	ra,40(sp)
    1f40:	df000917 	ldw	fp,36(sp)
    1f44:	ddc00817 	ldw	r23,32(sp)
    1f48:	dd800717 	ldw	r22,28(sp)
    1f4c:	dd400617 	ldw	r21,24(sp)
    1f50:	dd000517 	ldw	r20,20(sp)
    1f54:	dcc00417 	ldw	r19,16(sp)
    1f58:	dc800317 	ldw	r18,12(sp)
    1f5c:	dc400217 	ldw	r17,8(sp)
    1f60:	dc000117 	ldw	r16,4(sp)
    1f64:	dec00b04 	addi	sp,sp,44
    1f68:	f800283a 	ret

00001f6c <_exit>:
    1f6c:	20000226 	beq	r4,zero,1f78 <_exit+0xc>
    1f70:	002af070 	cmpltui	zero,zero,43969
    1f74:	003fff06 	br	1f74 <__alt_data_end+0xffff1f74>
    1f78:	002af0b0 	cmpltui	zero,zero,43970
    1f7c:	003ffd06 	br	1f74 <__alt_data_end+0xffff1f74>
